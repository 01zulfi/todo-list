(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),o=n(645),r=n.n(o)()(s());r.push([t.id,"* {\n  border: 1px solid purple;\n  padding: 2px;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,YAAY;AACd",sourcesContent:["* {\n  border: 1px solid purple;\n  padding: 2px;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(s[r]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,o=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);r=!0);}catch(t){a=!0,s=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw s}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=s[1],r=s[3];if(!r)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),l=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},r=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var p=n(d),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:d,updater:s(h,i),references:1}),r.push(d)}return r}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var o=i(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=n(o[r]);e[a].references--}for(var c=i(t,s),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,o=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),o=n(569),r=n.n(o),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),p=n.n(d),h=n(890),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=r().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=l(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const f=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:t.disabled,id:Math.floor(Math.random()*Date.now()).toString()};e.push(n)}return e},k=function(t,e,n,i,s){const o={title:t,description:e,dueDate:n,priority:i,checklist:f(s),id:Math.floor(Math.random()*Date.now()).toString(),done:!1};return{get title(){return o.title},set title(t){o.title=t},get description(){return o.description},get id(){return o.id},get dueDate(){return o.dueDate},get checklist(){return o.checklist},get done(){return o.done},set done(t){o.done=t},task:o}},b=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},v={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},y={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=b("h1",{className:"appTitle",textContent:"T O D O"}),this.task=b("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=b("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=T("Task"),this.project=b("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=b("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=b("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=b("form",{id:"projectForm"}),this.inputProjectTitle=b("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=b("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=b("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=b("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){v.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(y)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(y))},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"}};function T(t){const e=b("section",{id:`section${t}Form`,className:t,style:"display: none"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=b("form",{id:`form${t}`}),this.inputTaskTitle=b("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=b("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=b("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=b("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=b("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=b("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),e.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(n)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(n))},publishData:function(){return"Task"===t?v.publish("addTask",this.form.elements):"UpdateTask"===t?v.publish("updateTask",this.form.elements):v.publish("addTaskInProject",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),e.style.display="none"},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((t=>t.remove())),this.checklistButtons.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=b("div"),this.inputTaskChecklist=b("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=b("button",{className:`input${t}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(n))},deleteChecklistItem:function(t){t.target.parentNode.remove()}};return n.init(),e}const D=function(t,e,n){let i=[];const s={title:"AllTasks",description:void 0,dueDate:void 0};return{add(t){i=[...i,t]},remove(t){i=i.filter((e=>e.id!==t))},find:t=>i.find((e=>e.id===t)),get checklistArray(){const t=[];for(let e=0;e<i.length;e++)t.push(i[e].checklist);return t},get taskArray(){return[...i]},get projectData(){return s}}}();function C(t){const e=k(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));D.add(e),v.publish("addTaskDOM",D.taskArray)}function g(t){D.remove(t)}function j(t){v.publish("updateThisTask",D.find(t)),D.remove(t)}function E(t){let e;console.log(D.checklistArray);for(let n=0;n<D.checklistArray.length&&(e=D.checklistArray[n].find((e=>e.id===t)),!e);n++);e.checked?e.checked=!1:e.checked=!0,console.log(D.taskArray)}function x(t){const e=D.find(t);e.done?e.done=!1:e.done=!0,v.publish("toggleCompleteTaskDOM",e)}function P(t){console.log(t)}function A(){}function N(t){!function(){const t=document.querySelectorAll(".taskDiv");t&&t.forEach((t=>t.remove()))}();const e=document.querySelector(".projectTitle");for(const n of t)document.body.insertBefore(B(n),e)}function B(t){const e=b("div",{className:"taskDiv",id:t.id});return t.done?e.style.opacity=.5:e.style.opacity=1,{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=b("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=b("p",{className:"taskDesc",textContent:t.description}),this.taskChecklist=function(t){const e=b("div",{className:"checklistDiv"});for(const n of t){const t=b("div",{className:"checkboxDiv"}),i=b("input",{type:"checkbox",id:n.id,"pointer-events":"none"}),s=b("label",{for:n.id,textContent:n.content});n.checked&&(i.checked=!0,s.style.opacity=.5),t.append(i,s),e.append(t),t.addEventListener("click",S)}return e}(t.checklist),this.taskDueDate=b("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskComplete=b("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=b("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=b("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskComplete,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskComplete.addEventListener("click",(t=>v.publish("toggleCompleteTask",t.target.parentNode.id))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>v.publish("requireTask",t.target.parentNode.id)))},deleteTaskDOM:function(t){v.publish("deleteTask",t.target.parentNode.id),t.target.parentNode.remove()}}.init(),e}function S(t){const e=this.querySelector("input"),n=this.querySelector("label");e.checked?void 0===t.target.type&&(e.checked=!1):void 0===t.target.type&&(e.checked=!0),function(t,e){e.style.opacity=t?.5:1}(e.checked,n),v.publish("toggleChecklist",e.id)}function M(t){const e=document.querySelector("section");e.style.display="block";const n=e.firstChild,i=document.getElementById("submitButtonTask");n.elements[0].value=t.title,n.elements[1].value=t.description,n.elements[2].value=t.dueDate,n.elements[3].value=t.priority;for(const e of t.checklist){const t=b("div"),o=b("input",{className:"inputChecklist",type:"text",value:e.content,disabled:e.checked}),r=b("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});t.append(o,r),n.insertBefore(t,i),r.addEventListener("click",s)}function s(t){t.target.parentNode.remove()}}function I(t){const e=document.getElementById(t.id);t.done?e.style.opacity=.5:e.style.opacity=1}function L(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Project`)));for(const e of t){const t=b("h3",{id:`${e.filteredTitle}Project`,className:"projectName",textContent:`${e.title}`}),n=b("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=T(`TaskIn${e.filteredTitle}`);n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i)}}const O=[];v.subscribe("addProject",(function(t){const e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,s=t.inputProjectDueDate.value,Object.assign({},function(t){return{title:t}}(n),FilteredTitle(n),function(t){return{description:t}}(i),function(t){return{dueDate:t}}(s),{tasks:[]}));var n,i,s;O.push(e),v.publish("addProjectDOM",O)})),v.subscribe("addTaskInProject",(function(t){const e=k(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));for(const n of O)if(t[0].parentNode.id.includes(n.filteredTitle)){n.tasks.push(e);break}v.publish("addTaskInProjectDOM",O),console.dir(O)})),y.init(),v.subscribe("addTask",C),v.subscribe("deleteTask",g),v.subscribe("requireTask",j),v.subscribe("toggleChecklist",E),v.subscribe("toggleCompleteTask",x),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=!1;for(const n of D.taskArray)t.target.value===n.title&&(e=!0,t.target.setCustomValidity("Task with same name already exists"));e?e=!1:t.target.setCustomValidity("")})),v.subscribe("addTaskDOM",P),v.subscribe("addTaskDOM",N),v.subscribe("updateThisTask",M),v.subscribe("toggleCompleteTaskDOM",I),v.subscribe("addProjectDOM",P),v.subscribe("addProjectDOM",L),v.subscribe("addTaskInProjectDOM",A),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of O)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,