(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),o=n(645),r=n.n(o)()(s());r.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(s[r]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,o=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);r=!0);}catch(t){a=!0,s=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw s}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=s[1],r=s[3];if(!r)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),l=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},r=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var p=n(d),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:d,updater:s(h,i),references:1}),r.push(d)}return r}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var o=i(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=n(o[r]);e[a].references--}for(var c=i(t,s),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,o=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),o=n(569),r=n.n(o),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),p=n.n(d),h=n(890),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=r().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=l(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=function(t){return{title:t}},b=function(t){return{filteredTitle:t.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s{2,}/g," ").replace(/\s+/g,"")}},k=function(t){return{description:t}},v=function(t){return{dueDate:t}},y=function(t,e,n,i,s){return Object.assign({},m(t),b(t),k(e),v(n),function(t){return{priority:t}}(i),function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:!1};e.push(n)}return{checklist:e}}(s))},T=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},D={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},j={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=T("h1",{className:"appTitle",textContent:"T O D O"}),this.task=T("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=T("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=C("Task"),this.project=T("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=T("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=T("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=T("form",{id:"projectForm"}),this.inputProjectTitle=T("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=T("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=T("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=T("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){D.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(j)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(j))},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"}};function C(t){const e=T("section",{id:`section${t}Form`,className:t,style:"display: none"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=T("form",{id:`form${t}`}),this.inputTaskTitle=T("input",{id:`input${t}Title`,name:`input${t}Name`,type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=T("textarea",{id:`input${t}Desc`,name:`input${t}Desc`,placeholder:"desc/notes..."}),this.inputTaskDueDate=T("input",{id:`input${t}DueDate`,name:`input${t}DueDate`,type:"date"}),this.inputTaskPriority=T("input",{id:`input${t}Priority`,name:`input${t}Priority`,type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=T("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=T("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),e.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(n)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(n))},publishData:function(){return"Task"===t?D.publish("addTask",this.form.elements):"UpdateTask"===t?D.publish("updateTask",this.form.elements):D.publish("addTaskInProject",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),e.style.display="none"},deleteChecklistInputs:function(){this.checkListInputs=document.querySelectorAll(".inputChecklist"),this.checkListInputs.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklist=T("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",placeholder:"enter checklist item here..."}),this.form.insertBefore(this.inputTaskChecklist,this.submitButton)}};return n.init(),e}const E=[];function x(t){console.log(t)}function P(t){!function(){const t=document.querySelectorAll(".taskDiv");t&&t.forEach((t=>t.remove()))}();const e=document.querySelector(".projectTitle");for(const n of t)document.body.insertBefore(g(n),e)}function g(t){const e=T("div",{className:"taskDiv",id:`${t.filteredTitle}Task`});return{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=T("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=T("p",{className:"taskDesc",textContent:t.description}),this.taskDueDate=T("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskDelete=T("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=T("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskDueDate,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskDelete.addEventListener("click",(t=>D.publish("deleteTask",t.target.parentNode.id))),this.taskUpdate.addEventListener("click",(t=>D.publish("requireTask",t.target.parentNode.id)))}}.init(),e}function A(t){const e=C("UpdateTask");e.style.display="block";const n=e.firstChild;n.elements[0].value=t.title,n.elements[1].value=t.description,n.elements[2].value=t.dueDate,n.elements[3].value=t.priority,document.body.append(e)}function N(t){document.querySelector(".UpdateTask").firstChild.addEventListener("submit",(e=>{e.preventDefault(),function(t,e){const n=document.querySelector(".UpdateTask").firstChild,i=y(n[0].value,n[1].value,n[2].value,n[3].value);i.index=t.index,E.splice(t.index,1,i),D.publish("updateTaskDOM",E),console.log(E)}(t),document.querySelector(".UpdateTask").remove()}))}function S(t){const e=Array.from(document.querySelectorAll(".taskDiv"));for(const n of e)if(n.id.includes(t.filteredTitle)){n.remove();break}}function B(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Project`)));for(const e of t){const t=T("h3",{id:`${e.filteredTitle}Project`,className:"projectName",textContent:`${e.title}`}),n=T("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=C(`TaskIn${e.filteredTitle}`);n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i)}}D.subscribe("addTask",(function(t){const e=y(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));(function(t){t.index=E.length})(e),function(t){E.push(t)}(e),D.publish("addTaskDOM",E)})),D.subscribe("deleteTask",(function(t){const e=[];for(const n of E)t.includes(n.filteredTitle)?D.publish("deleteTaskDOM",n):e.push(n);E.splice(0),E.push(...e),console.log(E)})),D.subscribe("requireTask",(function(t){for(const e of E)if(t.includes(e.filteredTitle)){D.publish("updateThisTask",e);break}}));const L=[];D.subscribe("addProject",(function(t){const e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,s=t.inputProjectDueDate.value,Object.assign({},m(n),b(n),k(i),v(s),{tasks:[]}));var n,i,s;L.push(e),D.publish("addProjectDOM",L)})),D.subscribe("addChecklistInTaskInProject",(function(t){if(!t)return;const e={content:t,checked:!1};checklist.push(e)})),D.subscribe("addTaskInProject",(function(t){const e=y(t[0].value,t[1].value,t[2].value,t[3].value);for(const t of L)form.className.includes(t.filteredTitle)&&t.tasks.push(e);console.log(L)})),j.init(),D.subscribe("addTaskDOM",x),D.subscribe("addTaskDOM",P),D.subscribe("deleteTaskDOM",S),D.subscribe("updateThisTask",A),D.subscribe("updateThisTask",N),D.subscribe("updateTaskDOM",P),D.subscribe("addProjectDOM",x),D.subscribe("addProjectDOM",B),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=0;for(const n of E)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0})),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of L)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,