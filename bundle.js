(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>c});var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const c=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var c=0;c<t.length;c++){var a=[].concat(t[c]);i&&r[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),e.push(a))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,r=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],s=!0,c=!1;try{for(n=n.call(t);!(s=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);s=!0);}catch(t){c=!0,r=t}finally{try{s||null==n.return||n.return()}finally{if(c)throw r}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],s=r[3];if(!s)return o;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),u="/*# ".concat(a," */"),l=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],c=0;c<t.length;c++){var a=t[c],u=i.base?a[0]+i.base:a[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var p=n(d),m={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(e[p].references++,e[p].updater(m)):e.push({identifier:d,updater:r(m,i),references:1}),s.push(d)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var c=n(o[s]);e[c].references--}for(var a=i(t,r),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=a}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),c=n(565),a=n.n(c),u=n(216),l=n.n(u),d=n(589),p=n.n(d),m=n(890),f={};f.styleTagTransform=p(),f.setAttributes=a(),f.insert=s().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=function(t){return{title:t}},y=function(t){return{filteredTitle:t.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s{2,}/g," ").replace(/\s+/g,"")}},b=function(t){return{description:t}},k=function(t){return{dueDate:t}},v=function(t,e,n,i){return Object.assign({},h(t),y(t),b(e),k(n),function(t){return{priority:t}}(i))},T=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},C={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},j={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=T("h1",{className:"appTitle",textContent:"T O D O"}),this.task=T("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=T("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=g("Task"),this.project=T("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=T("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=T("section",{className:"projectFormDiv",style:"display: none"}),e=T("form",{id:"projectForm"}),n=T("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),i=T("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),r=T("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),o=T("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,i,r,o),t.append(e),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(j)),this.taskForm.addEventListener("submit",this.formFunction.bind(j)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(j)),this.projectForm.addEventListener("submit",this.formFunction.bind(j)),document.querySelector("#addTaskChecklistButton").addEventListener("click",this.openChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.closeChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.addChecklistItem)},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"},formFunction:function(t){t.preventDefault(),"taskForm"===t.target.id?this.taskForm.firstChild.reset():this.projectForm.firstChild.reset()},openChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="block",document.querySelector("#submitTaskChecklistButton").style.display="block"},closeChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="none",document.querySelector("#submitTaskChecklistButton").style.display="none"},addChecklistItem:function(){C.publish("addChecklist",document.querySelector("#inputTaskChecklist").value),document.querySelector("#inputTaskChecklist").value=""}};function g(t){const e=T("section",{id:`section${t}Form`,className:t,style:"display: none"}),n=T("form",{id:`form${t}`}),i=T("input",{id:`input${t}Title`,name:`input${t}Name`,type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),r=T("textarea",{id:`input${t}Desc`,name:`input${t}Desc`,placeholder:"desc/notes..."}),o=T("input",{id:`input${t}DueDate`,name:`input${t}DueDate`,type:"date"}),s=T("input",{id:`input${t}Priority`,name:`input${t}Priority`,type:"text",placeholder:"high/medium/low"}),c=T("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),a=T("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,type:"text",placeholder:"enter list here...",style:"display: none;"}),u=T("button",{id:`submit${t}ChecklistButton`,type:"button",textContent:"Add",style:"display: none;"}),l=T("button",{id:"submitButton",type:"submit",textContent:"Submit"});return n.append(i,r,o,s,c,a,u,l),e.append(n),e}const x=[],S=[];C.subscribe("addChecklist",(function(t){if(!t)return;const e={content:t,checked:!1};S.push(e)}));function P(t){console.log(t)}function E(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}`)));for(const e of t){const t=T("h3",{id:`${e.filteredTitle}`,className:"projectName",textContent:`${e.title}`}),n=T("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=g(`TaskIn${e.filteredTitle}`);i.addEventListener("submit",(t=>{t.preventDefault(),C.publish("addTaskInProject",i),t.target.reset()})),n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i),document.getElementById(`addTaskIn${e.filteredTitle}ChecklistButton`).addEventListener("click",(()=>{document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).style.display="block",document.querySelector(`#submitTaskIn${e.filteredTitle}ChecklistButton`).style.display="block"})),document.getElementById(`submitTaskIn${e.filteredTitle}ChecklistButton`).addEventListener("click",(()=>{document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).style.display="none",document.querySelector(`#submitTaskIn${e.filteredTitle}ChecklistButton`).style.display="none",C.publish("addChecklistInTaskInProject",document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).value),document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).value=""}))}}const $=[],A=[];function I(){const t=document.querySelector("#projectForm").elements,e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,r=t.inputProjectDueDate.value,Object.assign({},h(n),y(n),b(i),k(r)));var n,i,r;e.tasks=[],$.push(e),C.publish("addProject",$)}C.subscribe("addChecklistInTaskInProject",(function(t){if(!t)return;const e={content:t,checked:!1};A.push(e)})),C.subscribe("addTaskInProject",(function(t){const e=t.firstChild.elements,n=v(e[0].value,e[1].value,e[2].value,e[3].value);n.checklist=[],n.checklist=A.slice();for(const e of $)t.className.includes(e.filteredTitle)&&e.tasks.push(n);console.log($),A.splice(0)}));j.init(),document.querySelector("#formTask").addEventListener("submit",(t=>{!function(){const t=document.querySelector("#formTask").elements,e=v(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value);e.checklist=S.slice(),x.push(e),C.publish("addTask",x),S.splice(0)}()})),C.subscribe("addTask",P),C.subscribe("addProject",P),C.subscribe("addProject",E),document.querySelector("#projectForm").addEventListener("submit",I),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=0;for(const n of x)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0})),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of $)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,