(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),o=n(645),r=n.n(o)()(s());r.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const a=r},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(s[r]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,o=[],r=!0,a=!1;try{for(n=n.call(t);!(r=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);r=!0);}catch(t){a=!0,s=t}finally{try{r||null==n.return||n.return()}finally{if(a)throw s}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=s[1],r=s[3];if(!r)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),l=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},r=[],a=0;a<t.length;a++){var c=t[a],u=i.base?c[0]+i.base:c[0],l=o[u]||0,d="".concat(u," ").concat(l);o[u]=l+1;var p=n(d),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(m)):e.push({identifier:d,updater:s(m,i),references:1}),r.push(d)}return r}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var o=i(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<o.length;r++){var a=n(o[r]);e[a].references--}for(var c=i(t,s),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,o=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),o=n(569),r=n.n(o),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),p=n.n(d),m=n(890),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=r().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=l(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=function(t){return{title:t}},k=function(t){return{filteredTitle:t.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s{2,}/g," ").replace(/\s+/g,"")}},y=function(t){return{description:t}},b=function(t){return{dueDate:t}},v=function(t,e,n,i){return Object.assign({},h(t),k(t),y(e),b(n),function(t){return{priority:t}}(i))},T=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},C={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},j={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=T("h1",{className:"appTitle",textContent:"T O D O"}),this.task=T("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=T("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=g("Task"),this.project=T("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=T("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=T("section",{className:"projectFormDiv",style:"display: none"}),e=T("form",{id:"projectForm"}),n=T("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),i=T("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),s=T("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),o=T("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,i,s,o),t.append(e),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(j)),this.taskForm.addEventListener("submit",this.formFunction.bind(j)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(j)),this.projectForm.addEventListener("submit",this.formFunction.bind(j)),document.querySelector("#addTaskChecklistButton").addEventListener("click",this.openChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.closeChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.addChecklistItem)},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"},formFunction:function(t){t.preventDefault(),"formTask"===t.target.id?this.taskForm.firstChild.reset():this.projectForm.firstChild.reset()},openChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="block",document.querySelector("#submitTaskChecklistButton").style.display="block"},closeChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="none",document.querySelector("#submitTaskChecklistButton").style.display="none"},addChecklistItem:function(){C.publish("addChecklist",document.querySelector("#inputTaskChecklist").value),document.querySelector("#inputTaskChecklist").value=""}};function g(t){const e=T("section",{id:`section${t}Form`,className:t,style:"display: none"}),n=T("form",{id:`form${t}`}),i=T("input",{id:`input${t}Title`,name:`input${t}Name`,type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),s=T("textarea",{id:`input${t}Desc`,name:`input${t}Desc`,placeholder:"desc/notes..."}),o=T("input",{id:`input${t}DueDate`,name:`input${t}DueDate`,type:"date"}),r=T("input",{id:`input${t}Priority`,name:`input${t}Priority`,type:"text",placeholder:"high/medium/low"}),a=T("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),c=T("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,type:"text",placeholder:"enter list here...",style:"display: none;"}),u=T("button",{id:`submit${t}ChecklistButton`,type:"button",textContent:"Add",style:"display: none;"}),l=T("button",{id:"submitButton",type:"submit",textContent:"Submit"});return n.append(i,s,o,r,a,c,u,l),e.append(n),e}const x=[];C.subscribe("deleteTask",(function(t){const e=[];for(const n of x)t.includes(n.filteredTitle)?C.publish("deleteTaskDOM",n):e.push(n);x.splice(0),x.push(...e),console.log(x)})),C.subscribe("requireTask",(function(t){for(const e of x)if(t.includes(e.filteredTitle)){C.publish("updateThisTask",e);break}}));const S=[];C.subscribe("addChecklist",(function(t){if(!t)return;const e={content:t,checked:!1};S.push(e)}));function D(t){console.log(t)}function E(t){const e=document.querySelectorAll(".taskDiv");e&&e.forEach((t=>t.remove())),t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Task`)));for(const e of t){const t=T("div",{className:"taskDiv",id:`${e.filteredTitle}Task`}),n=T("h4",{className:"taskTitle"}),i=T("p",{className:"taskDesc"}),s=T("p",{className:"taskDueDate"}),o=T("button",{className:"deleteTask"}),r=T("button",{className:"updateTask"}),a=document.querySelector(".projectTitle");n.textContent=e.title,i.textContent=e.description,s.textContent=e.dueDate,o.textContent="Delete Task X",r.textContent="Update Task",o.addEventListener("click",(t=>C.publish("deleteTask",t.target.parentNode.id))),r.addEventListener("click",(t=>C.publish("requireTask",t.target.parentNode.id))),t.style.border="5px solid black",t.style.padding="30px",t.append(n,i,s,o,r),document.body.insertBefore(t,a)}}function P(t){const e=g("UpdateTask");e.style.display="block";const n=e.firstChild;n.elements[0].value=t.title,n.elements[1].value=t.description,n.elements[2].value=t.dueDate,n.elements[3].value=t.priority,document.body.append(e)}function q(t){document.querySelector(".UpdateTask").firstChild.addEventListener("submit",(e=>{e.preventDefault(),function(t,e){const n=document.querySelector(".UpdateTask").firstChild,i=v(n[0].value,n[1].value,n[2].value,n[3].value);i.index=t.index,x.splice(t.index,1,i),C.publish("updateTaskDOM",x),console.log(x)}(t),document.querySelector(".UpdateTask").remove()}))}function A(t){const e=Array.from(document.querySelectorAll(".taskDiv"));for(const n of e)if(n.id.includes(t.filteredTitle)){n.remove();break}}function $(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Project`)));for(const e of t){const t=T("h3",{id:`${e.filteredTitle}Project`,className:"projectName",textContent:`${e.title}`}),n=T("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=g(`TaskIn${e.filteredTitle}`);i.addEventListener("submit",(t=>{t.preventDefault(),C.publish("addTaskInProject",i),t.target.reset()})),n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i),document.getElementById(`addTaskIn${e.filteredTitle}ChecklistButton`).addEventListener("click",(()=>{document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).style.display="block",document.querySelector(`#submitTaskIn${e.filteredTitle}ChecklistButton`).style.display="block"})),document.getElementById(`submitTaskIn${e.filteredTitle}ChecklistButton`).addEventListener("click",(()=>{document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).style.display="none",document.querySelector(`#submitTaskIn${e.filteredTitle}ChecklistButton`).style.display="none",C.publish("addChecklistInTaskInProject",document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).value),document.querySelector(`#inputTaskIn${e.filteredTitle}Checklist`).value=""}))}}const I=[],B=[];function N(){const t=document.querySelector("#projectForm").elements,e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,s=t.inputProjectDueDate.value,Object.assign({},h(n),k(n),y(i),b(s)));var n,i,s;e.tasks=[],I.push(e),C.publish("addProject",I)}C.subscribe("addChecklistInTaskInProject",(function(t){if(!t)return;const e={content:t,checked:!1};B.push(e)})),C.subscribe("addTaskInProject",(function(t){const e=t.firstChild.elements,n=v(e[0].value,e[1].value,e[2].value,e[3].value);n.checklist=[],n.checklist=B.slice();for(const e of I)t.className.includes(e.filteredTitle)&&e.tasks.push(n);console.log(I),B.splice(0)}));j.init(),document.querySelector("#formTask").addEventListener("submit",(t=>{!function(){const t=document.querySelector("#formTask").elements,e=v(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value);e.checklist=S.slice(),e.index=x.length,x.push(e),C.publish("addTask",x),S.splice(0)}()})),C.subscribe("addTask",D),C.subscribe("addTask",E),C.subscribe("deleteTaskDOM",A),C.subscribe("updateThisTask",P),C.subscribe("updateThisTask",q),C.subscribe("updateTaskDOM",E),C.subscribe("addProject",D),C.subscribe("addProject",$),document.querySelector("#projectForm").addEventListener("submit",N),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=0;for(const n of x)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0})),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of I)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,