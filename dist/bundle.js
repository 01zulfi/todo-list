(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(15),s=n.n(i),a=n(645),o=n.n(a)()(s());o.push([t.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: row;\n}\n\n.menuAndTitleDiv {\n  height: 100vh;\n  width: 25%;\n  background-color: silver;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  border: 1px solid black;\n}\n\n.sidebarDiv {\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,wBAAwB;EACxB,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,WAAW;EACX,WAAW;AACb",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: row;\n}\n\n.menuAndTitleDiv {\n  height: 100vh;\n  width: 25%;\n  background-color: silver;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  border: 1px solid black;\n}\n\n.sidebarDiv {\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n"],sourceRoot:""}]);const r=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(s[o]=!0)}for(var r=0;r<t.length;r++){var c=[].concat(t[r]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,a=[],o=!0,r=!1;try{for(n=n.call(t);!(o=(i=n.next()).done)&&(a.push(i.value),!e||a.length!==e);o=!0);}catch(t){r=!0,s=t}finally{try{o||null==n.return||n.return()}finally{if(r)throw s}}return a}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=s[1],o=s[3];if(!o)return a;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),d="/*# ".concat(c," */"),u=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[a].concat(u).concat([d]).join("\n")}return[a].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var a={},o=[],r=0;r<t.length;r++){var c=t[r],d=i.base?c[0]+i.base:c[0],u=a[d]||0,l="".concat(d," ").concat(u);a[d]=u+1;var p=n(l),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:l,updater:s(h,i),references:1}),o.push(l)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var a=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var r=n(a[o]);e[r].references--}for(var c=i(t,s),d=0;d<a.length;d++){var u=n(a[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,a=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var a=e[i]={id:i,exports:{}};return t[i](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),a=n(569),o=n.n(a),r=n(565),c=n.n(r),d=n(216),u=n.n(d),l=n(589),p=n.n(l),h=n(890),m={};m.styleTagTransform=p(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const f=function(){return Math.floor(Math.random()*Date.now()).toString()},k=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:t.disabled,id:f()};e.push(n)}return e},b=function(t,e,n){const i={title:t,description:e,dueDate:n,id:f()};let s=[];return{add(t){s=[...s,t]},remove(t){s=s.filter((e=>e.id!==t))},find:t=>s.find((e=>e.id===t)),get taskArray(){return[...s]},get metaData(){return{get title(){return i.title},get description(){return i.description},get dueDate(){return i.dueDate},get id(){return i.id}}}}},v=function(t,e){const n=document.createElement(t);for(const t in e)t.toString().includes("data")?n.setAttribute(t.toString(),e[t]):n[t]=e[t];return n},A={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},D={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.menuAndTitleDiv=v("div",{className:"menuAndTitleDiv"}),this.title=v("h1",{className:"appTitle",textContent:"T O D O"}),this.menuButton=v("button",{className:"menuButton",textContent:"Menu"}),this.homeSidebar=v("div",{className:"sidebarDiv",textContent:"Home"}),this.taskSidebar=v("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=v("div",{className:"sidebarDiv",textContent:"Projects"}),this.addProjectButton=v("button",{className:"addProjectButton",textContent:"Add Project"}),this.main=v("div",{className:"main"}),this.header=v("div",{className:"header"}),this.headerText=v("div",{className:"headerText",textContent:"Home"}),this.projectForm=function(){const t=v("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=v("form",{id:"projectForm"}),this.inputProjectTitle=v("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=v("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=v("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=v("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){A.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},appendContent:function(){this.projectSidebar.append(this.addProjectButton),this.menuAndTitleDiv.append(this.title,this.menuButton,this.homeSidebar,this.taskSidebar,this.projectSidebar),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main),document.body.append(this.projectForm)},bindEvents:function(){this.addProjectButton.addEventListener("click",this.openProjectForm.bind(D))},openMenu:function(){this.menuAndTitleDiv.append(this.addProjectButton)},openProjectForm:function(){this.projectForm.style.display="block"}};function T(t,e){const n=v("section",{id:`section${t}Form`,className:t}),i={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=v("form",{id:`form${t}`,name:e}),this.inputTaskTitle=v("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=v("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=v("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=v("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=v("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=v("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),n.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(i)),this.form.addEventListener("submit",this.formFunction.bind(i)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(i)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(i))},publishData:function(){A.publish("addTask",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),n.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((t=>t.remove())),this.checklistButtons.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=v("div"),this.inputTaskChecklist=v("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=v("button",{className:`input${t}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(i))},deleteChecklistItem:function(t){t.target.parentNode.remove()}};return i.init(),n}const C=b("All Tasks"),y=function(){let t=[];return{add(e){t=[...t,e]},remove(e){t=t.filter((t=>t.metaData.id!==e))},find:e=>t.find((t=>t.metaData.id===e)),findWithTaskId:e=>t.find((t=>t.find(e))),getTaskWithTaskId(t){return this.findWithTaskId(t).find(t)},get projectArray(){return[...t]}}}();function g(t){const e=function(t,e,n,i,s){const a={title:t,description:e,dueDate:n,priority:i,checklist:k(s),id:f(),done:!1};return{get title(){return a.title},get description(){return a.description},get id(){return a.id},get dueDate(){return a.dueDate},get checklist(){return a.checklist},findChecklistItem:t=>a.checklist.find((e=>e.id===t)),get done(){return a.done},set done(t){a.done=t},task:a}}(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist")),n=t[0].parentNode.name,i=y.find(n);i.add(e),A.publish("addTaskDOM",i)}function E(t){console.log(t);const e=b(t.inputProjectTitle.value,t.inputProjectDesc.value,t.inputProjectDueDate.value);y.add(e),A.publish("addProjectDOM",e.metaData),console.log(y.projectArray)}function x(t){y.findWithTaskId(t).remove(t),console.log(y)}function j(t){A.publish("editThisData",[y.findWithTaskId(t),y.getTaskWithTaskId(t)]),x(t)}function B([t,e]){console.log(e);const n=y.getTaskWithTaskId(e),i=n.findChecklistItem(t);console.log(n),i.checked?i.checked=!1:i.checked=!0}function S(t){const e=y.getTaskWithTaskId(t);e.done?e.done=!1:e.done=!0,A.publish("toggleCompleteTaskDOM",e)}function N(t){console.log(t)}function P(t){I(t)}function I(t){const e=v("section",{"data-id":t.id,className:"projectSection"}),n=v("h2",{className:"projectHeading",textContent:t.title}),i=v("button",{className:"addTaskInPRoject",textContent:`Add Task in ${t.title}`});e.append(n,i),document.querySelector(".main").append(e),i.addEventListener("click",(function(){const t=T("Task",this.parentNode.getAttribute("data-id"));this.parentNode.append(t)}))}function M(t){const e=document.querySelector(`[data-id="${t.metaData.id}"]`);!function(t){const e=t.querySelectorAll(".taskDiv");e&&e.forEach((t=>t.remove()))}(e);const n=t.taskArray;for(const t of n)e.append(w(t))}function w(t){const e=v("div",{className:"taskDiv","data-id":t.id});return t.done?e.style.opacity=.5:e.style.opacity=1,{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=v("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=v("p",{className:"taskDesc",textContent:t.description}),this.taskChecklist=function(t,e){const n=v("div",{className:"checklistDiv"});for(const i of t){const t=v("div",{className:"checkboxDiv","data-id":e.id}),s=v("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),a=v("label",{for:i.id,textContent:i.content});i.checked&&(s.checked=!0,a.style.opacity=.5),t.append(s,a),n.append(t),t.addEventListener("click",L)}return n}(t.checklist,t),this.taskDueDate=v("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskComplete=v("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=v("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=v("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskComplete,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskComplete.addEventListener("click",(t=>A.publish("toggleCompleteTask",t.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>A.publish("requireEditData",t.target.parentNode.getAttribute("data-id"))))},deleteTaskDOM:function(t){A.publish("deleteTask",t.target.parentNode.getAttribute("data-id")),t.target.parentNode.remove()}}.init(),e}function L(t){const e=this.querySelector("input"),n=this.querySelector("label");e.checked?void 0===t.target.type&&(e.checked=!1):void 0===t.target.type&&(e.checked=!0),function(t,e){e.style.opacity=t?.5:1}(e.checked,n),A.publish("toggleChecklist",[e.getAttribute("data-id"),e.parentNode.getAttribute("data-id")])}function O([t,e]){const n=T("Task",t.metaData.id);document.body.append(n);const i=n.firstChild,s=document.getElementById("submitButtonTask");i.elements[0].value=e.title,i.elements[1].value=e.description,i.elements[2].value=e.dueDate,i.elements[3].value=e.priority;for(const t of e.checklist){const e=v("div"),n=v("input",{className:"inputChecklist",type:"text",value:t.content,disabled:t.checked}),o=v("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});e.append(n,o),i.insertBefore(e,s),o.addEventListener("click",a)}function a(t){t.target.parentNode.remove()}}function q(t){const e=document.querySelector(`[data-id="${t.id}"]`);t.done?e.style.opacity=.5:e.style.opacity=1}y.add(C),console.log(y);D.init(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>A.publish("taskSidebarClicked",C.metaData)))}}.init(),A.subscribe("addTask",g),A.subscribe("deleteTask",x),A.subscribe("requireEditData",j),A.subscribe("toggleChecklist",B),A.subscribe("toggleCompleteTask",S),A.subscribe("addProject",E),A.subscribe("addTaskDOM",N),A.subscribe("addTaskDOM",M),A.subscribe("editThisData",O),A.subscribe("toggleCompleteTaskDOM",q),A.subscribe("addProjectDOM",N),A.subscribe("addProjectDOM",I),A.subscribe("taskSidebarClicked",P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,