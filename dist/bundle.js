(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),r=n(645),o=n.n(r)()(s());o.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(s[o]=!0)}for(var a=0;a<t.length;a++){var u=[].concat(t[a]);i&&s[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,r=[],o=!0,a=!1;try{for(n=n.call(t);!(o=(i=n.next()).done)&&(r.push(i.value),!e||r.length!==e);o=!0);}catch(t){a=!0,s=t}finally{try{o||null==n.return||n.return()}finally{if(a)throw s}}return r}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=s[1],o=s[3];if(!o)return r;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(u," */"),d=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[r].concat(d).concat([c]).join("\n")}return[r].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var r={},o=[],a=0;a<t.length;a++){var u=t[a],c=i.base?u[0]+i.base:u[0],d=r[c]||0,l="".concat(c," ").concat(d);r[c]=d+1;var p=n(l),h={css:u[1],media:u[2],sourceMap:u[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:l,updater:s(h,i),references:1}),o.push(l)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var r=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var a=n(r[o]);e[a].references--}for(var u=i(t,s),c=0;c<r.length;c++){var d=n(r[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}r=u}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,r=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={id:i,exports:{}};return t[i](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),r=n(569),o=n.n(r),a=n(565),u=n.n(a),c=n(216),d=n.n(c),l=n(589),p=n.n(l),h=n(890),f={};f.styleTagTransform=p(),f.setAttributes=u(),f.insert=o().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=d(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:!1};e.push(n)}return e},k=function(t,e,n,i,s){const r={title:t,description:e,dueDate:n,priority:i,checklist:m(s),id:Date.now().toString(),done:!1};return{get title(){return r.title},set title(t){r.title=t},get description(){return r.description},get id(){return r.id},get dueDate(){return n},task:r}},b=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},v={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},T={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=b("h1",{className:"appTitle",textContent:"T O D O"}),this.task=b("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=b("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=y("Task"),this.project=b("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=b("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=b("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=b("form",{id:"projectForm"}),this.inputProjectTitle=b("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=b("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=b("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=b("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){v.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(T)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(T))},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"}};function y(t){const e=b("section",{id:`section${t}Form`,className:t,style:"display: none"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=b("form",{id:`form${t}`}),this.inputTaskTitle=b("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=b("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=b("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=b("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=b("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=b("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),e.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(n)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(n))},publishData:function(){return"Task"===t?v.publish("addTask",this.form.elements):"UpdateTask"===t?v.publish("updateTask",this.form.elements):v.publish("addTaskInProject",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),e.style.display="none"},deleteChecklistInputs:function(){this.checkListInputs=document.querySelectorAll(".inputChecklist"),this.checkListInputs.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=b("div"),this.inputTaskChecklist=b("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=b("button",{id:`input${t}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(n))},deleteChecklistItem:function(t){t.target.parentNode.remove()}};return n.init(),e}const D=function(t,e,n){let i=[];const s={title:"AllTasks",description:void 0,dueDate:void 0};return{add(t){i=[...i,t]},remove(t){i=i.filter((e=>e.id!==t))},find:t=>i.find((e=>e.id===t)),get taskArray(){return[...i]},get projectData(){return s}}}();function C(t){const e=k(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));D.add(e),v.publish("addTaskDOM",D.taskArray)}function j(t){D.remove(t)}function E(t){v.publish("updateThisTask",D.find(t)),D.remove(t)}function P(t){console.log(t)}function g(){}function x(t){!function(){const t=document.querySelectorAll(".taskDiv");t&&t.forEach((t=>t.remove()))}();const e=document.querySelector(".projectTitle");for(const n of t)document.body.insertBefore(A(n),e)}function A(t){const e=b("div",{className:"taskDiv"});return{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=b("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=b("p",{className:"taskDesc",textContent:t.description}),this.taskDueDate=b("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskDelete=b("button",{className:"deleteTask",textContent:"Delete Task",id:t.id}),this.taskUpdate=b("button",{className:"updateTask",textContent:"Update Task",id:t.id})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskDueDate,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>v.publish("requireTask",t.target.id)))},deleteTaskDOM:function(t){v.publish("deleteTask",t.target.id),t.target.parentNode.remove()}}.init(),e}function N(t){const e=document.querySelector("section");e.style.display="block";const n=e.firstChild;n.elements[0].value=t.title,n.elements[1].value=t.description,n.elements[2].value=t.dueDate,n.elements[3].value=t.priority}function B(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Project`)));for(const e of t){const t=b("h3",{id:`${e.filteredTitle}Project`,className:"projectName",textContent:`${e.title}`}),n=b("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=y(`TaskIn${e.filteredTitle}`);n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i)}}const S=[];v.subscribe("addProject",(function(t){const e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,s=t.inputProjectDueDate.value,Object.assign({},function(t){return{title:t}}(n),FilteredTitle(n),function(t){return{description:t}}(i),function(t){return{dueDate:t}}(s),{tasks:[]}));var n,i,s;S.push(e),v.publish("addProjectDOM",S)})),v.subscribe("addTaskInProject",(function(t){const e=k(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));for(const n of S)if(t[0].parentNode.id.includes(n.filteredTitle)){n.tasks.push(e);break}v.publish("addTaskInProjectDOM",S),console.dir(S)})),T.init(),v.subscribe("addTask",C),v.subscribe("deleteTask",j),v.subscribe("requireTask",E),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=!1;for(const n of D.taskArray)t.target.value===n.title&&(e=!0,t.target.setCustomValidity("Task with same name already exists"));e?e=!1:t.target.setCustomValidity("")})),v.subscribe("addTaskDOM",P),v.subscribe("addTaskDOM",x),v.subscribe("updateThisTask",N),v.subscribe("addProjectDOM",P),v.subscribe("addProjectDOM",B),v.subscribe("addTaskInProjectDOM",g),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of S)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TTlHLEtBQVFvRSxFQUFTTyxVQUNwQjNILEVBQUVSLE9BQU81RCxRQUFVb0gsRUFBS0wsUUFDeEJtSCxHQUFZLEVBQ1o5SixFQUFFUixPQUFPdUssa0JBQWtCLHVDQUcvQkQsRUFDQUEsR0FBWSxFQUVaOUosRUFBRVIsT0FBT3VLLGtCQUFrQixPQ3BDbkN6RyxFQUFPTSxVQUFVLGFBQWNvRSxHQUMvQjFFLEVBQU9NLFVBQVUsYUFBY3VFLEdBQy9CN0UsRUFBT00sVUFBVSxpQkFBa0JtRixHQUduQ3pGLEVBQU9NLFVBQVUsZ0JBQWlCb0UsR0FDbEMxRSxFQUFPTSxVQUFVLGdCQUFpQm9GLEdBQ2xDMUYsRUFBT00sVUFBVSxzQkFBdUJzRSxHQ2V4Q3hJLFNBQVNDLGNBQWMsc0JBQXNCNEYsaUJBQWlCLFNBQVV2RixJQUNwRSxJQUFJOUIsRUFBUSxFQUNaLElBQUssTUFBTXNHLEtBQVd5RSxFQUNkakosRUFBRVIsT0FBTzVELFFBQVU0SSxFQUFRN0IsUUFDM0J6RSxJQUNBOEIsRUFBRVIsT0FBT3VLLGtCQUFrQiwwQ0FHckIsSUFBVjdMLEVBQ0E4QixFQUFFUixPQUFPdUssa0JBQWtCLElBRTNCN0wsRUFBUSxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL3N0eWxlLmNzcz9mZjk0Iiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0ZhY3RvcnlGdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvUHVic3ViLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0luaXREaXNwbGF5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvTWFpbkRpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvUHJvamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgYm9yZGVyOiAxcHggc29saWQgcHVycGxlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHdCQUF3QjtBQUMxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHB1cnBsZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCBET01GYWN0b3J5ID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlcykgeyAgLy9mb3Igc2ltcGxlIGVsZW1lbnRzXG4gICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBuZXdFbGVtZW50W2F0dHJpYnV0ZV0gPSBhdHRyaWJ1dGVzW2F0dHJpYnV0ZV07XG4gICAgfVxuICAgIHJldHVybiBuZXdFbGVtZW50XG59XG5cbmNvbnN0IFRpdGxlID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgICByZXR1cm4ge3RpdGxlfVxufVxuXG5jb25zdCBmaWx0ZXJlZFRpdGxlID0gZnVuY3Rpb24odGl0bGUpIHtcbiAgICBjb25zdCBmaWx0ZXJlZFRpdGxlID0gdGl0bGUucmVwbGFjZSgvWy4sXFwvIyEkJVxcXiZcXCo7Ont9PVxcLV9gfigpXS9nLFwiXCIpLnJlcGxhY2UoL1xcc3syLH0vZyxcIiBcIikucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgcmV0dXJuIGZpbHRlcmVkVGl0bGVcbn1cblxuY29uc3QgRGVzY3JpcHRpb24gPSBmdW5jdGlvbihkZXNjcmlwdGlvbikge1xuICAgIHJldHVybiB7ZGVzY3JpcHRpb259XG59XG5cbmNvbnN0IER1ZURhdGUgPSBmdW5jdGlvbihkdWVEYXRlKSB7XG4gICAgcmV0dXJuIHtkdWVEYXRlfVxufVxuXG5jb25zdCBQcmlvcml0eSA9IGZ1bmN0aW9uKHByaW9yaXR5KSB7XG4gICAgcmV0dXJuIHtwcmlvcml0eX1cbn1cblxuY29uc3QgUmVjdXJyaW5nID0gZnVuY3Rpb24ocmVjdXJyaW5nKSB7XG4gICAgaWYgKHJlY3VycmluZyA9PT0gJycpIHJldHVybiB7cmVjdXJyaW5nOiAnbm8nfTtcbiAgICByZXR1cm4ge3JlY3VycmluZ31cbn1cblxuY29uc3QgY2hlY2tsaXN0ID0gZnVuY3Rpb24oaXRlbXMpIHtcbiAgICBjb25zdCBjaGVja2xpc3QgPSBbXTtcbiAgICBjb25zdCBpdGVtc0FycmF5ID0gQXJyYXkuZnJvbShpdGVtcyk7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zQXJyYXkpIHtcbiAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT09IFwiXCIpIGNvbnRpbnVlXG4gICAgICAgIGNvbnN0IGNoZWNrbGlzdE9iaiA9IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0udmFsdWUsXG4gICAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgfVxuICAgICAgICBjaGVja2xpc3QucHVzaChjaGVja2xpc3RPYmopO1xuICAgIH1cbiAgICByZXR1cm4gY2hlY2tsaXN0XG59XG5cbmNvbnN0IFRhc2tzSW5Qcm9qZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHt0YXNrczogW119XG59XG5cbmNvbnN0IFRhc2tJdGVtID0gZnVuY3Rpb24odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgY2hlY2tsaXN0SXRlbXMpIHtcbiAgICAvLyBjb25zdCB0YXNrID0gIE9iamVjdC5hc3NpZ24oe30sIFRpdGxlKHRpdGxlKSwgRmlsdGVyZWRUaXRsZSh0aXRsZSksIERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSxcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgRHVlRGF0ZShkdWVEYXRlKSwgUHJpb3JpdHkocHJpb3JpdHkpLCBDaGVja2xpc3QoY2hlY2tMaXN0SXRlbXMpLCB7aWQ6IE51bWJlcihEYXRlLm5vdygpKX0pO1xuICAgIGNvbnN0IHRhc2sgPSB7XG4gICAgICAgIHRpdGxlLFxuICAgICAgICAvL2ZpbHRlcmVkVGl0bGU6IGZpbHRlcmVkVGl0bGUodGl0bGUpLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgcHJpb3JpdHksXG4gICAgICAgIGNoZWNrbGlzdDogY2hlY2tsaXN0KGNoZWNrbGlzdEl0ZW1zKSxcbiAgICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGdldCB0aXRsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXNrLnRpdGxlXG4gICAgICAgIH0sXG4gICAgICAgIHNldCB0aXRsZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGFzay50aXRsZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5kZXNjcmlwdGlvblxuICAgICAgICB9LFxuICAgICAgICBnZXQgaWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay5pZFxuICAgICAgICB9LFxuICAgICAgICBnZXQgZHVlRGF0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBkdWVEYXRlXG4gICAgICAgIH0sXG4gICAgICAgIHRhc2tcbiAgICB9XG59XG5cbmNvbnN0IFByb2plY3RJdGVtID0gZnVuY3Rpb24odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIFRpdGxlKHRpdGxlKSwgRmlsdGVyZWRUaXRsZSh0aXRsZSksIERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSwgRHVlRGF0ZShkdWVEYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGFza3NJblByb2plY3QoKSlcbn1cblxuY29uc3QgVGFza01hbmFnZXIgPSBmdW5jdGlvbih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUpIHtcbiAgICBsZXQgdGFza3MgPSBbXTtcbiAgICBjb25zdCBwcm9qZWN0ID0ge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIGR1ZURhdGVcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkKHRhc2spIHtcbiAgICAgICAgICAgIHRhc2tzID0gWy4uLnRhc2tzLCB0YXNrXTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlKGlkKSB7XG4gICAgICAgICAgICB0YXNrcyA9IHRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suaWQgIT09IGlkKTsgICAgICAgIFxuICAgICAgICB9LFxuICAgICAgICBmaW5kKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFza3MuZmluZCh0YXNrID0+IHRhc2suaWQgPT09IGlkKVxuICAgICAgICB9LFxuICAgICAgICBnZXQgdGFza0FycmF5KCkge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi50YXNrc11cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHByb2plY3REYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb2plY3RcbiAgICAgICAgfSxcbiAgICB9XG59XG5cblxuXG5cbmV4cG9ydCB7VGFza0l0ZW19O1xuZXhwb3J0IHtUYXNrTWFuYWdlcn1cbmV4cG9ydCB7UHJvamVjdEl0ZW19O1xuZXhwb3J0IGRlZmF1bHQgRE9NRmFjdG9yeTsiLCJjb25zdCBwdWJzdWIgPSB7XG4gICAgZXZlbnRzOiB7fSxcbiAgICBwdWJsaXNoOiBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayhkYXRhKSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24oZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5ldmVudHNbZXZlbnROYW1lXSkpe1xuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XG4gICAgfSxcbn1cblxuZXhwb3J0IHtwdWJzdWJ9OyIsImltcG9ydCBET01GYWN0b3J5IGZyb20gXCIuL0ZhY3RvcnlGdW5jdGlvbnMuanNcIjtcbmltcG9ydCB7IHB1YnN1YiB9IGZyb20gXCIuL1B1YnN1Yi5qc1wiO1xuXG5jb25zdCBpbml0RGlzcGxheU9iamVjdCA9IHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50cygpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDb250ZW50KCk7XG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRpdGxlID0gRE9NRmFjdG9yeSgnaDEnLCB7Y2xhc3NOYW1lOiBcImFwcFRpdGxlXCIsIHRleHRDb250ZW50OlwiVCBPIEQgT1wifSk7XG4gICAgICAgIHRoaXMudGFzayA9IERPTUZhY3RvcnkoJ2gyJywge2NsYXNzTmFtZTogXCJ0YXNrVGl0bGVcIiwgdGV4dENvbnRlbnQ6IFwiVGFza1wifSk7XG4gICAgICAgIHRoaXMuYWRkVGFza0J1dHRvbiA9IERPTUZhY3RvcnkoJ2J1dHRvbicsIHtjbGFzc05hbWU6IFwiYWRkVGFza0J1dHRvblwiLCB0ZXh0Q29udGVudDogXCJBZGQgVGFza1wifSk7XG4gICAgICAgIHRoaXMudGFza0Zvcm0gPSBjcmVhdGVUYXNrRm9ybShcIlRhc2tcIik7ICAgLy90aGlzLnRhc2tGb3JtIGlzIGEgPHNlY3Rpb24+ICg8Zm9ybT4gaXMgdGhlIGZpcnN0IGNoaWxkKVxuICAgICAgICB0aGlzLnByb2plY3QgPSBET01GYWN0b3J5KCdoMicsIHtjbGFzc05hbWU6IFwicHJvamVjdFRpdGxlXCIsIHRleHRDb250ZW50OiBcIlByb2plY3RcIn0pO1xuICAgICAgICB0aGlzLmFkZFByb2plY3RCdXR0b24gPSBET01GYWN0b3J5KCdidXR0b24nLCB7Y2xhc3NOYW1lOiBcImFkZFByb2plY3RCdXR0b25cIiwgdGV4dENvbnRlbnQ6IFwiQWRkIFByb2plY3RcIn0pO1xuICAgICAgICB0aGlzLnByb2plY3RGb3JtID0gY3JlYXRlUHJvamVjdEZvcm0oKTsgLy90aGlzLnByb2plY3RGcm9tIGlzIGEgPHNlY3Rpb24+ICg8Zm9ybT4gaXMgdGhlIGZpcnN0IGNoaWxkKVxuICAgIH0sXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24oKSB7XG4gICAgfSxcbiAgICBhcHBlbmRDb250ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy50aXRsZSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMudGFzayk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuYWRkVGFza0J1dHRvbik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMudGFza0Zvcm0pO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLnByb2plY3QsIHRoaXMuYWRkUHJvamVjdEJ1dHRvbik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMucHJvamVjdEZvcm0pO1xuICAgIH0sXG4gICAgYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYWRkVGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlblRhc2tGb3JtLmJpbmQoaW5pdERpc3BsYXlPYmplY3QpKTtcbiAgICAgICAgdGhpcy5hZGRQcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuUHJvamVjdEZvcm0uYmluZChpbml0RGlzcGxheU9iamVjdCkpO1xuICAgIH0sXG4gICAgb3BlblRhc2tGb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50YXNrRm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH0sXG4gICAgb3BlblByb2plY3RGb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5wcm9qZWN0Rm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIH0sXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUYXNrRm9ybSh2ZXJzaW9uKSB7XG4gICAgY29uc3QgZm9ybVNlY3Rpb24gPSBET01GYWN0b3J5KCdzZWN0aW9uJywge2lkOiBgc2VjdGlvbiR7dmVyc2lvbn1Gb3JtYCwgY2xhc3NOYW1lOiB2ZXJzaW9uLCBzdHlsZTogXCJkaXNwbGF5OiBub25lXCJ9KTtcbiAgICBjb25zdCBmb3JtT2JqZWN0ID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0gPSBET01GYWN0b3J5KCdmb3JtJywge2lkOiBgZm9ybSR7dmVyc2lvbn1gfSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza1RpdGxlID0gRE9NRmFjdG9yeSgnaW5wdXQnLCB7aWQ6IGBpbnB1dCR7dmVyc2lvbn1UaXRsZWAsIG5hbWU6IGBpbnB1dFRhc2tOYW1lYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIiwgbWF4TGVuZ3RoOiBcIjUwXCIsIHBsYWNlaG9sZGVyOiBcInRhc2sgdGl0bGUuLi5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogXCJ0cnVlXCJ9KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUYXNrRGVzYyA9IERPTUZhY3RvcnkoJ3RleHRhcmVhJywge2lkOiBgaW5wdXQke3ZlcnNpb259RGVzY2AsIG5hbWU6IGBpbnB1dFRhc2tEZXNjYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRlc2Mvbm90ZXMuLi5cIiwgfSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza0R1ZURhdGUgPSBET01GYWN0b3J5KCdpbnB1dCcsIHtpZDogYGlucHV0JHt2ZXJzaW9ufUR1ZURhdGVgLCBuYW1lOiBgaW5wdXRUYXNrRHVlRGF0ZWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIix9KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUYXNrUHJpb3JpdHkgPSBET01GYWN0b3J5KCdpbnB1dCcsIHtpZDogYGlucHV0JHt2ZXJzaW9ufVByaW9yaXR5YCwgbmFtZTogYGlucHV0VGFza1ByaW9yaXR5YCwgdHlwZTogXCJ0ZXh0XCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhpZ2gvbWVkaXVtL2xvd1wifSk7XG4gICAgICAgICAgICB0aGlzLmFkZFRhc2tDaGVja2xpc3RCdXR0b24gPSBET01GYWN0b3J5KCdidXR0b24nLCB7aWQ6IGBhZGQke3ZlcnNpb259Q2hlY2tsaXN0QnV0dG9uYCwgdHlwZTogXCJidXR0b25cIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IFwiQWRkIENoZWNrbGlzdFwifSk7XG4gICAgICAgICAgICB0aGlzLnN1Ym1pdEJ1dHRvbiA9IERPTUZhY3RvcnkoJ2J1dHRvbicsIHtpZDogXCJzdWJtaXRCdXR0b25cIiwgdHlwZTogXCJzdWJtaXRcIiwgdGV4dENvbnRlbnQ6IFwiU3VibWl0XCJ9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwZW5kRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtLmFwcGVuZCh0aGlzLmlucHV0VGFza1RpdGxlLCB0aGlzLmlucHV0VGFza0Rlc2MsIHRoaXMuaW5wdXRUYXNrRHVlRGF0ZSwgdGhpcy5pbnB1dFRhc2tQcmlvcml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXNrQ2hlY2tsaXN0QnV0dG9uLCB0aGlzLnN1Ym1pdEJ1dHRvbik7XG4gICAgICAgICAgICBmb3JtU2VjdGlvbi5hcHBlbmQodGhpcy5mb3JtKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5wdWJsaXNoRGF0YS5iaW5kKGZvcm1PYmplY3QpKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLmZvcm1GdW5jdGlvbi5iaW5kKGZvcm1PYmplY3QpKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLmRlbGV0ZUNoZWNrbGlzdElucHV0cy5iaW5kKGZvcm1PYmplY3QpKTtcbiAgICAgICAgICAgIHRoaXMuYWRkVGFza0NoZWNrbGlzdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY3JlYXRlQ2hlY2tsaXN0LmJpbmQoZm9ybU9iamVjdCkpO1xuICAgICAgICB9LFxuICAgICAgICBwdWJsaXNoRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gXCJUYXNrXCIpIHJldHVybiBwdWJzdWIucHVibGlzaCgnYWRkVGFzaycsIHRoaXMuZm9ybS5lbGVtZW50cyk7XG4gICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gXCJVcGRhdGVUYXNrXCIpIHJldHVybiBwdWJzdWIucHVibGlzaCgndXBkYXRlVGFzaycsIHRoaXMuZm9ybS5lbGVtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gcHVic3ViLnB1Ymxpc2goJ2FkZFRhc2tJblByb2plY3QnLCB0aGlzLmZvcm0uZWxlbWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtRnVuY3Rpb246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBmb3JtU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZUNoZWNrbGlzdElucHV0czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTGlzdElucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dENoZWNrbGlzdCcpO1xuICAgICAgICAgICAgdGhpcy5jaGVja0xpc3RJbnB1dHMuZm9yRWFjaChjaGVja2xpc3QgPT4gY2hlY2tsaXN0LnJlbW92ZSgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlQ2hlY2tsaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUYXNrQ2hlY2tsaXN0RGl2ID0gRE9NRmFjdG9yeSgnZGl2Jyk7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza0NoZWNrbGlzdCA9IERPTUZhY3RvcnkoJ2lucHV0Jywge2lkOiBgaW5wdXQke3ZlcnNpb259Q2hlY2tsaXN0YCwgbmFtZTogYGlucHV0JHt2ZXJzaW9ufUNoZWNrbGlzdGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogYGlucHV0Q2hlY2tsaXN0YCwgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImVudGVyIGNoZWNrbGlzdCBpdGVtIGhlcmUuLi5cIn0pO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRhc2tDaGVja2xpc3REZWxldGUgPSBET01GYWN0b3J5KCdidXR0b24nLCB7aWQ6IGBpbnB1dCR7dmVyc2lvbn1DaGVja2xpc3REZWxldGVgLCB0ZXh0Q29udGVudDogJ0RlbCBJdGVtJ30pO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRhc2tDaGVja2xpc3REaXYuYXBwZW5kKHRoaXMuaW5wdXRUYXNrQ2hlY2tsaXN0LCB0aGlzLmlucHV0VGFza0NoZWNrbGlzdERlbGV0ZSk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uaW5zZXJ0QmVmb3JlKHRoaXMuaW5wdXRUYXNrQ2hlY2tsaXN0RGl2LCB0aGlzLnN1Ym1pdEJ1dHRvbik7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza0NoZWNrbGlzdERlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZGVsZXRlQ2hlY2tsaXN0SXRlbS5iaW5kKGZvcm1PYmplY3QpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlQ2hlY2tsaXN0SXRlbTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgZm9ybU9iamVjdC5pbml0KCk7XG4gICAgcmV0dXJuIGZvcm1TZWN0aW9uXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RGb3JtKCkge1xuICAgIGNvbnN0IGZvcm1TZWN0aW9uID0gRE9NRmFjdG9yeSgnc2VjdGlvbicsIHtjbGFzc05hbWU6IFwicHJvamVjdEZvcm1TZWN0aW9uXCIsIHN0eWxlOiBcImRpc3BsYXk6IG5vbmVcIn0pO1xuICAgIGNvbnN0IGZvcm1PYmplY3QgPSB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50cygpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRFbGVtZW50cygpO1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybSA9IERPTUZhY3RvcnkoJ2Zvcm0nLCB7aWQ6IFwicHJvamVjdEZvcm1cIn0pO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFByb2plY3RUaXRsZSA9IERPTUZhY3RvcnkoJ2lucHV0Jywge2lkOiBcImlucHV0UHJvamVjdFRpdGxlXCIsIG5hbWU6IFwiaW5wdXRQcm9qZWN0VGl0bGVcIiwgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwicHJvamVjdCB0aXRsZS4uLlwiLCByZXF1aXJlZDogXCJ0cnVlXCJ9KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRQcm9qZWN0RGVzYyA9IERPTUZhY3RvcnkoJ3RleHRhcmVhJywge2lkOiBcImlucHV0UHJvamVjdERlc2NcIiwgbmFtZTogXCJpbnB1dFByb2plY3REZXNjXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZXNjL25vdGVzLi4uXCJ9KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRQcm9qZWN0RHVlRGF0ZSA9IERPTUZhY3RvcnkoJ2lucHV0Jywge2lkOiBcImlucHV0UHJvamVjdER1ZURhdGVcIiwgbmFtZTogXCJpbnB1dFByb2plY3REdWVEYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIn0pO1xuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24gPSBET01GYWN0b3J5KCdidXR0b24nLCB7aWQ6IFwic3VibWl0QnV0dG9uXCIsIHR5cGU6IFwic3VibWl0XCIsIHRleHRDb250ZW50OiBcIlN1Ym1pdFwifSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGVuZEVsZW1lbnRzOiBmdW5jdGlvbigpIHsgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5mb3JtLmFwcGVuZCh0aGlzLmlucHV0UHJvamVjdFRpdGxlLCB0aGlzLmlucHV0UHJvamVjdERlc2MsIHRoaXMuaW5wdXRQcm9qZWN0RHVlRGF0ZSwgdGhpcy5zdWJtaXRCdXR0b24pO1xuICAgICAgICAgICAgZm9ybVNlY3Rpb24uYXBwZW5kKHRoaXMuZm9ybSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMucHVibGlzaERhdGEuYmluZChmb3JtT2JqZWN0KSk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5mb3JtRnVuY3Rpb24uYmluZChmb3JtT2JqZWN0KSlcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGlzaERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcHVic3ViLnB1Ymxpc2goJ2FkZFByb2plY3QnLCB0aGlzLmZvcm0uZWxlbWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtRnVuY3Rpb246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBmb3JtU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7ICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9ybU9iamVjdC5pbml0KCk7XG4gICAgcmV0dXJuIGZvcm1TZWN0aW9uO1xufVxuXG5cblxuY29uc3QgcGFnZUxvYWRDb250ZW50ID0gKCkgPT4gaW5pdERpc3BsYXlPYmplY3QuaW5pdCgpO1xuXG5leHBvcnQgZGVmYXVsdCBwYWdlTG9hZENvbnRlbnQ7XG5leHBvcnQge2NyZWF0ZVRhc2tGb3JtfTsiLCJpbXBvcnQge1Rhc2tJdGVtLCBUYXNrTWFuYWdlcn0gZnJvbSAnLi9GYWN0b3J5RnVuY3Rpb25zLmpzJ1xuaW1wb3J0IHsgcHVic3ViIH0gZnJvbSAnLi9QdWJzdWIuanMnO1xuXG5jb25zdCB0YXNrTW9kdWxlID0ge1xuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRUYXNrJywgY3JlYXRlVGFzayk7XG4gICAgICAgIHB1YnN1Yi5zdWJzY3JpYmUoJ2RlbGV0ZVRhc2snLCBkZWxldGVUYXNrKTtcbiAgICAgICAgcHVic3ViLnN1YnNjcmliZSgncmVxdWlyZVRhc2snLCBzZW5kUmVxdWlyZWRUYXNrKTtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVUYXNrKCk7XG4gICAgfVxufVxuXG5jb25zdCBhbGxUYXNrcyA9IFRhc2tNYW5hZ2VyKCdBbGxUYXNrcycpO1xuXG5mdW5jdGlvbiBjcmVhdGVUYXNrKGZvcm0pIHtcbiAgICBjb25zdCB0YXNrID0gVGFza0l0ZW0oZm9ybVtcImlucHV0VGFza05hbWVcIl0udmFsdWUsIGZvcm1bXCJpbnB1dFRhc2tEZXNjXCJdLnZhbHVlLCBmb3JtW1wiaW5wdXRUYXNrRHVlRGF0ZVwiXS52YWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1bXCJpbnB1dFRhc2tQcmlvcml0eVwiXS52YWx1ZSwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0Q2hlY2tsaXN0JykpXG4gICAgYWxsVGFza3MuYWRkKHRhc2spO1xuICAgIHB1YnN1Yi5wdWJsaXNoKCdhZGRUYXNrRE9NJywgYWxsVGFza3MudGFza0FycmF5KTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlVGFzayhkZWxldGVkVGFzaykge1xuICAgIGFsbFRhc2tzLnJlbW92ZShkZWxldGVkVGFzayk7XG59XG5cbmZ1bmN0aW9uIHNlbmRSZXF1aXJlZFRhc2socmVxdWlyZWRUYXNrKSB7XG4gICAgcHVic3ViLnB1Ymxpc2goJ3VwZGF0ZVRoaXNUYXNrJywgYWxsVGFza3MuZmluZChyZXF1aXJlZFRhc2spKTtcbiAgICBhbGxUYXNrcy5yZW1vdmUocmVxdWlyZWRUYXNrKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVUYXNrKCkge1xuICAgIGNvbnN0IGlucHV0VGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXRUYXNrVGl0bGUnKTtcbiAgICBpbnB1dFRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgbGV0IGR1cGxpY2F0ZSA9IGZhbHNlOyAgLy90byByZW1vdmUgY3VzdG9tIHZhbGlkYXRpb24gbWVzc2FnZSB3aGVuIG5vdCByZXF1aXJlZFxuICAgICAgICBmb3IgKGNvbnN0IHRhc2sgb2YgYWxsVGFza3MudGFza0FycmF5KSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUgPT09IHRhc2sudGl0bGUpIHtcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiVGFzayB3aXRoIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgICBkdXBsaWNhdGUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpOyAgXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQge3Rhc2tNb2R1bGV9OyIsImltcG9ydCBET01GYWN0b3J5IGZyb20gXCIuL0ZhY3RvcnlGdW5jdGlvbnMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVRhc2tGb3JtIH0gZnJvbSBcIi4vSW5pdERpc3BsYXkuanNcIjtcbmltcG9ydCB7IHB1YnN1YiB9IGZyb20gXCIuL1B1YnN1Yi5qc1wiO1xuaW1wb3J0IHsgdXBkYXRlVGFzayB9IGZyb20gXCIuL1Rhc2suanNcIjtcblxuXG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICAgIHB1YnN1Yi5zdWJzY3JpYmUoJ2FkZFRhc2tET00nLCBsb2cpO1xuICAgIHB1YnN1Yi5zdWJzY3JpYmUoJ2FkZFRhc2tET00nLCBkaXNwbGF5VGFza3MpO1xuICAgIHB1YnN1Yi5zdWJzY3JpYmUoJ3VwZGF0ZVRoaXNUYXNrJywgdXBkYXRlVGFza0Zvcm1WaWV3KTtcbiAgICAvL3B1YnN1Yi5zdWJzY3JpYmUoJ3VwZGF0ZVRoaXNUYXNrJywgdXBkYXRlVGFza0Zvcm1TdWJtaXQpO1xuICAgIC8vcHVic3ViLnN1YnNjcmliZSgndXBkYXRlVGFza0RPTScsIGRpc3BsYXlUYXNrcyk7XG4gICAgcHVic3ViLnN1YnNjcmliZSgnYWRkUHJvamVjdERPTScsIGxvZyk7XG4gICAgcHVic3ViLnN1YnNjcmliZSgnYWRkUHJvamVjdERPTScsIGRpc3BsYXlQcm9qZWN0cyk7XG4gICAgcHVic3ViLnN1YnNjcmliZSgnYWRkVGFza0luUHJvamVjdERPTScsIGRpc3BsYXlUYXNrSW5Qcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gbG9nKGRhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcbn1cblxuZnVuY3Rpb24gZGlzcGxheVRhc2tJblByb2plY3QoKSB7ICAgICAgIC8vIElOQ09NUExFVEVcblxufVxuXG5mdW5jdGlvbiBkaXNwbGF5VGFza3ModGFza3MpIHtcbiAgICBkZWxldGVBbGxUYXNrcygpO1xuICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0VGl0bGUnKTsgICAvL3RvIGFwcGVuZCBhdCByaWdodCBsb2NhdGlvblxuICAgIGZvciAoY29uc3QgdGFzayBvZiB0YXNrcykge1xuICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShjcmVhdGVUYXNrQ2FyZCh0YXNrKSwgcHJvamVjdFRpdGxlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVsZXRlQWxsVGFza3MoKSB7XG4gICAgY29uc3QgdGFza0Rpdk5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2tEaXYnKTtcbiAgICBpZiAodGFza0Rpdk5vZGVMaXN0KSB7XG4gICAgICAgIHRhc2tEaXZOb2RlTGlzdC5mb3JFYWNoKHRhc2tEaXYgPT4gdGFza0Rpdi5yZW1vdmUoKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrQ2FyZCh0YXNrKSB7XG4gICAgY29uc3QgdGFza0RpdiA9IERPTUZhY3RvcnkoJ2RpdicsIHtjbGFzc05hbWU6ICd0YXNrRGl2J30pO1xuICAgIGNvbnN0IHRhc2tDYXJkT2JqID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tUaXRsZSA9IERPTUZhY3RvcnkoJ2g0Jywge2NsYXNzTmFtZTogJ3Rhc2tUaXRsZScsIHRleHRDb250ZW50OiB0YXNrLnRpdGxlfSk7XG4gICAgICAgICAgICB0aGlzLnRhc2tEZXNjID0gRE9NRmFjdG9yeSgncCcsIHtjbGFzc05hbWU6ICd0YXNrRGVzYycsIHRleHRDb250ZW50OiB0YXNrLmRlc2NyaXB0aW9ufSk7XG4gICAgICAgICAgICB0aGlzLnRhc2tEdWVEYXRlID0gRE9NRmFjdG9yeSgncCcsIHtjbGFzc05hbWU6ICd0YXNrRHVlRGF0ZScsIHRleHRDb250ZW50OiB0YXNrLmR1ZURhdGV9KTtcbiAgICAgICAgICAgIHRoaXMudGFza0RlbGV0ZSA9IERPTUZhY3RvcnkoJ2J1dHRvbicsIHtjbGFzc05hbWU6ICdkZWxldGVUYXNrJywgdGV4dENvbnRlbnQ6IFwiRGVsZXRlIFRhc2tcIiwgaWQ6IHRhc2suaWR9KTtcbiAgICAgICAgICAgIHRoaXMudGFza1VwZGF0ZSA9IERPTUZhY3RvcnkoJ2J1dHRvbicsIHtjbGFzc05hbWU6ICd1cGRhdGVUYXNrJywgdGV4dENvbnRlbnQ6IFwiVXBkYXRlIFRhc2tcIiwgaWQ6IHRhc2suaWR9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwZW5kRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGFza0Rpdi5hcHBlbmQodGhpcy50YXNrVGl0bGUsIHRoaXMudGFza0Rlc2MsIHRoaXMudGFza0R1ZURhdGUsIHRoaXMudGFza0RlbGV0ZSwgdGhpcy50YXNrVXBkYXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tEZWxldGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRlbGV0ZVRhc2tET00pO1xuICAgICAgICAgICAgdGhpcy50YXNrVXBkYXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSkgPT4gcHVic3ViLnB1Ymxpc2goJ3JlcXVpcmVUYXNrJywgZS50YXJnZXQuaWQpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlVGFza0RPTTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgcHVic3ViLnB1Ymxpc2goJ2RlbGV0ZVRhc2snLCBlLnRhcmdldC5pZCk7XG4gICAgICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xuICAgICAgICB9LFxuICAgIH1cbiAgICB0YXNrQ2FyZE9iai5pbml0KCk7XG4gICAgcmV0dXJuIHRhc2tEaXZcbn1cblxuZnVuY3Rpb24gdXBkYXRlVGFza0Zvcm1WaWV3KHRhc2spIHtcbiAgICBjb25zdCBmb3JtU2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlY3Rpb24nKTtcbiAgICBmb3JtU2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIGNvbnN0IGZvcm0gPSBmb3JtU2VjdGlvbi5maXJzdENoaWxkO1xuICAgIGZvcm0uZWxlbWVudHNbMF0udmFsdWUgPSB0YXNrLnRpdGxlO1xuICAgIGZvcm0uZWxlbWVudHNbMV0udmFsdWUgPSB0YXNrLmRlc2NyaXB0aW9uO1xuICAgIGZvcm0uZWxlbWVudHNbMl0udmFsdWUgPSB0YXNrLmR1ZURhdGU7XG4gICAgZm9ybS5lbGVtZW50c1szXS52YWx1ZSA9IHRhc2sucHJpb3JpdHk7XG59XG5cbi8vIGZ1bmN0aW9uIHVwZGF0ZVRhc2tGb3JtU3VibWl0KHRhc2spIHtcbi8vICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuVXBkYXRlVGFzaycpLmZpcnN0Q2hpbGQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+IHtcbi8vICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgICB1cGRhdGVUYXNrKHRhc2ssIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5VcGRhdGVUYXNrJykpO1xuLy8gICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuVXBkYXRlVGFzaycpLnJlbW92ZSgpO1xuLy8gICAgIH0pXG4vLyB9XG5cbmZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0cyhwcm9qZWN0cykgeyAgICAgICAgICAgIC8vIE5FRUQgRklYIEZPUiBOQU1FUyBXSVRIIFNBTUUgQUxQSEFCRVRTIERJRkZFUkVOVCBQVU5DVFVBVElPTlxuICAgIHByb2plY3RzID0gcHJvamVjdHMuZmlsdGVyKHByb2plY3QgPT4geyBcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3Byb2plY3QuZmlsdGVyZWRUaXRsZX1Qcm9qZWN0YCkpIHJldHVybiBmYWxzZVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0pXG4gICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gRE9NRmFjdG9yeSgnaDMnLCB7aWQ6IGAke3Byb2plY3QuZmlsdGVyZWRUaXRsZX1Qcm9qZWN0YCwgY2xhc3NOYW1lOiBcInByb2plY3ROYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGAke3Byb2plY3QudGl0bGV9YH0pO1xuICAgICAgICBjb25zdCBhZGRUYXNrSW5Qcm9qZWN0QnV0dG9uID0gRE9NRmFjdG9yeSgnYnV0dG9uJywge2lkOiBgJHtwcm9qZWN0LmZpbHRlcmVkVGl0bGV9IGJ1dHRvbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6IGBBZGQgVGFzayBpbiAke3Byb2plY3QudGl0bGV9YH0pXG4gICAgICAgIGNvbnN0IHRhc2tJblByb2plY3RGb3JtID0gY3JlYXRlVGFza0Zvcm0oYFRhc2tJbiR7cHJvamVjdC5maWx0ZXJlZFRpdGxlfWApO1xuICAgICAgICBhZGRUYXNrSW5Qcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGFza0luUHJvamVjdEZvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgfSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHByb2plY3ROYW1lLCBhZGRUYXNrSW5Qcm9qZWN0QnV0dG9uKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGFza0luUHJvamVjdEZvcm0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RGF0YTsiLCJpbXBvcnQgeyBQcm9qZWN0SXRlbSB9IGZyb20gXCIuL0ZhY3RvcnlGdW5jdGlvbnNcIjtcbmltcG9ydCB7IHB1YnN1YiB9IGZyb20gXCIuL1B1YnN1YlwiO1xuaW1wb3J0IHsgVGFza0l0ZW0gfSBmcm9tIFwiLi9GYWN0b3J5RnVuY3Rpb25zXCI7XG5cbmNvbnN0IHByb2plY3RzID0gW107XG5cbnB1YnN1Yi5zdWJzY3JpYmUoJ2FkZFByb2plY3QnLCBjcmVhdGVQcm9qZWN0KVxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdChmb3JtKSB7XG4gICAgY29uc3QgcHJvamVjdCA9IFByb2plY3RJdGVtKGZvcm1bJ2lucHV0UHJvamVjdFRpdGxlJ10udmFsdWUsIGZvcm1bJ2lucHV0UHJvamVjdERlc2MnXS52YWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1bJ2lucHV0UHJvamVjdER1ZURhdGUnXS52YWx1ZSk7XG4gICAgcHJvamVjdHMucHVzaChwcm9qZWN0KTtcbiAgICBwdWJzdWIucHVibGlzaCgnYWRkUHJvamVjdERPTScsIHByb2plY3RzKTtcbn1cblxucHVic3ViLnN1YnNjcmliZSgnYWRkVGFza0luUHJvamVjdCcsIGFkZFRhc2tJblByb2plY3QpO1xuZnVuY3Rpb24gYWRkVGFza0luUHJvamVjdChmb3JtKSB7XG4gICAgY29uc3QgdGFzayA9IFRhc2tJdGVtKGZvcm1bXCJpbnB1dFRhc2tOYW1lXCJdLnZhbHVlLCBmb3JtW1wiaW5wdXRUYXNrRGVzY1wiXS52YWx1ZSwgZm9ybVtcImlucHV0VGFza0R1ZURhdGVcIl0udmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1bXCJpbnB1dFRhc2tQcmlvcml0eVwiXS52YWx1ZSwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0Q2hlY2tsaXN0JykpO1xuICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICBpZiAoZm9ybVswXS5wYXJlbnROb2RlLmlkLmluY2x1ZGVzKHByb2plY3QuZmlsdGVyZWRUaXRsZSkpIHtcbiAgICAgICAgICAgIHByb2plY3QudGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YnN1Yi5wdWJsaXNoKCdhZGRUYXNrSW5Qcm9qZWN0RE9NJywgcHJvamVjdHMpO1xuICAgIGNvbnNvbGUuZGlyKHByb2plY3RzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVQcm9qZWN0KCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnB1dFByb2plY3RUaXRsZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDsgIC8vdG8gcmVtb3ZlIGN1c3RvbSB2YWxpZGF0aW9uIG1lc3NhZ2Ugd2hlbiBub3QgcmVxdWlyZWRcbiAgICAgICAgZm9yIChjb25zdCBwcm9qZWN0IG9mIHByb2plY3RzKSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQudmFsdWUgPT09IHByb2plY3QudGl0bGUpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiUHJvamVjdCB3aXRoIHNhbWUgbmFtZSBhbHJlYWR5IGV4aXN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnQgPSAwOyAgXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQge2NoZWNrRHVwbGljYXRlUHJvamVjdH07XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInJlbW92ZUF0dHJpYnV0ZSIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsImhhc093blByb3BlcnR5IiwiY2hlY2tsaXN0IiwiaXRlbXMiLCJpdGVtc0FycmF5IiwiY2hlY2tsaXN0T2JqIiwiY2hlY2tlZCIsIlRhc2tJdGVtIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNoZWNrbGlzdEl0ZW1zIiwidGFzayIsIkRhdGUiLCJub3ciLCJlbGVtZW50IiwibmV3RWxlbWVudCIsImF0dHJpYnV0ZSIsInB1YnN1YiIsImV2ZW50cyIsInB1Ymxpc2giLCJldmVudE5hbWUiLCJmb3JFYWNoIiwiY2FsbGJhY2siLCJzdWJzY3JpYmUiLCJpbml0RGlzcGxheU9iamVjdCIsImluaXQiLCJjcmVhdGVFbGVtZW50cyIsInNldENvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwiYmluZEV2ZW50cyIsImNsYXNzTmFtZSIsInRleHRDb250ZW50IiwiYWRkVGFza0J1dHRvbiIsInRhc2tGb3JtIiwiY3JlYXRlVGFza0Zvcm0iLCJwcm9qZWN0IiwiYWRkUHJvamVjdEJ1dHRvbiIsInByb2plY3RGb3JtIiwiZm9ybVNlY3Rpb24iLCJmb3JtT2JqZWN0IiwiYXBwZW5kRWxlbWVudHMiLCJmb3JtIiwiaW5wdXRQcm9qZWN0VGl0bGUiLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCJyZXF1aXJlZCIsImlucHV0UHJvamVjdERlc2MiLCJpbnB1dFByb2plY3REdWVEYXRlIiwic3VibWl0QnV0dG9uIiwiYXBwZW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1Ymxpc2hEYXRhIiwiYmluZCIsImZvcm1GdW5jdGlvbiIsImVsZW1lbnRzIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlc2V0IiwiZGlzcGxheSIsImNyZWF0ZVByb2plY3RGb3JtIiwiYm9keSIsIm9wZW5UYXNrRm9ybSIsIm9wZW5Qcm9qZWN0Rm9ybSIsInZlcnNpb24iLCJpbnB1dFRhc2tUaXRsZSIsIm1heExlbmd0aCIsImlucHV0VGFza0Rlc2MiLCJpbnB1dFRhc2tEdWVEYXRlIiwiaW5wdXRUYXNrUHJpb3JpdHkiLCJhZGRUYXNrQ2hlY2tsaXN0QnV0dG9uIiwiZGVsZXRlQ2hlY2tsaXN0SW5wdXRzIiwiY3JlYXRlQ2hlY2tsaXN0IiwiY2hlY2tMaXN0SW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0VGFza0NoZWNrbGlzdERpdiIsImlucHV0VGFza0NoZWNrbGlzdCIsImlucHV0VGFza0NoZWNrbGlzdERlbGV0ZSIsImluc2VydEJlZm9yZSIsImRlbGV0ZUNoZWNrbGlzdEl0ZW0iLCJhbGxUYXNrcyIsInRhc2tzIiwiVGFza01hbmFnZXIiLCJhZGQiLCJmaWx0ZXIiLCJmaW5kIiwiY3JlYXRlVGFzayIsInRhc2tBcnJheSIsImRlbGV0ZVRhc2siLCJkZWxldGVkVGFzayIsInNlbmRSZXF1aXJlZFRhc2siLCJyZXF1aXJlZFRhc2siLCJsb2ciLCJjb25zb2xlIiwiZGlzcGxheVRhc2tJblByb2plY3QiLCJkaXNwbGF5VGFza3MiLCJ0YXNrRGl2Tm9kZUxpc3QiLCJ0YXNrRGl2IiwiZGVsZXRlQWxsVGFza3MiLCJwcm9qZWN0VGl0bGUiLCJjcmVhdGVUYXNrQ2FyZCIsInRhc2tUaXRsZSIsInRhc2tEZXNjIiwidGFza0R1ZURhdGUiLCJ0YXNrRGVsZXRlIiwidGFza1VwZGF0ZSIsImRlbGV0ZVRhc2tET00iLCJ1cGRhdGVUYXNrRm9ybVZpZXciLCJkaXNwbGF5UHJvamVjdHMiLCJwcm9qZWN0cyIsImdldEVsZW1lbnRCeUlkIiwiZmlsdGVyZWRUaXRsZSIsInByb2plY3ROYW1lIiwiYWRkVGFza0luUHJvamVjdEJ1dHRvbiIsInRhc2tJblByb2plY3RGb3JtIiwiYXNzaWduIiwiVGl0bGUiLCJGaWx0ZXJlZFRpdGxlIiwiRGVzY3JpcHRpb24iLCJEdWVEYXRlIiwiaW5jbHVkZXMiLCJkaXIiLCJkdXBsaWNhdGUiLCJzZXRDdXN0b21WYWxpZGl0eSJdLCJzb3VyY2VSb290IjoiIn0=