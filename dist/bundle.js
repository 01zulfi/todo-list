(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,"body {\n  background-color: white;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB",sourcesContent:["body {\n  background-color: white;\n}\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var o,r,i=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(o=n.next()).done)&&(i.push(o.value),!e||i.length!==e);s=!0);}catch(t){a=!0,r=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return i}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if(!s)return i;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),d=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(d).concat([u]).join("\n")}return[i].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],u=o.base?c[0]+o.base:c[0],d=i[u]||0,l="".concat(u," ").concat(d);i[u]=d+1;var p=n(l),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(m)):e.push({identifier:l,updater:r(m,o),references:1}),s.push(l)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=o(t,r),u=0;u<i.length;u++){var d=n(i[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),s=n.n(i),a=n(565),c=n.n(a),u=n(216),d=n.n(u),l=n(589),p=n.n(l),m=n(890),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=d(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=function(t){return{title:t}},y=function(t){return{description:t}},b=function(t){return{dueDate:t}},k=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},v={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},T={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=k("h1",{className:"appTitle",textContent:"T O D O"}),this.task=k("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=k("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=function(){const t=k("section",{className:"taskFormDiv",style:"display: none"}),e=k("form",{id:"taskForm"}),n=k("input",{id:"inputTaskTitle",name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title..."}),o=k("textarea",{id:"inputTaskDesc",name:"inputTaskDesc",placeholder:"desc/notes..."}),r=k("input",{id:"inputTaskDueDate",name:"inputTaskDueDate",type:"date"}),i=k("input",{id:"inputTaskPriority",name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),s=k("button",{id:"addTaskChecklistButton",type:"button",textContent:"Add Checklist"}),a=k("input",{id:"inputTaskChecklist",name:"inputTaskChecklist",type:"text",placeholder:"enter list here...",style:"display: none;"}),c=k("button",{id:"submitTaskChecklistButton",type:"button",textContent:"Add",style:"display: none;"}),u=k("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,o,r,i,s,a,c,u),t.append(e),t}(),this.project=k("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=k("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=k("section",{className:"projectFormDiv",style:"display: none"}),e=k("form",{id:"projectForm"}),n=k("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title..."}),o=k("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),r=k("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),i=k("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,o,r,i),t.append(e),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(T)),this.taskForm.addEventListener("submit",this.formFunction.bind(T)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(T)),this.projectForm.addEventListener("submit",this.formFunction.bind(T)),document.querySelector("#addTaskChecklistButton").addEventListener("click",this.openChecklist.bind(T)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.closeChecklist.bind(T)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.addChecklistItem)},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"},formFunction:function(t){this.taskForm.firstChild.reset(),t.preventDefault()},openChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="block",document.querySelector("#submitTaskChecklistButton").style.display="block"},closeChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="none",document.querySelector("#submitTaskChecklistButton").style.display="none"},addChecklistItem:function(){v.publish("addChecklist",document.querySelector("#inputTaskChecklist").value)}},C=[];const j=[];v.subscribe("addChecklist",(function(t){if(!t)return;const e={content:t,checked:!1};j.push(e)}));function x(t){console.log(t)}function g(t){t=t.filter((t=>""!==t.title&&!document.querySelector(`#${t.title}`)));for(const e of t){const t=k("h3",{id:`${e.title}`,className:"projectName",textContent:`${e.title}`}),n=k("button",{id:`${e.title} button`,textContent:"Add Task in Project"});document.body.append(t,n)}}const A=[];function P(){const t=document.querySelector("#projectForm").elements,e=(n=t.inputProjectTitle.value,o=t.inputProjectDesc.value,r=t.inputProjectDueDate.value,Object.assign({},f(n),y(o),b(r)));var n,o,r;A.push(e),v.publish("addProject",A)}T.init(),document.querySelector("#taskForm").addEventListener("submit",(t=>{!function(){const t=document.querySelector("#taskForm").elements,e=(n=t.inputTaskName.value,o=t.inputTaskDesc.value,r=t.inputTaskDueDate.value,i=t.inputTaskPriority.value,Object.assign({},f(n),y(o),b(r),function(t){return{priority:t}}(i)));var n,o,r,i;e.checklist=j.slice(),C.push(e),v.publish("addTask",C),j.splice(0)}()})),v.subscribe("addTask",x),v.subscribe("addProject",x),v.subscribe("addProject",g),document.querySelector("#projectForm").addEventListener("submit",P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,