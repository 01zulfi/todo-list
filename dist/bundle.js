(()=>{"use strict";var e={372:(e,n,t)=>{t.d(n,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([e.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }',"",{version:3,sources:["webpack://./src/styles/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;CAED;IACG,iBAAiB,EAAE,MAAM;IACzB,8BAA8B,EAAE,MAAM;EACxC;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,SAAS;EACX;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;IACE,cAAc;IACd,gBAAgB;EAClB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;IACE,uBAAuB,EAAE,MAAM;IAC/B,SAAS,EAAE,MAAM;IACjB,iBAAiB,EAAE,MAAM;EAC3B;;EAEA;;;IAGE;;EAEF;IACE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,6BAA6B;EAC/B;;EAEA;;;IAGE;;EAEF;IACE,mBAAmB,EAAE,MAAM;IAC3B,0BAA0B,EAAE,MAAM;IAClC,iCAAiC,EAAE,MAAM;EAC3C;;EAEA;;IAEE;;EAEF;;IAEE,mBAAmB;EACrB;;EAEA;;;IAGE;;EAEF;;;IAGE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,wBAAwB;EAC1B;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,WAAW;EACb;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;;;;;IAKE,oBAAoB,EAAE,MAAM;IAC5B,eAAe,EAAE,MAAM;IACvB,iBAAiB,EAAE,MAAM;IACzB,SAAS,EAAE,MAAM;EACnB;;EAEA;;;IAGE;;EAEF;UACQ,MAAM;IACZ,iBAAiB;EACnB;;EAEA;;;IAGE;;EAEF;WACS,MAAM;IACb,oBAAoB;EACtB;;EAEA;;IAEE;;EAEF;;;;IAIE,0BAA0B;EAC5B;;EAEA;;IAEE;;EAEF;;;;IAIE,kBAAkB;IAClB,UAAU;EACZ;;EAEA;;IAEE;;EAEF;;;;IAIE,8BAA8B;EAChC;;EAEA;;IAEE;;EAEF;IACE,8BAA8B;EAChC;;EAEA;;;;;IAKE;;EAEF;IACE,sBAAsB,EAAE,MAAM;IAC9B,cAAc,EAAE,MAAM;IACtB,cAAc,EAAE,MAAM;IACtB,eAAe,EAAE,MAAM;IACvB,UAAU,EAAE,MAAM;IAClB,mBAAmB,EAAE,MAAM;EAC7B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,sBAAsB,EAAE,MAAM;IAC9B,UAAU,EAAE,MAAM;EACpB;;EAEA;;IAEE;;EAEF;;IAEE,YAAY;EACd;;EAEA;;;IAGE;;EAEF;IACE,6BAA6B,EAAE,MAAM;IACrC,oBAAoB,EAAE,MAAM;EAC9B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;;IAGE;;EAEF;IACE,0BAA0B,EAAE,MAAM;IAClC,aAAa,EAAE,MAAM;EACvB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,aAAa;EACf;;EAEA;;IAEE;;EAEF;IACE,aAAa;EACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }'],sourceRoot:""}]);const s=a},434:(e,n,t)=>{t.d(n,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([e.id,"/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;;AAEA,0BAA0B;AAC1B;;;;;;;;;;EAUE,SAAS;AACX;;AAEA,2GAA2G;AAC3G;;EAEE,gBAAgB;AAClB;;AAEA,2BAA2B;AAC3B;EACE,uBAAuB;AACzB;;AAEA,2BAA2B;AAC3B;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA,0DAA0D;AAC1D;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;AACpC;;EAEE,eAAe;EACf,cAAc;AAChB;;AAEA,yCAAyC;AACzC;;;;EAIE,aAAa;AACf;;AAEA,gGAAgG;AAChG;EACE;GACC,qBAAqB;EACtB;;EAEA;;;IAGE,qCAAqC;IACrC,uCAAuC;IACvC,sCAAsC;IACtC,gCAAgC;EAClC;AACF",sourcesContent:["/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n"],sourceRoot:""}]);const s=a},890:(e,n,t)=>{t.d(n,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([e.id,"body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n}\n\n.countdownDiv {\n  border: 1px solid red;\n  border-radius: 5px;\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskDiv button {\n  background-color: #A5D6A7;\n  color: black;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,yBAAyB;EACzB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;EACd,oBAAoB;EACpB,2BAA2B;EAC3B,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,wCAAwC;EACxC,mBAAmB;EACnB,0CAA0C;EAC1C,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,QAAQ;EACR,uBAAuB;EACvB,wCAAwC;EACxC,UAAU;EACV,YAAY;EACZ,kBAAkB;;AAEpB;;AAEA;EACE,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,cAAc;EACd,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,gCAAgC;EAChC,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA;EACE,UAAU;EACV,WAAW;EACX,uBAAuB;EACvB,aAAa;EACb,wCAAwC;EACxC,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;;;AAIA;EACE,UAAU;EACV,WAAW;AACb;;AAEA;EACE,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kCAAkC;EAClC,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,UAAU;EACV,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,sBAAsB;EACtB,qEAAqE;EACrE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,WAAW;EACX,QAAQ;AACV;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,wCAAwC;EACxC,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;EACnB,wCAAwC;EACxC,WAAW;AACb;;AAEA;EACE,wCAAwC;EACxC,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd",sourcesContent:["body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n}\n\n.countdownDiv {\n  border: 1px solid red;\n  border-radius: 5px;\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskDiv button {\n  background-color: #A5D6A7;\n  color: black;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);i&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,i=new Array(n);t<n;t++)i[t]=e[t];return i}e.exports=function(e){var t,i,r=(i=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var i,r,o=[],a=!0,s=!1;try{for(t=t.call(e);!(a=(i=t.next()).done)&&(o.push(i.value),!n||o.length!==n);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==t.return||t.return()}finally{if(s)throw r}}return o}}(t,i)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(e,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([d]).join("\n")}return[o].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,i=0;i<n.length;i++)if(n[i].identifier===e){t=i;break}return t}function i(e,i){for(var o={},a=[],s=0;s<e.length;s++){var c=e[s],d=i.base?c[0]+i.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(n[A].references++,n[A].updater(h)):n.push({identifier:u,updater:r(h,i),references:1}),a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var o=i(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var c=i(e,r),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var i=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var i=t.css,r=t.media,o=t.sourceMap;r?e.setAttribute("media",r):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(i,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},628:(e,n,t)=>{e.exports=t.p+"d3c6e4d3c9d56329b167.svg"}},n={};function t(i){var r=n[i];if(void 0!==r)return r.exports;var o=n[i]={id:i,exports:{}};return e[i](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var i=n.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),i=t(795),r=t.n(i),o=t(569),a=t.n(o),s=t(565),c=t.n(s),d=t(216),l=t.n(d),u=t(589),A=t.n(u),h=t(372),m={};m.styleTagTransform=A(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var f=t(434),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=l(),n()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;var b=t(890),g={};function E(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function C(e){return E(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function v(e){E(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(E(1,arguments),!C(e)&&"number"!=typeof e)return!1;var n=v(e);return!isNaN(Number(n))}g.styleTagTransform=A(),g.setAttributes=c(),g.insert=a().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=l(),n()(b.Z,g),b.Z&&b.Z.locals&&b.Z.locals;var w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function k(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,i=e.formats[t]||e.formats[e.defaultWidth];return i}}var x,B={date:k({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:k({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:k({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},T={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(e){return function(n,t){var i,r=t||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=r.width?String(r.width):o;i=e.formattingValues[a]||e.formattingValues[o]}else{var s=e.defaultWidth,c=r.width?String(r.width):e.defaultWidth;i=e.values[c]||e.values[s]}return i[e.argumentCallback?e.argumentCallback(n):n]}}function D(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.width,r=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],o=n.match(r);if(!o)return null;var a,s=o[0],c=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?I(c,(function(e){return e.test(s)})):S(c,(function(e){return e.test(s)}));a=e.valueCallback?e.valueCallback(d):d,a=t.valueCallback?t.valueCallback(a):a;var l=n.slice(s.length);return{value:a,rest:l}}}function S(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function I(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const j={code:"en-US",formatDistance:function(e,n,t){var i,r=w[e];return i="string"==typeof r?r:1===n?r.one:r.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+i:i+" ago":i},formatLong:B,formatRelative:function(e,n,t,i){return T[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),i=t%100;if(i>20||i<10)switch(i%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(x.matchPattern);if(!t)return null;var i=t[0],r=e.match(x.parsePattern);if(!r)return null;var o=x.valueCallback?x.valueCallback(r[0]):r[0];o=n.valueCallback?n.valueCallback(o):o;var a=e.slice(i.length);return{value:o,rest:a}}),era:D({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:D({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:D({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:D({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:D({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function P(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function F(e,n){E(2,arguments);var t=v(e).getTime(),i=P(n);return new Date(t+i)}function N(e,n){E(2,arguments);var t=P(n);return F(e,-t)}function z(e,n){for(var t=e<0?"-":"",i=Math.abs(e).toString();i.length<n;)i="0"+i;return t+i}const U=function(e,n){var t=e.getUTCFullYear(),i=t>0?t:1-t;return z("yy"===n?i%100:i,n.length)},O=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):z(t+1,2)},Y=function(e,n){return z(e.getUTCDate(),n.length)},W=function(e,n){return z(e.getUTCHours()%12||12,n.length)},q=function(e,n){return z(e.getUTCHours(),n.length)},L=function(e,n){return z(e.getUTCMinutes(),n.length)},R=function(e,n){return z(e.getUTCSeconds(),n.length)},G=function(e,n){var t=n.length,i=e.getUTCMilliseconds();return z(Math.floor(i*Math.pow(10,t-3)),n.length)};var H=864e5;function Q(e){E(1,arguments);var n=1,t=v(e),i=t.getUTCDay(),r=(i<n?7:0)+i-n;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function X(e){E(1,arguments);var n=v(e),t=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var r=Q(i),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var a=Q(o);return n.getTime()>=r.getTime()?t+1:n.getTime()>=a.getTime()?t:t-1}function Z(e){E(1,arguments);var n=X(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var i=Q(t);return i}var $=6048e5;function J(e,n){E(1,arguments);var t=n||{},i=t.locale,r=i&&i.options&&i.options.weekStartsOn,o=null==r?0:P(r),a=null==t.weekStartsOn?o:P(t.weekStartsOn);if(!(a>=0&&a<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=v(e),c=s.getUTCDay(),d=(c<a?7:0)+c-a;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function V(e,n){E(1,arguments);var t=v(e,n),i=t.getUTCFullYear(),r=n||{},o=r.locale,a=o&&o.options&&o.options.firstWeekContainsDate,s=null==a?1:P(a),c=null==r.firstWeekContainsDate?s:P(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(i+1,0,c),d.setUTCHours(0,0,0,0);var l=J(d,n),u=new Date(0);u.setUTCFullYear(i,0,c),u.setUTCHours(0,0,0,0);var A=J(u,n);return t.getTime()>=l.getTime()?i+1:t.getTime()>=A.getTime()?i:i-1}function _(e,n){E(1,arguments);var t=n||{},i=t.locale,r=i&&i.options&&i.options.firstWeekContainsDate,o=null==r?1:P(r),a=null==t.firstWeekContainsDate?o:P(t.firstWeekContainsDate),s=V(e,n),c=new Date(0);c.setUTCFullYear(s,0,a),c.setUTCHours(0,0,0,0);var d=J(c,n);return d}var K=6048e5;function ee(e,n){var t=e>0?"-":"+",i=Math.abs(e),r=Math.floor(i/60),o=i%60;if(0===o)return t+String(r);var a=n||"";return t+String(r)+a+z(o,2)}function ne(e,n){return e%60==0?(e>0?"-":"+")+z(Math.abs(e)/60,2):te(e,n)}function te(e,n){var t=n||"",i=e>0?"-":"+",r=Math.abs(e);return i+z(Math.floor(r/60),2)+t+z(r%60,2)}const ie={G:function(e,n,t){var i=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(i,{width:"abbreviated"});case"GGGGG":return t.era(i,{width:"narrow"});case"GGGG":default:return t.era(i,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var i=e.getUTCFullYear(),r=i>0?i:1-i;return t.ordinalNumber(r,{unit:"year"})}return U(e,n)},Y:function(e,n,t,i){var r=V(e,i),o=r>0?r:1-r;return"YY"===n?z(o%100,2):"Yo"===n?t.ordinalNumber(o,{unit:"year"}):z(o,n.length)},R:function(e,n){return z(X(e),n.length)},u:function(e,n){return z(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(i);case"QQ":return z(i,2);case"Qo":return t.ordinalNumber(i,{unit:"quarter"});case"QQQ":return t.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(i,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(i,{width:"wide",context:"formatting"})}},q:function(e,n,t){var i=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(i);case"qq":return z(i,2);case"qo":return t.ordinalNumber(i,{unit:"quarter"});case"qqq":return t.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(i,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(i,{width:"wide",context:"standalone"})}},M:function(e,n,t){var i=e.getUTCMonth();switch(n){case"M":case"MM":return O(e,n);case"Mo":return t.ordinalNumber(i+1,{unit:"month"});case"MMM":return t.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(i,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(i,{width:"wide",context:"formatting"})}},L:function(e,n,t){var i=e.getUTCMonth();switch(n){case"L":return String(i+1);case"LL":return z(i+1,2);case"Lo":return t.ordinalNumber(i+1,{unit:"month"});case"LLL":return t.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(i,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(i,{width:"wide",context:"standalone"})}},w:function(e,n,t,i){var r=function(e,n){E(1,arguments);var t=v(e),i=J(t,n).getTime()-_(t,n).getTime();return Math.round(i/K)+1}(e,i);return"wo"===n?t.ordinalNumber(r,{unit:"week"}):z(r,n.length)},I:function(e,n,t){var i=function(e){E(1,arguments);var n=v(e),t=Q(n).getTime()-Z(n).getTime();return Math.round(t/$)+1}(e);return"Io"===n?t.ordinalNumber(i,{unit:"week"}):z(i,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):Y(e,n)},D:function(e,n,t){var i=function(e){E(1,arguments);var n=v(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=n.getTime(),r=t-i;return Math.floor(r/H)+1}(e);return"Do"===n?t.ordinalNumber(i,{unit:"dayOfYear"}):z(i,n.length)},E:function(e,n,t){var i=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(i,{width:"short",context:"formatting"});case"EEEE":default:return t.day(i,{width:"wide",context:"formatting"})}},e:function(e,n,t,i){var r=e.getUTCDay(),o=(r-i.weekStartsOn+8)%7||7;switch(n){case"e":return String(o);case"ee":return z(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});case"eeee":default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(e,n,t,i){var r=e.getUTCDay(),o=(r-i.weekStartsOn+8)%7||7;switch(n){case"c":return String(o);case"cc":return z(o,n.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});case"cccc":default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(e,n,t){var i=e.getUTCDay(),r=0===i?7:i;switch(n){case"i":return String(r);case"ii":return z(r,n.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(i,{width:"short",context:"formatting"});case"iiii":default:return t.day(i,{width:"wide",context:"formatting"})}},a:function(e,n,t){var i=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(e,n,t){var i,r=e.getUTCHours();switch(i=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,n,t){var i,r=e.getUTCHours();switch(i=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var i=e.getUTCHours()%12;return 0===i&&(i=12),t.ordinalNumber(i,{unit:"hour"})}return W(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):q(e,n)},K:function(e,n,t){var i=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(i,{unit:"hour"}):z(i,n.length)},k:function(e,n,t){var i=e.getUTCHours();return 0===i&&(i=24),"ko"===n?t.ordinalNumber(i,{unit:"hour"}):z(i,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):R(e,n)},S:function(e,n){return G(e,n)},X:function(e,n,t,i){var r=(i._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(n){case"X":return ne(r);case"XXXX":case"XX":return te(r);case"XXXXX":case"XXX":default:return te(r,":")}},x:function(e,n,t,i){var r=(i._originalDate||e).getTimezoneOffset();switch(n){case"x":return ne(r);case"xxxx":case"xx":return te(r);case"xxxxx":case"xxx":default:return te(r,":")}},O:function(e,n,t,i){var r=(i._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+ee(r,":");case"OOOO":default:return"GMT"+te(r,":")}},z:function(e,n,t,i){var r=(i._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+ee(r,":");case"zzzz":default:return"GMT"+te(r,":")}},t:function(e,n,t,i){var r=i._originalDate||e;return z(Math.floor(r.getTime()/1e3),n.length)},T:function(e,n,t,i){return z((i._originalDate||e).getTime(),n.length)}};function re(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function oe(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const ae={p:oe,P:function(e,n){var t,i=e.match(/(P+)(p+)?/),r=i[1],o=i[2];if(!o)return re(e,n);switch(r){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",re(r,n)).replace("{{time}}",oe(o,n))}};function se(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ce=["D","DD"],de=["YY","YYYY"];function le(e){return-1!==ce.indexOf(e)}function ue(e){return-1!==de.indexOf(e)}function Ae(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var he=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fe=/^'([^]*?)'?$/,pe=/''/g,be=/[a-zA-Z]/;function ge(e){return e.match(fe)[1].replace(pe,"'")}function Ee(e,n){E(2,arguments);var t=v(e),i=v(n),r=t.getTime()-i.getTime();return r<0?-1:r>0?1:r}function Ce(e,n){E(2,arguments);var t=v(e),i=v(n);return t.getFullYear()-i.getFullYear()}function ve(e,n){E(2,arguments);var t=v(e),i=v(n),r=Ee(t,i),o=Math.abs(Ce(t,i));t.setFullYear(1584),i.setFullYear(1584);var a=Ee(t,i)===-r,s=r*(o-Number(a));return 0===s?0:s}function ye(e,n){E(2,arguments);var t=v(e),i=v(n),r=t.getFullYear()-i.getFullYear(),o=t.getMonth()-i.getMonth();return 12*r+o}function we(e){E(1,arguments);var n=v(e);return n.setHours(23,59,59,999),n}function ke(e){E(1,arguments);var n=v(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(23,59,59,999),n}function xe(e){E(1,arguments);var n=v(e);return we(n).getTime()===ke(n).getTime()}function Be(e,n){E(2,arguments);var t,i=v(e),r=v(n),o=Ee(i,r),a=Math.abs(ye(i,r));if(a<1)t=0;else{1===i.getMonth()&&i.getDate()>27&&i.setDate(30),i.setMonth(i.getMonth()-o*a);var s=Ee(i,r)===-o;xe(v(e))&&1===a&&1===Ee(e,r)&&(s=!1),t=o*(a-Number(s))}return 0===t?0:t}function Te(e){E(1,arguments);var n=v(e);return n.setHours(0,0,0,0),n}var Me=864e5;function De(e,n){E(2,arguments);var t=Te(e),i=Te(n),r=t.getTime()-se(t),o=i.getTime()-se(i);return Math.round((r-o)/Me)}function Se(e,n){var t=e.getFullYear()-n.getFullYear()||e.getMonth()-n.getMonth()||e.getDate()-n.getDate()||e.getHours()-n.getHours()||e.getMinutes()-n.getMinutes()||e.getSeconds()-n.getSeconds()||e.getMilliseconds()-n.getMilliseconds();return t<0?-1:t>0?1:t}function Ie(e,n){E(2,arguments);var t=v(e),i=v(n),r=Se(t,i),o=Math.abs(De(t,i));t.setDate(t.getDate()-r*o);var a=Number(Se(t,i)===-r),s=r*(o-a);return 0===s?0:s}Math.pow(10,8);var je=36e5;function Pe(e,n){return E(2,arguments),v(e).getTime()-v(n).getTime()}var Fe={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function Ne(e){return e?Fe[e]:Fe.trunc}function ze(e,n,t){E(2,arguments);var i=Pe(e,n)/je;return Ne(null==t?void 0:t.roundingMethod)(i)}function Ue(e,n,t){E(2,arguments);var i=Pe(e,n)/6e4;return Ne(null==t?void 0:t.roundingMethod)(i)}function Oe(e,n,t){E(2,arguments);var i=Pe(e,n)/1e3;return Ne(null==t?void 0:t.roundingMethod)(i)}function Ye(e,n){E(2,arguments);var t=v(e),i=P(n);return isNaN(i)?new Date(NaN):i?(t.setDate(t.getDate()+i),t):t}function We(e,n){E(2,arguments);var t=P(n);return Ye(e,-t)}function qe(e,n){E(2,arguments);var t=v(e),i=P(n);if(isNaN(i))return new Date(NaN);if(!i)return t;var r=t.getDate(),o=new Date(t.getTime());o.setMonth(t.getMonth()+i+1,0);var a=o.getDate();return r>=a?o:(t.setFullYear(o.getFullYear(),o.getMonth(),r),t)}function Le(e,n){E(2,arguments);var t=P(n);return qe(e,-t)}function Re(e,n){if(E(2,arguments),!n||"object"!=typeof n)return new Date(NaN);var t=n.years?P(n.years):0,i=n.months?P(n.months):0,r=n.weeks?P(n.weeks):0,o=n.days?P(n.days):0,a=n.hours?P(n.hours):0,s=n.minutes?P(n.minutes):0,c=n.seconds?P(n.seconds):0,d=Le(e,i+12*t),l=We(d,o+7*r),u=s+60*a,A=c+60*u,h=1e3*A,m=new Date(l.getTime()-h);return m}const Ge=function(e,n){const t=document.createElement(e);for(const e in n)e.toString().includes("data")?t.setAttribute(e.toString(),n[e]):t[e]=n[e];return t},He=function(){return Math.floor(Math.random()*Date.now()).toString()},Qe=function([e,n]){const t=[];if(n){for(let i=0;i<e.length;i++){const r={content:e[i],checked:n[i],id:He()};t.push(r)}return t}const i=Array.from(e);for(const e of i){if(""===e.value)continue;const n={content:e.value,checked:e.disabled,id:He()};t.push(n)}return t};function Xe(e){if(!e)return;const n=e.split(/\D/);return new Date(n[0],--n[1],n[2])}const Ze=function([e,n,t,i,r,o]){const a=t?function(e,n,t){E(2,arguments);var i=String(n),r=t||{},o=r.locale||j,a=o.options&&o.options.firstWeekContainsDate,s=null==a?1:P(a),c=null==r.firstWeekContainsDate?s:P(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,l=null==d?0:P(d),u=null==r.weekStartsOn?l:P(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=v(e);if(!y(A))throw new RangeError("Invalid time value");var h=se(A),m=N(A,h),f={firstWeekContainsDate:c,weekStartsOn:u,locale:o,_originalDate:A};return i.match(me).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,ae[n])(e,o.formatLong,f):e})).join("").match(he).map((function(t){if("''"===t)return"'";var i=t[0];if("'"===i)return ge(t);var a=ie[i];if(a)return!r.useAdditionalWeekYearTokens&&ue(t)&&Ae(t,n,e),!r.useAdditionalDayOfYearTokens&&le(t)&&Ae(t,n,e),a(m,t,o.localize,f);if(i.match(be))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return t})).join("")}(Xe(t),"yyyy: do MMM, EEEE"):"",s=Ee(Xe(t),new Date),c={title:e,description:n,dueDate:a,priority:i||"",checklist:Qe(r),id:He(),done:!!o};return{get title(){return c.title},get description(){return c.description},get id(){return c.id},get dueDate(){return c.dueDate},get dueDateInput(){return t},get dueDateMessage(){return-1===s?`${c.dueDate} (Due date already passed)`:c.dueDate},countdown:()=>t&&-1!==s?function(e){var n=e.start,t=e.end;E(1,arguments);var i=v(n),r=v(t);if(!y(i))throw new RangeError("Start Date is invalid");if(!y(r))throw new RangeError("End Date is invalid");var o={years:0,months:0,days:0,hours:0,minutes:0,seconds:0},a=Ee(i,r);o.years=Math.abs(ve(i,r));var s=Re(i,{years:a*o.years});o.months=Math.abs(Be(s,r));var c=Re(s,{months:a*o.months});o.days=Math.abs(Ie(c,r));var d=Re(c,{days:a*o.days});o.hours=Math.abs(ze(d,r));var l=Re(d,{hours:a*o.hours});o.minutes=Math.abs(Ue(l,r));var u=Re(l,{minutes:a*o.minutes});return o.seconds=Math.abs(Oe(u,r)),o}({start:new Date,end:Xe(`${t}`)}):{years:0,months:0,days:0,hours:0,minutes:0,seconds:0},get checklist(){return c.checklist},get priority(){return c.priority},findChecklistItem:e=>c.checklist.find((n=>n.id===e)),get done(){return c.done},set done(e){c.done=e}}},$e=function([e,n,t]){const i={title:e,description:n,done:!!t,id:He()};let r=[];return{add(e){r=[...r,e]},remove(e){r=r.filter((n=>n.id!==e))},find:e=>r.find((n=>n.id===e)),get taskArray(){return[...r]},get title(){return i.title},get description(){return i.description},get id(){return i.id},get done(){return i.done},set done(e){i.done=e}}},Je={events:{},publish:function(e,n){this.events[e]&&this.events[e].forEach((e=>e(n)))},subscribe:function(e,n){Array.isArray(this.events[e])||(this.events[e]=[]),this.events[e].push(n)}},Ve={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.menuAndTitleDiv=Ge("div",{className:"menuAndTitleDiv"}),this.appTitleDiv=Ge("div"),this.title=Ge("h2",{className:"appTitle",textContent:"T O D O"}),this.sidebarMain=Ge("div",{className:"sidebarMain"}),this.homeSidebar=Ge("div",{className:"sidebarDiv selected",id:"homeSidebar",textContent:"Home"}),this.taskSidebar=Ge("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=Ge("div",{className:"sidebarDiv",id:"projectSidebar",textContent:"Projects"}),this.addProjectButton=Ge("button",{className:"addProjectButton",textContent:" + | Add Project"}),this.newProjectSidebar=Ge("div",{className:"newProjectSidebar"}),this.main=Ge("div",{className:"main"}),this.header=Ge("div",{className:"header"}),this.headerText=Ge("h1",{className:"headerText",textContent:"Home"})},appendContent:function(){this.appTitleDiv.append(this.title),this.sidebarMain.append(this.homeSidebar,this.taskSidebar,this.projectSidebar),this.menuAndTitleDiv.append(this.appTitleDiv,this.sidebarMain,this.addProjectButton,this.newProjectSidebar),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main)},bindEvents:function(){this.homeSidebar.addEventListener("click",this.changeHeader.bind(Ve)),this.taskSidebar.addEventListener("click",this.changeHeader.bind(Ve)),this.sidebarMain.addEventListener("click",this.toggleSelected.bind(Ve)),this.newProjectSidebar.addEventListener("click",this.toggleSelected.bind(Ve)),this.projectSidebar.addEventListener("click",this.changeHeader.bind(Ve)),this.addProjectButton.addEventListener("click",this.openProjectForm)},changeHeader:function(e){this.headerText.textContent=e.target.textContent},toggleSelected:function(e){"homeSidebar"===e.target.id&&(this.homeSidebar.classList.add("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.remove("selected")),"taskSidebar"===e.target.id&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.add("selected"),this.projectSidebar.classList.remove("selected")),("projectSidebar"===e.target.id||e.target.parentNode.classList.contains("newProjectSidebar"))&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.add("selected"))},openProjectForm:function(){Ke()&&document.body.append(Ke())}};function _e(e){if(document.querySelector(".formModal"))return;const n=Ge("section",{id:"sectionTaskForm",className:"formModal"}),t={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=Ge("span",{className:"closeModal",textContent:"Close"}),this.header=Ge("h2",{textContent:"Create a new task"}),this.form=Ge("form",{id:"formTask","data-id":e}),this.formContainerOne=Ge("div",{className:"formContainerOne"}),this.formContainerTwo=Ge("div",{className:"formContainerTwo"}),this.inputTaskTitle=Ge("input",{id:"inputTaskTitle",name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.labelTitle=Ge("label",{for:"inputTaskTitle",textContent:"Task Title (required):"}),this.inputTaskDesc=Ge("textarea",{id:"inputTaskDesc",name:"inputTaskDesc",placeholder:"desc/notes...",maxLength:"500"}),this.labelDesc=Ge("label",{for:"inputTaskDesc",textContent:"Desc/Notes:"}),this.inputTaskDueDate=Ge("input",{id:"inputTaskDueDate",name:"inputTaskDueDate",type:"date"}),this.labelDueDate=Ge("label",{for:"inputTaskDueDate",textContent:"Due Date:"}),this.inputTaskPriority=Ge("input",{id:"inputTaskPriority",name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.labelPriority=Ge("label",{for:"inputTaskPriority",textContent:"Priority: "}),this.addTaskChecklistButton=Ge("button",{id:"addTaskChecklistButton",type:"button",textContent:"Add Checklist"}),this.inputTaskChecklistDiv=Ge("div",{className:"inputTaskChecklistDiv"}),this.submitButton=Ge("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.inputTaskChecklistDiv.append(this.addTaskChecklistButton),this.formContainerOne.append(this.labelTitle,this.inputTaskTitle,this.labelDueDate,this.inputTaskDueDate,this.labelPriority,this.inputTaskPriority),this.formContainerTwo.append(this.labelDesc,this.inputTaskDesc,this.inputTaskChecklistDiv,this.submitButton),this.form.append(this.formContainerOne,this.formContainerTwo),n.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(t)),this.form.addEventListener("submit",this.publishData.bind(t)),this.form.addEventListener("submit",this.formFunction.bind(t)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(t)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(t))},closeModal:function(){n.remove()},publishData:function(){Je.publish("addTask",[this.form.elements])},formFunction:function(e){e.preventDefault(),this.form.reset(),n.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((e=>e.remove())),this.checklistButtons.forEach((e=>e.remove()))},createChecklist:function(){this.inputTaskChecklistItemDiv=Ge("div"),this.inputTaskChecklist=Ge("input",{name:"inputTaskChecklist",className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=Ge("button",{className:"inputTaskChecklistDelete",textContent:"X"}),this.inputTaskChecklistItemDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.inputTaskChecklistDiv.append(this.inputTaskChecklistItemDiv),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(t))},deleteChecklistItem:function(e){e.target.parentNode.remove()}};return t.init(),n}function Ke(){if(document.querySelector(".formModal"))return;const e=Ge("section",{id:"projectFormSection",className:"formModal"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=Ge("span",{className:"closeModal",textContent:"Close"}),this.header=Ge("h2",{textContent:"Create a new project"}),this.form=Ge("form",{id:"projectForm"}),this.inputProjectTitle=Ge("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.labelTitle=Ge("label",{for:"inputProjectTitle",textContent:"Project Title (required):"}),this.inputProjectDesc=Ge("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.labelDesc=Ge("label",{for:"inputProjectDesc",textContent:"Desc/Notes"}),this.submitButton=Ge("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.labelTitle,this.inputProjectTitle,this.labelDesc,this.inputProjectDesc,this.submitButton),e.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(n)),this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n))},closeModal:function(){e.remove()},publishData:function(){Je.publish("addProject",this.form.elements)},formFunction:function(n){n.preventDefault(),this.form.reset(),e.remove()}};return n.init(),e}function en(e){const n=[],t=[];for(const i of e)n.push(i.content),t.push(i.checked);return[n,t]}function nn(e){localStorage.clear();let n=1;for(const t of e){localStorage.setItem(`Project: ${n};`,JSON.stringify([t.title,t.description,t.done]));let e=1;for(const i of t.taskArray)localStorage.setItem(`Project: ${n}; Task: ${e}`,JSON.stringify([i.title,i.description,i.dueDateInput,i.priority,en(i.checklist),i.done])),e++;n++}}function tn(e){Je.publish("addProjectDOM",rn.findWithTitle(e))}const rn=function(){let e=[];return{add(n){e=[...e,n]},remove(n){e=e.filter((e=>e.id!==n))},find:n=>e.find((e=>e.id===n)),findWithTitle:n=>e.find((e=>e.title===n)),findWithTaskId:n=>e.find((e=>e.find(n))),getTaskWithTaskId(e){return this.findWithTaskId(e).find(e)},get projectArray(){return[...e]}}}();function on([e,n]){let t;t=n||Ze([e.inputTaskName.value,e.inputTaskDesc.value,e.inputTaskDueDate.value,e.inputTaskPriority.value,[document.querySelectorAll(".inputChecklist")]]);const i=e[0].parentNode.parentNode.getAttribute("data-id"),r=rn.find(i);r.add(t),Je.publish("addTaskDOM",r),nn(rn.projectArray)}function an(e){const n=$e([e.inputProjectTitle.value,e.inputProjectDesc.value]);rn.add(n),Je.publish("addProjectSidebar",n.title),nn(rn.projectArray)}function sn(e){rn.findWithTaskId(e).remove(e),nn(rn.projectArray)}function cn(e){Je.publish("editThisData",[rn.findWithTaskId(e),rn.getTaskWithTaskId(e)]),sn(e),nn(rn.projectArray)}function dn([e,n]){const t=rn.getTaskWithTaskId(n),i=t.findChecklistItem(e);console.log(t),i.checked?i.checked=!1:i.checked=!0,nn(rn.projectArray)}function ln(e){const n=rn.getTaskWithTaskId(e);n.done?n.done=!1:n.done=!0,Je.publish("toggleCompleteTaskDOM",n),nn(rn.projectArray)}function un(e){const n=rn.find(e);n.done?n.done=!1:n.done=!0,Je.publish("toggleCompleteProjectDOM",n),nn(rn.projectArray)}function An(e){const n=rn.find(e).title;rn.remove(e),Je.publish("deleteProjectSidebar",n),nn(rn.projectArray)}rn.add($e(["All Tasks"])),console.log(rn);var hn=t(628);function mn(e){vn();for(const n of e)Cn(n),"All Tasks"!==n.title&&gn(n.title)}function fn(e){vn(),Cn(e)}function pn(e){vn(),Cn(e)}function bn(e){vn();for(const n of e)"All Tasks"!==n.title&&Cn(n)}function gn(e){const n=document.querySelector(".newProjectSidebar");if(document.getElementById(e))return;const t=Ge("div",{id:e,textContent:e});n.append(t),t.addEventListener("click",(()=>document.querySelector(".headerText").textContent="Projects")),t.addEventListener("click",(e=>Je.publish("requireProjectForDisplay",e.target.id)))}function En(e){document.getElementById(e).remove()}function Cn(e){const n=document.querySelector(".main"),t=Ge("section",{"data-id":e.id,className:"projectSection"});let i,r,o,a,s;e.done?t.style.opacity=.5:t.style.opacity=1,"All Tasks"===e.title?(i=Ge("h2",{className:"projectHeading",textContent:""}),r=Ge("button",{className:"addTaskInPRoject",textContent:"Add Task"})):(i=Ge("h2",{className:"projectHeading",textContent:e.title}),r=Ge("button",{className:"addTaskInProject",textContent:`Add Task in ${e.title}`}),o=Ge("button",{className:"completeProjectButton",textContent:"Complete"}),s=Ge("img",{src:hn}),o.append(s),a=Ge("button",{className:"deleteProjectButton",textContent:"Delete Project"}),o.addEventListener("click",(e=>Je.publish("toggleCompleteProject",e.target.parentNode.getAttribute("data-id")))),a.addEventListener("click",(e=>{Je.publish("deleteProject",e.target.parentNode.getAttribute("data-id")),e.target.parentNode.remove()}))),t.append(i,r,o||"",a||""),n.append(t),r.addEventListener("click",(function(){if(!_e())return;const e=_e(this.parentNode.getAttribute("data-id"));this.parentNode.append(e)})),0!==e.taskArray.length&&yn(e)}function vn(){const e=document.querySelector(".main");for(;e.querySelector("section");)e.lastChild.remove()}function yn(e){const n=document.querySelector(`[data-id="${e.id}"]`),t=Ge("div",{className:"taskContainer"});!function(e){const n=e.querySelectorAll(".taskDiv");n&&n.forEach((e=>e.remove()))}(n);const i=e.taskArray;for(const e of i)t.append(wn(e));n.append(t)}function wn(e){const n=Ge("div",{className:"taskDiv","data-id":e.id});e.done?n.style.opacity=.5:n.style.opacity=1;const t={taskCountdownDiv:Ge("div",{className:"countdownDiv",style:"display: none"}),init:function(){this.createElements(),this.appendElements(),this.bindEvents(),window.setInterval(this.setIntervalCountdown,1e3,e)},createElements:function(){this.taskTitle=Ge("h4",{className:"taskTitle",textContent:e.title}),this.taskDesc=Ge("p",{className:"taskDesc",textContent:e.description}),this.taskChecklist=function(e,n){const t=Ge("div",{className:"checklistDiv"});for(const i of e){const e=Ge("div",{className:"checkboxDiv","data-id":n.id}),r=Ge("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),o=Ge("label",{for:i.id,textContent:i.content});i.checked&&(r.checked=!0,o.style.opacity=.5),e.append(r,o),t.append(e),e.addEventListener("click",kn)}return t}(e.checklist,e),this.taskDueDate=Ge("p",{className:"taskDueDate",textContent:e.dueDateMessage}),this.taskPriority=Ge("p",{className:"taskPriority",textContent:e.priority?`Priority: ${e.priority}`:""}),this.taskComplete=Ge("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=Ge("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=Ge("button",{className:"updateTask",textContent:"Update Task"}),this.taskCountdownButton=Ge("button",{className:"countdownTaskButton",textContent:"View Countdown"})},appendElements:function(){n.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskPriority,this.taskComplete,this.taskDelete,this.taskUpdate,this.taskCountdownButton,t.taskCountdownDiv)},bindEvents:function(){this.taskComplete.addEventListener("click",(e=>Je.publish("toggleCompleteTask",e.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(e=>Je.publish("requireEditData",e.target.parentNode.getAttribute("data-id")))),this.taskCountdownButton.addEventListener("click",this.viewCountdown.bind(t))},deleteTaskDOM:function(e){Je.publish("deleteTask",e.target.parentNode.getAttribute("data-id")),e.target.parentNode.remove()},viewCountdown:function(){"none"===this.taskCountdownDiv.style.display?this.taskCountdownDiv.style.display="block":this.taskCountdownDiv.style.display="none"},setIntervalCountdown:function(e){t.taskCountdownDiv.firstChild&&t.taskCountdownDiv.firstChild.remove();const n=function(e){const n=e.countdown(),t=Ge("p",{textContent:`Years: ${n.years}`}),i=Ge("p",{textContent:`Months: ${n.months}`}),r=Ge("p",{textContent:`Days: ${n.days}`}),o=Ge("p",{textContent:`Hours: ${n.hours}`}),a=Ge("p",{textContent:`Minutes: ${n.minutes}`}),s=Ge("p",{textContent:`Seconds: ${n.seconds}`}),c=Ge("div");return c.append(t,i,r,o,a,s),c}(e);t.taskCountdownDiv.append(n)}};return t.init(),n}function kn(e){const n=this.querySelector("input"),t=this.querySelector("label");n.checked?void 0===e.target.type&&(n.checked=!1):void 0===e.target.type&&(n.checked=!0),function(e,n){n.style.opacity=e?.5:1}(n.checked,t),Je.publish("toggleChecklist",[n.getAttribute("data-id"),n.parentNode.getAttribute("data-id")])}function xn([e,n]){const t=_e(e.id);document.body.append(t);const i=t.lastChild,r=t.querySelector(".inputTaskChecklistDiv"),o=t.querySelector(".closeModal");i.elements.inputTaskName.value=n.title,i.elements.inputTaskDesc.value=n.description,i.elements.inputTaskDueDate.value=n.dueDateInput,i.elements.inputTaskPriority.value=n.priority;for(const e of n.checklist){const n=Ge("div"),t=Ge("input",{className:"inputChecklist",type:"text",value:e.content,disabled:e.checked}),i=Ge("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});n.append(t,i),r.append(n),i.addEventListener("click",a)}function a(e){e.target.parentNode.remove()}o.addEventListener("click",(()=>Je.publish("addTask",[i,n])))}function Bn(e){const n=document.querySelector(`[data-id="${e.id}"]`);e.done?n.style.opacity=.5:n.style.opacity=1}function Tn(e){const n=document.querySelector(`[data-id="${e.id}"]`);e.done?n.style.opacity=.5:n.style.opacity=1}Je.subscribe("pageLoad",mn),Ve.init(),function(){if(0===localStorage.length)return;const e=Object.keys(localStorage),n=[];for(let t=0;t<=e.length;t++){const i=e.filter((e=>e.slice(0,e.indexOf(";")).includes(`${t}`)));0!==i.length&&(i.sort(((e,n)=>e.length-n.length)),n.push(i))}for(let e=1;e<n[0].length;e++){const t=n[0].slice();rn.findWithTitle("All Tasks").add(Ze(JSON.parse(localStorage.getItem(t[e]))))}for(let e=1;e<n.length;e++){let t;const i=n[e].slice();for(let e=0;e<i.length;e++)0!==e?t.add(Ze(JSON.parse(localStorage.getItem(i[e])))):t=$e(JSON.parse(localStorage.getItem(i[e])));rn.add(t)}}(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar"),this.projectSidebar=document.getElementById("projectSidebar"),this.homeSidebar=document.getElementById("homeSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>Je.publish("taskSidebarClicked",rn.findWithTitle("All Tasks")))),this.projectSidebar.addEventListener("click",(()=>Je.publish("projectSidebarClicked",rn.projectArray))),this.homeSidebar.addEventListener("click",(()=>Je.publish("homeSidebarClicked",rn.projectArray)))}}.init(),Je.publish("pageLoad",rn.projectArray),Je.subscribe("addTask",on),Je.subscribe("deleteTask",sn),Je.subscribe("requireEditData",cn),Je.subscribe("toggleChecklist",dn),Je.subscribe("toggleCompleteTask",ln),Je.subscribe("addProject",an),Je.subscribe("requireProjectForDisplay",tn),Je.subscribe("toggleCompleteProject",un),Je.subscribe("deleteProject",An),Je.subscribe("addTaskDOM",yn),Je.subscribe("editThisData",xn),Je.subscribe("toggleCompleteTaskDOM",Bn),Je.subscribe("addProjectDOM",pn),Je.subscribe("homeSidebarClicked",mn),Je.subscribe("taskSidebarClicked",fn),Je.subscribe("projectSidebarClicked",bn),Je.subscribe("addProjectSidebar",gn),Je.subscribe("toggleCompleteProjectDOM",Tn),Je.subscribe("deleteProjectSidebar",En)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,