(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(15),s=n.n(i),o=n(645),a=n.n(o)()(s());a.push([t.id,"* {\n  border: 1px solid purple;\n  padding: 2px;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;EACxB,YAAY;AACd",sourcesContent:["* {\n  border: 1px solid purple;\n  padding: 2px;\n}\n"],sourceRoot:""}]);const r=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(s[a]=!0)}for(var r=0;r<t.length;r++){var c=[].concat(t[r]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,o=[],a=!0,r=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){r=!0,s=t}finally{try{a||null==n.return||n.return()}finally{if(r)throw s}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=s[1],a=s[3];if(!a)return o;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),u="/*# ".concat(c," */"),d=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(d).concat([u]).join("\n")}return[o].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},a=[],r=0;r<t.length;r++){var c=t[r],u=i.base?c[0]+i.base:c[0],d=o[u]||0,l="".concat(u," ").concat(d);o[u]=d+1;var p=n(l),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:l,updater:s(h,i),references:1}),a.push(l)}return a}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var o=i(t=t||[],s=s||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var r=n(o[a]);e[r].references--}for(var c=i(t,s),u=0;u<o.length;u++){var d=n(o[u]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,o=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),o=n(569),a=n.n(o),r=n(565),c=n.n(r),u=n(216),d=n.n(u),l=n(589),p=n.n(l),h=n(890),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=d(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=function(){return Math.floor(Math.random()*Date.now()).toString()},k=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:t.disabled,id:m()};e.push(n)}return e},b=function(t,e,n){const i={title:t,description:e,dueDate:n,id:m()};let s=[];return{add(t){s=[...s,t]},remove(t){s=s.filter((e=>e.id!==t))},find:t=>s.find((e=>e.id===t)),get taskArray(){return[...s]},get metaData(){return{get title(){return i.title},get description(){return i.description},get dueDate(){return i.dueDate},get id(){return i.id}}}}},v=function(t,e){const n=document.createElement(t);for(const t in e)t.toString().includes("data")?n.setAttribute(t.toString(),e[t]):n[t]=e[t];return n},D={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},y={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=v("h1",{className:"appTitle",textContent:"T O D O"}),this.addProjectButton=v("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=v("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=v("form",{id:"projectForm"}),this.inputProjectTitle=v("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=v("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=v("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=v("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){D.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},appendContent:function(){document.body.append(this.title),document.body.append(this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addProjectButton.addEventListener("click",this.openProjectForm.bind(y))},openProjectForm:function(){this.projectForm.style.display="block"}};function T(t,e){const n=v("section",{id:`section${t}Form`,className:t}),i={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=v("form",{id:`form${t}`,name:e}),this.inputTaskTitle=v("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=v("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=v("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=v("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=v("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=v("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),n.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(i)),this.form.addEventListener("submit",this.formFunction.bind(i)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(i)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(i))},publishData:function(){D.publish("addTask",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),n.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((t=>t.remove())),this.checklistButtons.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=v("div"),this.inputTaskChecklist=v("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=v("button",{className:`input${t}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(i))},deleteChecklistItem:function(t){t.target.parentNode.remove()}};return i.init(),n}const g=b("All Tasks"),C=function(){let t=[];return{add(e){t=[...t,e]},remove(e){t=t.filter((t=>t.metaData.id!==e))},find:e=>t.find((t=>t.metaData.id===e)),findWithTaskId:e=>t.find((t=>t.find(e))),getTaskWithTaskId(t){return this.findWithTaskId(t).find(t)},get projectArray(){return[...t]}}}();function E(t){const e=function(t,e,n,i,s){const o={title:t,description:e,dueDate:n,priority:i,checklist:k(s),id:m(),done:!1};return{get title(){return o.title},get description(){return o.description},get id(){return o.id},get dueDate(){return o.dueDate},get checklist(){return o.checklist},findChecklistItem:t=>o.checklist.find((e=>e.id===t)),get done(){return o.done},set done(t){o.done=t},task:o}}(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist")),n=t[0].parentNode.name,i=C.find(n);i.add(e),D.publish("addTaskDOM",i)}function j(t){console.log(t);const e=b(t.inputProjectTitle.value,t.inputProjectDesc.value,t.inputProjectDueDate.value);C.add(e),D.publish("addProjectDOM",e.metaData),console.log(C.projectArray)}function A(t){C.findWithTaskId(t).remove(t),console.log(C)}function x(t){D.publish("editThisData",[C.findWithTaskId(t),C.getTaskWithTaskId(t)]),A(t)}function P([t,e]){console.log(e);const n=C.getTaskWithTaskId(e),i=n.findChecklistItem(t);console.log(n),i.checked?i.checked=!1:i.checked=!0}function N(t){const e=C.getTaskWithTaskId(t);e.done?e.done=!1:e.done=!0,D.publish("toggleCompleteTaskDOM",e)}function I(t){console.log(t)}function S(t){const e=v("section",{"data-id":t.id,className:"projectSection"}),n=v("h2",{className:"projectHeading",textContent:t.title}),i=v("button",{className:"addTaskInPRoject",textContent:`Add Task in ${t.title}`});e.append(n,i),document.body.append(e),i.addEventListener("click",(function(){const t=T("Task",this.parentNode.getAttribute("data-id"));this.parentNode.append(t)}))}function B(t){const e=document.querySelector(`[data-id="${t.metaData.id}"]`);!function(t){const e=t.querySelectorAll(".taskDiv");e&&e.forEach((t=>t.remove()))}(e);const n=t.taskArray;for(const t of n)e.append(M(t))}function M(t){const e=v("div",{className:"taskDiv","data-id":t.id});return t.done?e.style.opacity=.5:e.style.opacity=1,{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=v("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=v("p",{className:"taskDesc",textContent:t.description}),this.taskChecklist=function(t,e){const n=v("div",{className:"checklistDiv"});for(const i of t){const t=v("div",{className:"checkboxDiv","data-id":e.id}),s=v("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),o=v("label",{for:i.id,textContent:i.content});i.checked&&(s.checked=!0,o.style.opacity=.5),t.append(s,o),n.append(t),t.addEventListener("click",O)}return n}(t.checklist,t),this.taskDueDate=v("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskComplete=v("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=v("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=v("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskComplete,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskComplete.addEventListener("click",(t=>D.publish("toggleCompleteTask",t.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>D.publish("requireEditData",t.target.parentNode.getAttribute("data-id"))))},deleteTaskDOM:function(t){D.publish("deleteTask",t.target.parentNode.getAttribute("data-id")),t.target.parentNode.remove()}}.init(),e}function O(t){const e=this.querySelector("input"),n=this.querySelector("label");e.checked?void 0===t.target.type&&(e.checked=!1):void 0===t.target.type&&(e.checked=!0),function(t,e){e.style.opacity=t?.5:1}(e.checked,n),D.publish("toggleChecklist",[e.getAttribute("data-id"),e.parentNode.getAttribute("data-id")])}function L([t,e]){const n=T("Task",t.metaData.id);document.body.append(n);const i=n.firstChild,s=document.getElementById("submitButtonTask");i.elements[0].value=e.title,i.elements[1].value=e.description,i.elements[2].value=e.dueDate,i.elements[3].value=e.priority;for(const t of e.checklist){const e=v("div"),n=v("input",{className:"inputChecklist",type:"text",value:t.content,disabled:t.checked}),a=v("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});e.append(n,a),i.insertBefore(e,s),a.addEventListener("click",o)}function o(t){t.target.parentNode.remove()}}function w(t){const e=document.querySelector(`[data-id="${t.id}"]`);t.done?e.style.opacity=.5:e.style.opacity=1}C.add(g),console.log(C),D.subscribe("initializeDOM",S);y.init(),D.publish("initializeDOM",g.metaData),D.subscribe("addTask",E),D.subscribe("deleteTask",A),D.subscribe("requireEditData",x),D.subscribe("toggleChecklist",P),D.subscribe("toggleCompleteTask",N),D.subscribe("addProject",j),D.subscribe("addTaskDOM",I),D.subscribe("addTaskDOM",B),D.subscribe("editThisData",L),D.subscribe("toggleCompleteTaskDOM",w),D.subscribe("addProjectDOM",I),D.subscribe("addProjectDOM",S)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,