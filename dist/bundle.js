(()=>{"use strict";var n={372:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }',"",{version:3,sources:["webpack://./src/styles/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;CAED;IACG,iBAAiB,EAAE,MAAM;IACzB,8BAA8B,EAAE,MAAM;EACxC;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,SAAS;EACX;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;IACE,cAAc;IACd,gBAAgB;EAClB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;IACE,uBAAuB,EAAE,MAAM;IAC/B,SAAS,EAAE,MAAM;IACjB,iBAAiB,EAAE,MAAM;EAC3B;;EAEA;;;IAGE;;EAEF;IACE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,6BAA6B;EAC/B;;EAEA;;;IAGE;;EAEF;IACE,mBAAmB,EAAE,MAAM;IAC3B,0BAA0B,EAAE,MAAM;IAClC,iCAAiC,EAAE,MAAM;EAC3C;;EAEA;;IAEE;;EAEF;;IAEE,mBAAmB;EACrB;;EAEA;;;IAGE;;EAEF;;;IAGE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,wBAAwB;EAC1B;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,WAAW;EACb;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;;;;;IAKE,oBAAoB,EAAE,MAAM;IAC5B,eAAe,EAAE,MAAM;IACvB,iBAAiB,EAAE,MAAM;IACzB,SAAS,EAAE,MAAM;EACnB;;EAEA;;;IAGE;;EAEF;UACQ,MAAM;IACZ,iBAAiB;EACnB;;EAEA;;;IAGE;;EAEF;WACS,MAAM;IACb,oBAAoB;EACtB;;EAEA;;IAEE;;EAEF;;;;IAIE,0BAA0B;EAC5B;;EAEA;;IAEE;;EAEF;;;;IAIE,kBAAkB;IAClB,UAAU;EACZ;;EAEA;;IAEE;;EAEF;;;;IAIE,8BAA8B;EAChC;;EAEA;;IAEE;;EAEF;IACE,8BAA8B;EAChC;;EAEA;;;;;IAKE;;EAEF;IACE,sBAAsB,EAAE,MAAM;IAC9B,cAAc,EAAE,MAAM;IACtB,cAAc,EAAE,MAAM;IACtB,eAAe,EAAE,MAAM;IACvB,UAAU,EAAE,MAAM;IAClB,mBAAmB,EAAE,MAAM;EAC7B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,sBAAsB,EAAE,MAAM;IAC9B,UAAU,EAAE,MAAM;EACpB;;EAEA;;IAEE;;EAEF;;IAEE,YAAY;EACd;;EAEA;;;IAGE;;EAEF;IACE,6BAA6B,EAAE,MAAM;IACrC,oBAAoB,EAAE,MAAM;EAC9B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;;IAGE;;EAEF;IACE,0BAA0B,EAAE,MAAM;IAClC,aAAa,EAAE,MAAM;EACvB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,aAAa;EACf;;EAEA;;IAEE;;EAEF;IACE,aAAa;EACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }'],sourceRoot:""}]);const s=a},434:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,"/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;;AAEA,0BAA0B;AAC1B;;;;;;;;;;EAUE,SAAS;AACX;;AAEA,2GAA2G;AAC3G;;EAEE,gBAAgB;AAClB;;AAEA,2BAA2B;AAC3B;EACE,uBAAuB;AACzB;;AAEA,2BAA2B;AAC3B;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA,0DAA0D;AAC1D;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;AACpC;;EAEE,eAAe;EACf,cAAc;AAChB;;AAEA,yCAAyC;AACzC;;;;EAIE,aAAa;AACf;;AAEA,gGAAgG;AAChG;EACE;GACC,qBAAqB;EACtB;;EAEA;;;IAGE,qCAAqC;IACrC,uCAAuC;IACvC,sCAAsC;IACtC,gCAAgC;EAClC;AACF",sourcesContent:["/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n"],sourceRoot:""}]);const s=a},890:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),r=t.n(i),o=t(645),a=t.n(o)()(r());a.push([n.id,"::-webkit-scrollbar {\n  background-color: black;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: #6200EE;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\nform button {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 1px solid gray;\n  padding: 5px;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n  width: 95%;\n}\n\n.taskDiv h3 {\n  font-size: 25px;\n  text-align: center;\n}\n\n.taskDiv div, .taskDiv p{\n  font-size: 20px;\n  text-align: center;\n}\n\n.taskDiv .checklistDiv {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n}\n\n.taskDiv .taskDueDate {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n  margin-top: 2px;\n  margin-bottom: 2px;\n}\n\n.taskDiv .taskPriority {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n  margin-bottom: 4px;\n}\n\n.taskDiv .taskPriority.High {\n  border: 1px solid red;\n}\n\n.taskDiv .taskPriority.Medium {\n  border: 1px solid yellow;\n}\n\n.taskDiv .taskPriority.Low {\n  border: 1px solid white;\n}\n\n.taskDiv .checklistDiv .checkboxDiv {\n  background-color: rgba(255,255,255,0.09);\n  margin: 3px;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px\n}\n\n.taskDiv .checklistDiv p {\n  color:#F5F5F5;\n}\n\n.taskButtonContainer {\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n  display: flex;\n  flex-direction: column;\n  width: 95%;\n}\n\n.projectSection h2 {\n  text-align: center;\n  font-size: 30px;\n}\n\n.projectSection.complete {\n  border: 2px solid #A5D6A7;\n  opacity: 0.9;\n}\n\n.projectButtonContainer {\n  margin: 0 auto;\n}\n\n.projectButtonContainer button {\n  font-size: 20px;\n}\n\n.countdownDiv {\n  padding: 4px;\n  background-color: rgba(255,255,255,0.09);\n  border-radius: 5px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n\n.countdownDiv div {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 5px;\n}\n\n.countdownDiv div .durationContainer {\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  width: 25%; \n  border-radius: 5px;\n  padding: 5px;\n  background-color: rgba(255,255,255,0.11);\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskContainer.complete {\n  pointer-events: none;\n}\n\n.taskDiv button {\n  background-color: #00796B;\n  padding: 4px;\n  width: 20%;\n}\n\n.taskDiv button img {\n  margin: 0 auto;\n}\n\n.addTaskInProject.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.completeProjectButton.complete {\n  background-color:#00C853;\n  color: black;\n}\n\n.taskDiv .updateTask.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.taskDiv .countdownTaskButton.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.taskDiv .countdownTaskButton.clicked {\n  border: 2px solid white;\n} \n\n.taskDiv .checklistDiv.complete {\n  pointer-events: none;\n}\n\n.taskDiv.complete {\n  border: 2px solid #00E676;\n  background-color: rgb(0, 230, 118, 0.2);\n}\n\n.taskDiv .taskComplete.complete {\n  border: 2px solid white;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,yBAAyB;EACzB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;EACd,oBAAoB;EACpB,mBAAmB;EACnB,2BAA2B;EAC3B,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,wCAAwC;EACxC,mBAAmB;EACnB,0CAA0C;EAC1C,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,QAAQ;EACR,uBAAuB;EACvB,wCAAwC;EACxC,UAAU;EACV,YAAY;EACZ,kBAAkB;;AAEpB;;AAEA;EACE,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,cAAc;EACd,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,gCAAgC;EAChC,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA;EACE,UAAU;EACV,WAAW;EACX,uBAAuB;EACvB,aAAa;EACb,wCAAwC;EACxC,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,UAAU;EACV,WAAW;AACb;;AAEA;EACE,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kCAAkC;EAClC,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,UAAU;EACV,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,sBAAsB;EACtB,qEAAqE;EACrE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,WAAW;EACX,QAAQ;AACV;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,wCAAwC;EACxC,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,YAAY;EACZ,mBAAmB;EACnB,wCAAwC;EACxC,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,wCAAwC;EACxC,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,wCAAwC;EACxC,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,wCAAwC;EACxC,YAAY;EACZ,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,wCAAwC;EACxC,WAAW;EACX,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB;AACF;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,wCAAwC;EACxC,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,wCAAwC;EACxC,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,UAAU;EACV,kBAAkB;EAClB,YAAY;EACZ,wCAAwC;AAC1C;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,yBAAyB;EACzB,uCAAuC;AACzC;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:["::-webkit-scrollbar {\n  background-color: black;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: #6200EE;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\nform button {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 1px solid gray;\n  padding: 5px;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n  width: 95%;\n}\n\n.taskDiv h3 {\n  font-size: 25px;\n  text-align: center;\n}\n\n.taskDiv div, .taskDiv p{\n  font-size: 20px;\n  text-align: center;\n}\n\n.taskDiv .checklistDiv {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n}\n\n.taskDiv .taskDueDate {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n  margin-top: 2px;\n  margin-bottom: 2px;\n}\n\n.taskDiv .taskPriority {\n  background-color: rgba(255,255,255,0.08);\n  padding: 2px;\n  border-radius: 4px;\n  margin-bottom: 4px;\n}\n\n.taskDiv .taskPriority.High {\n  border: 1px solid red;\n}\n\n.taskDiv .taskPriority.Medium {\n  border: 1px solid yellow;\n}\n\n.taskDiv .taskPriority.Low {\n  border: 1px solid white;\n}\n\n.taskDiv .checklistDiv .checkboxDiv {\n  background-color: rgba(255,255,255,0.09);\n  margin: 3px;\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5px\n}\n\n.taskDiv .checklistDiv p {\n  color:#F5F5F5;\n}\n\n.taskButtonContainer {\n  display: flex;\n  justify-content: space-evenly;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n  display: flex;\n  flex-direction: column;\n  width: 95%;\n}\n\n.projectSection h2 {\n  text-align: center;\n  font-size: 30px;\n}\n\n.projectSection.complete {\n  border: 2px solid #A5D6A7;\n  opacity: 0.9;\n}\n\n.projectButtonContainer {\n  margin: 0 auto;\n}\n\n.projectButtonContainer button {\n  font-size: 20px;\n}\n\n.countdownDiv {\n  padding: 4px;\n  background-color: rgba(255,255,255,0.09);\n  border-radius: 5px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n\n.countdownDiv div {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 5px;\n}\n\n.countdownDiv div .durationContainer {\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n  width: 25%; \n  border-radius: 5px;\n  padding: 5px;\n  background-color: rgba(255,255,255,0.11);\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskContainer.complete {\n  pointer-events: none;\n}\n\n.taskDiv button {\n  background-color: #00796B;\n  padding: 4px;\n  width: 20%;\n}\n\n.taskDiv button img {\n  margin: 0 auto;\n}\n\n.addTaskInProject.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.completeProjectButton.complete {\n  background-color:#00C853;\n  color: black;\n}\n\n.taskDiv .updateTask.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.taskDiv .countdownTaskButton.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.taskDiv .countdownTaskButton.clicked {\n  border: 2px solid white;\n} \n\n.taskDiv .checklistDiv.complete {\n  pointer-events: none;\n}\n\n.taskDiv.complete {\n  border: 2px solid #00E676;\n  background-color: rgb(0, 230, 118, 0.2);\n}\n\n.taskDiv .taskComplete.complete {\n  border: 2px solid white;\n}"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,i){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);i&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}n.exports=function(n){var t,i,r=(i=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var i,r,o=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(i=t.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(n){s=!0,r=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw r}}return o}}(t,i)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var i=Object.prototype.toString.call(n).slice(8,-1);return"Object"===i&&n.constructor&&(i=n.constructor.name),"Map"===i||"Set"===i?Array.from(n):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(n,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[o].concat(l).concat([d]).join("\n")}return[o].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var o={},a=[],s=0;s<n.length;s++){var c=n[s],d=i.base?c[0]+i.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(e[A].references++,e[A].updater(h)):e.push({identifier:u,updater:r(h,i),references:1}),a.push(u)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=i(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=t(o[a]);e[s].references--}for(var c=i(n,r),d=0;d<o.length;d++){var l=t(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i=t.css,r=t.media,o=t.sourceMap;r?n.setAttribute("media",r):n.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},451:(n,e,t)=>{n.exports=t.p+"338a897d6d3f1bad1245.svg"},628:(n,e,t)=>{n.exports=t.p+"d3c6e4d3c9d56329b167.svg"},463:(n,e,t)=>{n.exports=t.p+"3d2bcc6bc35cbb27ab06.svg"},48:(n,e,t)=>{n.exports=t.p+"feccad5f187e036aef70.svg"},145:(n,e,t)=>{n.exports=t.p+"ad4c28841e4fa9d960f4.svg"},562:(n,e,t)=>{n.exports=t.p+"0ac8e27936024d242be3.svg"},580:(n,e,t)=>{n.exports=t.p+"83e859470da2612c0204.svg"},990:(n,e,t)=>{n.exports=t.p+"6d57f2cdc8a2563d38d5.svg"},246:(n,e,t)=>{n.exports=t.p+"330398155eb75cf159e9.svg"}},e={};function t(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return n[i](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),(()=>{var n=t(379),e=t.n(n),i=t(795),r=t.n(i),o=t(569),a=t.n(o),s=t(565),c=t.n(s),d=t(216),l=t.n(d),u=t(589),A=t.n(u),h=t(372),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=l(),e()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var m=t(434),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var b=t(890),g={};g.styleTagTransform=A(),g.setAttributes=c(),g.insert=a().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=l(),e()(b.Z,g),b.Z&&b.Z.locals&&b.Z.locals;var E=t(246),C=t(451);function v(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function k(n){return v(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function x(n){v(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function w(n){if(v(1,arguments),!k(n)&&"number"!=typeof n)return!1;var e=x(n);return!isNaN(Number(e))}var y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function B(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,i=n.formats[t]||n.formats[n.defaultWidth];return i}}var T,D={date:B({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:B({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:B({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},M={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function S(n){return function(e,t){var i,r=t||{};if("formatting"===(r.context?String(r.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=r.width?String(r.width):o;i=n.formattingValues[a]||n.formattingValues[o]}else{var s=n.defaultWidth,c=r.width?String(r.width):n.defaultWidth;i=n.values[c]||n.values[s]}return i[n.argumentCallback?n.argumentCallback(e):e]}}function I(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=t.width,r=i&&n.matchPatterns[i]||n.matchPatterns[n.defaultMatchWidth],o=e.match(r);if(!o)return null;var a,s=o[0],c=i&&n.parsePatterns[i]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?P(c,(function(n){return n.test(s)})):j(c,(function(n){return n.test(s)}));a=n.valueCallback?n.valueCallback(d):d,a=t.valueCallback?t.valueCallback(a):a;var l=e.slice(s.length);return{value:a,rest:l}}}function j(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function P(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}const F={code:"en-US",formatDistance:function(n,e,t){var i,r=y[n];return i="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+i:i+" ago":i},formatLong:D,formatRelative:function(n,e,t,i){return M[n]},localize:{ordinalNumber:function(n,e){var t=Number(n),i=t%100;if(i>20||i<10)switch(i%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:S({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:S({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:S({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:S({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:S({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(T.matchPattern);if(!t)return null;var i=t[0],r=n.match(T.parsePattern);if(!r)return null;var o=T.valueCallback?T.valueCallback(r[0]):r[0];o=e.valueCallback?e.valueCallback(o):o;var a=n.slice(i.length);return{value:o,rest:a}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function z(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function N(n,e){v(2,arguments);var t=x(n).getTime(),i=z(e);return new Date(t+i)}function Y(n,e){v(2,arguments);var t=z(e);return N(n,-t)}function U(n,e){for(var t=n<0?"-":"",i=Math.abs(n).toString();i.length<e;)i="0"+i;return t+i}const L=function(n,e){var t=n.getUTCFullYear(),i=t>0?t:1-t;return U("yy"===e?i%100:i,e.length)},O=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):U(t+1,2)},q=function(n,e){return U(n.getUTCDate(),e.length)},W=function(n,e){return U(n.getUTCHours()%12||12,e.length)},R=function(n,e){return U(n.getUTCHours(),e.length)},G=function(n,e){return U(n.getUTCMinutes(),e.length)},H=function(n,e){return U(n.getUTCSeconds(),e.length)},Z=function(n,e){var t=e.length,i=n.getUTCMilliseconds();return U(Math.floor(i*Math.pow(10,t-3)),e.length)};var X=864e5;function Q(n){v(1,arguments);var e=1,t=x(n),i=t.getUTCDay(),r=(i<e?7:0)+i-e;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function $(n){v(1,arguments);var e=x(n),t=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var r=Q(i),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var a=Q(o);return e.getTime()>=r.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}function V(n){v(1,arguments);var e=$(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var i=Q(t);return i}var J=6048e5;function _(n,e){v(1,arguments);var t=e||{},i=t.locale,r=i&&i.options&&i.options.weekStartsOn,o=null==r?0:z(r),a=null==t.weekStartsOn?o:z(t.weekStartsOn);if(!(a>=0&&a<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=x(n),c=s.getUTCDay(),d=(c<a?7:0)+c-a;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function K(n,e){v(1,arguments);var t=x(n,e),i=t.getUTCFullYear(),r=e||{},o=r.locale,a=o&&o.options&&o.options.firstWeekContainsDate,s=null==a?1:z(a),c=null==r.firstWeekContainsDate?s:z(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(i+1,0,c),d.setUTCHours(0,0,0,0);var l=_(d,e),u=new Date(0);u.setUTCFullYear(i,0,c),u.setUTCHours(0,0,0,0);var A=_(u,e);return t.getTime()>=l.getTime()?i+1:t.getTime()>=A.getTime()?i:i-1}function nn(n,e){v(1,arguments);var t=e||{},i=t.locale,r=i&&i.options&&i.options.firstWeekContainsDate,o=null==r?1:z(r),a=null==t.firstWeekContainsDate?o:z(t.firstWeekContainsDate),s=K(n,e),c=new Date(0);c.setUTCFullYear(s,0,a),c.setUTCHours(0,0,0,0);var d=_(c,e);return d}var en=6048e5;function tn(n,e){var t=n>0?"-":"+",i=Math.abs(n),r=Math.floor(i/60),o=i%60;if(0===o)return t+String(r);var a=e||"";return t+String(r)+a+U(o,2)}function rn(n,e){return n%60==0?(n>0?"-":"+")+U(Math.abs(n)/60,2):on(n,e)}function on(n,e){var t=e||"",i=n>0?"-":"+",r=Math.abs(n);return i+U(Math.floor(r/60),2)+t+U(r%60,2)}const an={G:function(n,e,t){var i=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(i,{width:"abbreviated"});case"GGGGG":return t.era(i,{width:"narrow"});case"GGGG":default:return t.era(i,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var i=n.getUTCFullYear(),r=i>0?i:1-i;return t.ordinalNumber(r,{unit:"year"})}return L(n,e)},Y:function(n,e,t,i){var r=K(n,i),o=r>0?r:1-r;return"YY"===e?U(o%100,2):"Yo"===e?t.ordinalNumber(o,{unit:"year"}):U(o,e.length)},R:function(n,e){return U($(n),e.length)},u:function(n,e){return U(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var i=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(i);case"QQ":return U(i,2);case"Qo":return t.ordinalNumber(i,{unit:"quarter"});case"QQQ":return t.quarter(i,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(i,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(i,{width:"wide",context:"formatting"})}},q:function(n,e,t){var i=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(i);case"qq":return U(i,2);case"qo":return t.ordinalNumber(i,{unit:"quarter"});case"qqq":return t.quarter(i,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(i,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(i,{width:"wide",context:"standalone"})}},M:function(n,e,t){var i=n.getUTCMonth();switch(e){case"M":case"MM":return O(n,e);case"Mo":return t.ordinalNumber(i+1,{unit:"month"});case"MMM":return t.month(i,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(i,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(i,{width:"wide",context:"formatting"})}},L:function(n,e,t){var i=n.getUTCMonth();switch(e){case"L":return String(i+1);case"LL":return U(i+1,2);case"Lo":return t.ordinalNumber(i+1,{unit:"month"});case"LLL":return t.month(i,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(i,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(i,{width:"wide",context:"standalone"})}},w:function(n,e,t,i){var r=function(n,e){v(1,arguments);var t=x(n),i=_(t,e).getTime()-nn(t,e).getTime();return Math.round(i/en)+1}(n,i);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):U(r,e.length)},I:function(n,e,t){var i=function(n){v(1,arguments);var e=x(n),t=Q(e).getTime()-V(e).getTime();return Math.round(t/J)+1}(n);return"Io"===e?t.ordinalNumber(i,{unit:"week"}):U(i,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):q(n,e)},D:function(n,e,t){var i=function(n){v(1,arguments);var e=x(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),r=t-i;return Math.floor(r/X)+1}(n);return"Do"===e?t.ordinalNumber(i,{unit:"dayOfYear"}):U(i,e.length)},E:function(n,e,t){var i=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(i,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(i,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(i,{width:"short",context:"formatting"});case"EEEE":default:return t.day(i,{width:"wide",context:"formatting"})}},e:function(n,e,t,i){var r=n.getUTCDay(),o=(r-i.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return U(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});case"eeee":default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,i){var r=n.getUTCDay(),o=(r-i.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return U(o,e.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});case"cccc":default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var i=n.getUTCDay(),r=0===i?7:i;switch(e){case"i":return String(r);case"ii":return U(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(i,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(i,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(i,{width:"short",context:"formatting"});case"iiii":default:return t.day(i,{width:"wide",context:"formatting"})}},a:function(n,e,t){var i=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},b:function(n,e,t){var i,r=n.getUTCHours();switch(i=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(n,e,t){var i,r=n.getUTCHours();switch(i=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(i,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var i=n.getUTCHours()%12;return 0===i&&(i=12),t.ordinalNumber(i,{unit:"hour"})}return W(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):R(n,e)},K:function(n,e,t){var i=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(i,{unit:"hour"}):U(i,e.length)},k:function(n,e,t){var i=n.getUTCHours();return 0===i&&(i=24),"ko"===e?t.ordinalNumber(i,{unit:"hour"}):U(i,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):G(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):H(n,e)},S:function(n,e){return Z(n,e)},X:function(n,e,t,i){var r=(i._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return rn(r);case"XXXX":case"XX":return on(r);case"XXXXX":case"XXX":default:return on(r,":")}},x:function(n,e,t,i){var r=(i._originalDate||n).getTimezoneOffset();switch(e){case"x":return rn(r);case"xxxx":case"xx":return on(r);case"xxxxx":case"xxx":default:return on(r,":")}},O:function(n,e,t,i){var r=(i._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+tn(r,":");case"OOOO":default:return"GMT"+on(r,":")}},z:function(n,e,t,i){var r=(i._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+tn(r,":");case"zzzz":default:return"GMT"+on(r,":")}},t:function(n,e,t,i){var r=i._originalDate||n;return U(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,i){return U((i._originalDate||n).getTime(),e.length)}};function sn(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function cn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const dn={p:cn,P:function(n,e){var t,i=n.match(/(P+)(p+)?/),r=i[1],o=i[2];if(!o)return sn(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;case"PPPP":default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",sn(r,e)).replace("{{time}}",cn(o,e))}};function ln(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var un=["D","DD"],An=["YY","YYYY"];function hn(n){return-1!==un.indexOf(n)}function pn(n){return-1!==An.indexOf(n)}function mn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var fn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,bn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,En=/''/g,Cn=/[a-zA-Z]/;function vn(n){return n.match(gn)[1].replace(En,"'")}function kn(n,e){v(2,arguments);var t=x(n),i=x(e),r=t.getTime()-i.getTime();return r<0?-1:r>0?1:r}function xn(n,e){v(2,arguments);var t=x(n),i=x(e);return t.getFullYear()-i.getFullYear()}function wn(n,e){v(2,arguments);var t=x(n),i=x(e),r=kn(t,i),o=Math.abs(xn(t,i));t.setFullYear(1584),i.setFullYear(1584);var a=kn(t,i)===-r,s=r*(o-Number(a));return 0===s?0:s}function yn(n,e){v(2,arguments);var t=x(n),i=x(e),r=t.getFullYear()-i.getFullYear(),o=t.getMonth()-i.getMonth();return 12*r+o}function Bn(n){v(1,arguments);var e=x(n);return e.setHours(23,59,59,999),e}function Tn(n){v(1,arguments);var e=x(n),t=e.getMonth();return e.setFullYear(e.getFullYear(),t+1,0),e.setHours(23,59,59,999),e}function Dn(n){v(1,arguments);var e=x(n);return Bn(e).getTime()===Tn(e).getTime()}function Mn(n,e){v(2,arguments);var t,i=x(n),r=x(e),o=kn(i,r),a=Math.abs(yn(i,r));if(a<1)t=0;else{1===i.getMonth()&&i.getDate()>27&&i.setDate(30),i.setMonth(i.getMonth()-o*a);var s=kn(i,r)===-o;Dn(x(n))&&1===a&&1===kn(n,r)&&(s=!1),t=o*(a-Number(s))}return 0===t?0:t}function Sn(n){v(1,arguments);var e=x(n);return e.setHours(0,0,0,0),e}var In=864e5;function jn(n,e){v(2,arguments);var t=Sn(n),i=Sn(e),r=t.getTime()-ln(t),o=i.getTime()-ln(i);return Math.round((r-o)/In)}function Pn(n,e){var t=n.getFullYear()-e.getFullYear()||n.getMonth()-e.getMonth()||n.getDate()-e.getDate()||n.getHours()-e.getHours()||n.getMinutes()-e.getMinutes()||n.getSeconds()-e.getSeconds()||n.getMilliseconds()-e.getMilliseconds();return t<0?-1:t>0?1:t}function Fn(n,e){v(2,arguments);var t=x(n),i=x(e),r=Pn(t,i),o=Math.abs(jn(t,i));t.setDate(t.getDate()-r*o);var a=Number(Pn(t,i)===-r),s=r*(o-a);return 0===s?0:s}Math.pow(10,8);var zn=36e5;function Nn(n,e){return v(2,arguments),x(n).getTime()-x(e).getTime()}var Yn={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(n){return n<0?Math.ceil(n):Math.floor(n)}};function Un(n){return n?Yn[n]:Yn.trunc}function Ln(n,e,t){v(2,arguments);var i=Nn(n,e)/zn;return Un(null==t?void 0:t.roundingMethod)(i)}function On(n,e,t){v(2,arguments);var i=Nn(n,e)/6e4;return Un(null==t?void 0:t.roundingMethod)(i)}function qn(n,e,t){v(2,arguments);var i=Nn(n,e)/1e3;return Un(null==t?void 0:t.roundingMethod)(i)}function Wn(n,e){v(2,arguments);var t=x(n),i=z(e);return isNaN(i)?new Date(NaN):i?(t.setDate(t.getDate()+i),t):t}function Rn(n,e){v(2,arguments);var t=z(e);return Wn(n,-t)}function Gn(n,e){v(2,arguments);var t=x(n),i=z(e);if(isNaN(i))return new Date(NaN);if(!i)return t;var r=t.getDate(),o=new Date(t.getTime());o.setMonth(t.getMonth()+i+1,0);var a=o.getDate();return r>=a?o:(t.setFullYear(o.getFullYear(),o.getMonth(),r),t)}function Hn(n,e){v(2,arguments);var t=z(e);return Gn(n,-t)}function Zn(n,e){if(v(2,arguments),!e||"object"!=typeof e)return new Date(NaN);var t=e.years?z(e.years):0,i=e.months?z(e.months):0,r=e.weeks?z(e.weeks):0,o=e.days?z(e.days):0,a=e.hours?z(e.hours):0,s=e.minutes?z(e.minutes):0,c=e.seconds?z(e.seconds):0,d=Hn(n,i+12*t),l=Rn(d,o+7*r),u=s+60*a,A=c+60*u,h=1e3*A,p=new Date(l.getTime()-h);return p}const Xn=function(n,e){const t=document.createElement(n);for(const n in e)"list"!==n?n.toString().includes("data")?t.setAttribute(n.toString(),e[n]):t[n]=e[n]:t.setAttribute(n,e[n]);return t},Qn=function(){return Math.floor(Math.random()*Date.now()).toString()},$n=function([n,e]){const t=[];if(e){for(let i=0;i<n.length;i++){const r={content:n[i],checked:e[i],id:Qn()};t.push(r)}return t}const i=Array.from(n);for(const n of i){if(""===n.value)continue;const e={content:n.value,checked:n.disabled,id:Qn()};t.push(e)}return t};function Vn(n){if(!n)return;const e=n.split(/\D/);return new Date(e[0],--e[1],e[2])}const Jn=function([n,e,t,i,r,o]){const a=t?function(n,e,t){v(2,arguments);var i=String(e),r=t||{},o=r.locale||F,a=o.options&&o.options.firstWeekContainsDate,s=null==a?1:z(a),c=null==r.firstWeekContainsDate?s:z(r.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,l=null==d?0:z(d),u=null==r.weekStartsOn?l:z(r.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=x(n);if(!w(A))throw new RangeError("Invalid time value");var h=ln(A),p=Y(A,h),m={firstWeekContainsDate:c,weekStartsOn:u,locale:o,_originalDate:A};return i.match(bn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,dn[e])(n,o.formatLong,m):n})).join("").match(fn).map((function(t){if("''"===t)return"'";var i=t[0];if("'"===i)return vn(t);var a=an[i];if(a)return!r.useAdditionalWeekYearTokens&&pn(t)&&mn(t,e,n),!r.useAdditionalDayOfYearTokens&&hn(t)&&mn(t,e,n),a(p,t,o.localize,m);if(i.match(Cn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return t})).join("")}(Vn(t),"yyyy: do MMM, E"):"",s=kn(Vn(t),new Date),c={title:n,description:e,dueDate:a,priority:i||"",checklist:$n(r),id:Qn(),done:!!o};return{get title(){return c.title},get description(){return c.description},get id(){return c.id},get dueDate(){return c.dueDate},get dueDateInput(){return t},get dueDateMessage(){return-1===s?`${c.dueDate} (Due date already passed)`:c.dueDate},countdown:()=>t&&-1!==s?function(n){var e=n.start,t=n.end;v(1,arguments);var i=x(e),r=x(t);if(!w(i))throw new RangeError("Start Date is invalid");if(!w(r))throw new RangeError("End Date is invalid");var o={years:0,months:0,days:0,hours:0,minutes:0,seconds:0},a=kn(i,r);o.years=Math.abs(wn(i,r));var s=Zn(i,{years:a*o.years});o.months=Math.abs(Mn(s,r));var c=Zn(s,{months:a*o.months});o.days=Math.abs(Fn(c,r));var d=Zn(c,{days:a*o.days});o.hours=Math.abs(Ln(d,r));var l=Zn(d,{hours:a*o.hours});o.minutes=Math.abs(On(l,r));var u=Zn(l,{minutes:a*o.minutes});return o.seconds=Math.abs(qn(u,r)),o}({start:new Date,end:Vn(`${t}`)}):{years:0,months:0,days:0,hours:0,minutes:0,seconds:0},get checklist(){return c.checklist},get priority(){return c.priority},findChecklistItem:n=>c.checklist.find((e=>e.id===n)),get done(){return c.done},set done(n){c.done=n}}},_n=function([n,e,t]){const i={title:n,description:e,done:!!t,id:Qn()};let r=[];return{add(n){r=[...r,n]},remove(n){r=r.filter((e=>e.id!==n))},find:n=>r.find((e=>e.id===n)),get taskArray(){return[...r]},get title(){return i.title},get description(){return i.description},get id(){return i.id},get done(){return i.done},set done(n){i.done=n}}},Kn={events:{},publish:function(n,e){this.events[n]&&this.events[n].forEach((n=>n(e)))},subscribe:function(n,e){Array.isArray(this.events[n])||(this.events[n]=[]),this.events[n].push(e)}},ne={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.favicon=Xn("link",{type:"image/png",rel:"icon",href:E}),this.menuAndTitleDiv=Xn("div",{className:"menuAndTitleDiv"}),this.appTitleDiv=Xn("div"),this.title=Xn("h2",{className:"appTitle",textContent:"T O D O"}),this.sidebarMain=Xn("div",{className:"sidebarMain"}),this.homeSidebar=Xn("div",{className:"sidebarDiv selected",id:"homeSidebar",textContent:"Home"}),this.taskSidebar=Xn("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=Xn("div",{className:"sidebarDiv",id:"projectSidebar",textContent:"Projects"}),this.addProjectButton=Xn("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectAddIcon=Xn("img",{src:C}),this.newProjectSidebar=Xn("div",{className:"newProjectSidebar"}),this.main=Xn("div",{className:"main"}),this.header=Xn("div",{className:"header"}),this.headerText=Xn("h1",{className:"headerText",textContent:"Home"})},appendContent:function(){document.head.append(this.favicon),this.addProjectButton.append(this.projectAddIcon),this.appTitleDiv.append(this.title),this.sidebarMain.append(this.homeSidebar,this.taskSidebar,this.projectSidebar),this.menuAndTitleDiv.append(this.appTitleDiv,this.sidebarMain,this.addProjectButton,this.newProjectSidebar),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main)},bindEvents:function(){this.homeSidebar.addEventListener("click",this.changeHeader.bind(ne)),this.taskSidebar.addEventListener("click",this.changeHeader.bind(ne)),this.sidebarMain.addEventListener("click",this.toggleSelected.bind(ne)),this.newProjectSidebar.addEventListener("click",this.toggleSelected.bind(ne)),this.projectSidebar.addEventListener("click",this.changeHeader.bind(ne)),this.addProjectButton.addEventListener("click",this.openProjectForm)},changeHeader:function(n){this.headerText.textContent=n.target.textContent},toggleSelected:function(n){"homeSidebar"===n.target.id&&(this.homeSidebar.classList.add("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.remove("selected")),"taskSidebar"===n.target.id&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.add("selected"),this.projectSidebar.classList.remove("selected")),("projectSidebar"===n.target.id||n.target.parentNode.classList.contains("newProjectSidebar"))&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.add("selected"))},openProjectForm:function(){te()&&document.body.append(te())}};function ee(n){if(document.querySelector(".formModal"))return;const e=Xn("section",{id:"sectionTaskForm",className:"formModal"}),t={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=Xn("span",{className:"closeModal",textContent:"Close"}),this.header=Xn("h2",{textContent:"Create a new task"}),this.form=Xn("form",{id:"formTask","data-id":n}),this.formContainerOne=Xn("div",{className:"formContainerOne"}),this.formContainerTwo=Xn("div",{className:"formContainerTwo"}),this.inputTaskTitle=Xn("input",{id:"inputTaskTitle",name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.labelTitle=Xn("label",{for:"inputTaskTitle",textContent:"Task Title (required):"}),this.inputTaskDesc=Xn("textarea",{id:"inputTaskDesc",name:"inputTaskDesc",placeholder:"desc/notes...",maxLength:"500"}),this.labelDesc=Xn("label",{for:"inputTaskDesc",textContent:"Desc/Notes:"}),this.inputTaskDueDate=Xn("input",{id:"inputTaskDueDate",name:"inputTaskDueDate",type:"date"}),this.labelDueDate=Xn("label",{for:"inputTaskDueDate",textContent:"Due Date:"}),this.inputTaskPriority=Xn("input",{id:"inputTaskPriority",name:"inputTaskPriority",list:"priorities",placeholder:"High/Medium/Low"}),this.datalistPriorities=Xn("datalist",{id:"priorities"}),this.highOption=Xn("option",{value:"High"}),this.mediumOption=Xn("option",{value:"Medium"}),this.lowOption=Xn("option",{value:"Low"}),this.labelPriority=Xn("label",{for:"inputTaskPriority",textContent:"Priority: "}),this.addTaskChecklistButton=Xn("button",{id:"addTaskChecklistButton",type:"button",textContent:"Add Checklist"}),this.inputTaskChecklistDiv=Xn("div",{className:"inputTaskChecklistDiv"}),this.submitButton=Xn("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.datalistPriorities.append(this.highOption,this.mediumOption,this.lowOption),this.inputTaskChecklistDiv.append(this.addTaskChecklistButton),this.formContainerOne.append(this.labelTitle,this.inputTaskTitle,this.labelDueDate,this.inputTaskDueDate,this.labelPriority,this.inputTaskPriority,this.datalistPriorities),this.formContainerTwo.append(this.labelDesc,this.inputTaskDesc,this.inputTaskChecklistDiv,this.submitButton),this.form.append(this.formContainerOne,this.formContainerTwo),e.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(t)),this.form.addEventListener("submit",this.publishData.bind(t)),this.form.addEventListener("submit",this.formFunction.bind(t)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(t)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(t))},closeModal:function(){e.remove()},publishData:function(){Kn.publish("addTask",[this.form.elements])},formFunction:function(n){n.preventDefault(),this.form.reset(),e.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((n=>n.remove())),this.checklistButtons.forEach((n=>n.remove()))},createChecklist:function(){this.inputTaskChecklistItemDiv=Xn("div"),this.inputTaskChecklist=Xn("input",{name:"inputTaskChecklist",className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=Xn("button",{className:"inputTaskChecklistDelete",textContent:"X"}),this.inputTaskChecklistItemDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.inputTaskChecklistDiv.append(this.inputTaskChecklistItemDiv),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(t))},deleteChecklistItem:function(n){n.target.parentNode.remove()}};return t.init(),e}function te(){if(document.querySelector(".formModal"))return;const n=Xn("section",{id:"projectFormSection",className:"formModal"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=Xn("span",{className:"closeModal",textContent:"Close"}),this.header=Xn("h2",{textContent:"Create a new project"}),this.form=Xn("form",{id:"projectForm"}),this.inputProjectTitle=Xn("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.labelTitle=Xn("label",{for:"inputProjectTitle",textContent:"Project Title (required):"}),this.inputProjectDesc=Xn("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.labelDesc=Xn("label",{for:"inputProjectDesc",textContent:"Desc/Notes"}),this.submitButton=Xn("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.labelTitle,this.inputProjectTitle,this.labelDesc,this.inputProjectDesc,this.submitButton),n.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(e)),this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},closeModal:function(){n.remove()},publishData:function(){Kn.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),n.remove()}};return e.init(),n}function ie(n){const e=[],t=[];for(const i of n)e.push(i.content),t.push(i.checked);return[e,t]}function re(n){localStorage.clear();let e=1;for(const t of n){localStorage.setItem(`Project: ${e};`,JSON.stringify([t.title,t.description,t.done]));let n=1;for(const i of t.taskArray)localStorage.setItem(`Project: ${e}; Task: ${n}`,JSON.stringify([i.title,i.description,i.dueDateInput,i.priority,ie(i.checklist),i.done])),n++;e++}}function oe(n){Kn.publish("addProjectDOM",ae.findWithTitle(n))}const ae=function(){let n=[];return{add(e){n=[...n,e]},remove(e){n=n.filter((n=>n.id!==e))},find:e=>n.find((n=>n.id===e)),findWithTitle:e=>n.find((n=>n.title===e)),findWithTaskId:e=>n.find((n=>n.find(e))),getTaskWithTaskId(n){return this.findWithTaskId(n).find(n)},get projectArray(){return[...n]}}}();function se([n,e]){let t;t=e||Jn([n.inputTaskName.value,n.inputTaskDesc.value,n.inputTaskDueDate.value,n.inputTaskPriority.value,[document.querySelectorAll(".inputChecklist")]]);const i=n[0].parentNode.parentNode.getAttribute("data-id"),r=ae.find(i);r.add(t),Kn.publish("addTaskDOM",r),re(ae.projectArray)}function ce(n){const e=_n([n.inputProjectTitle.value,n.inputProjectDesc.value]);ae.add(e),Kn.publish("addProjectSidebar",e.title),re(ae.projectArray)}function de(n){ae.findWithTaskId(n).remove(n),re(ae.projectArray)}function le(n){Kn.publish("editThisData",[ae.findWithTaskId(n),ae.getTaskWithTaskId(n)]),de(n),re(ae.projectArray)}function ue([n,e]){const t=ae.getTaskWithTaskId(e),i=t.findChecklistItem(n);console.log(t),i.checked?i.checked=!1:i.checked=!0,re(ae.projectArray)}function Ae(n){const e=ae.getTaskWithTaskId(n);e.done?e.done=!1:e.done=!0,Kn.publish("toggleCompleteTaskDOM",e),re(ae.projectArray)}function he(n){const e=ae.find(n);e.done?e.done=!1:e.done=!0,Kn.publish("toggleCompleteProjectDOM",e),re(ae.projectArray)}function pe(n){const e=ae.find(n).title;ae.remove(n),Kn.publish("deleteProjectSidebar",e),re(ae.projectArray)}ae.add(_n(["All Tasks"])),console.log(ae);var me=t(48),fe=t(628),be=t(463),ge=t(145),Ee=t(562),Ce=t(580),ve=t(990);function ke(n){Me();for(const e of n)De(e),"All Tasks"!==e.title&&Be(e.title)}function xe(n){Me(),De(n)}function we(n){Me(),De(n)}function ye(n){Me();for(const e of n)"All Tasks"!==e.title&&De(e)}function Be(n){const e=document.querySelector(".newProjectSidebar");if(document.getElementById(n))return;const t=Xn("div",{id:n,textContent:n});e.append(t),t.addEventListener("click",(()=>document.querySelector(".headerText").textContent="Projects")),t.addEventListener("click",(n=>Kn.publish("requireProjectForDisplay",n.target.id)))}function Te(n){document.getElementById(n).remove()}function De(n){const e=document.querySelector(".main"),t=Xn("section",{"data-id":n.id,className:"projectSection"}),i=Xn("div",{className:"projectButtonContainer"}),r=Xn("div",{className:"taskContainer"});let o,a,s,c,d,l,u=Xn("img",{src:me});"All Tasks"===n.title?(o=Xn("h2",{className:"projectHeading",textContent:""}),a=Xn("button",{className:"addTaskInProject",textContent:"Add Task"}),a.append(u)):(o=Xn("h2",{className:"projectHeading",textContent:n.title}),a=Xn("button",{className:"addTaskInProject",textContent:"Add"}),s=Xn("button",{className:"completeProjectButton",textContent:"Complete"}),d=Xn("img",{src:fe}),l=Xn("img",{src:be}),s.append(d),c=Xn("button",{className:"deleteProjectButton",textContent:"Delete"}),c.append(l),a.append(u),s.addEventListener("click",(n=>{Kn.publish("toggleCompleteProject",n.currentTarget.parentNode.parentNode.getAttribute("data-id"))})),c.addEventListener("click",(n=>{Kn.publish("deleteProject",n.currentTarget.parentNode.parentNode.getAttribute("data-id")),n.target.parentNode.parentNode.remove()}))),i.append(a,s||"",c||""),t.append(o,i,r),e.append(t),a.addEventListener("click",(function(){if(!ee())return;const n=ee(t.getAttribute("data-id"));t.append(n)})),0!==n.taskArray.length?Se(n):ze(n)}function Me(){const n=document.querySelector(".main");for(;n.querySelector("section");)n.lastChild.remove()}function Se(n){const e=document.querySelector(`[data-id="${n.id}"]`),t=e.querySelector(".taskContainer");!function(n){const e=n.querySelectorAll(".taskDiv");e&&e.forEach((n=>n.remove()))}(e);const i=n.taskArray;e.append(t);for(const n of i)t.append(Ie(n)),Fe(n);ze(n)}function Ie(n){const e=Xn("div",{className:"taskDiv","data-id":n.id}),t={taskCountdownDiv:Xn("div",{className:"countdownDiv",style:"display: none"}),init:function(){this.createElements(),this.appendElements(),this.bindEvents(),window.setInterval(this.setIntervalCountdown,1e3,n)},createElements:function(){this.taskTitle=Xn("h3",{className:"taskTitle",textContent:n.title}),this.taskDesc=Xn("p",{className:"taskDesc",textContent:n.description}),this.taskChecklist=function(n,e){const t=Xn("div",{className:"checklistDiv"}),i=Xn("p",{className:"checklistDivHeading",textContent:"Checklist:"});if(0===n.length)return i.textContent="",t;t.append(i);for(const i of n){const n=Xn("div",{className:"checkboxDiv","data-id":e.id}),r=Xn("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),o=Xn("label",{for:i.id,textContent:i.content});i.checked&&(r.checked=!0,o.style.opacity=.5),n.append(r,o),t.append(n),n.addEventListener("click",je)}return t}(n.checklist,n),this.taskDueDate=Xn("p",{className:"taskDueDate",textContent:n.dueDateMessage}),this.taskPriority=Xn("p",{className:`taskPriority ${n.priority}`,textContent:n.priority?`Priority: ${n.priority}`:""}),this.taskButtonContainer=Xn("div",{className:"taskButtonContainer"}),this.taskComplete=Xn("button",{className:"taskComplete"}),this.taskCompleteIcon=Xn("img",{src:ge}),this.taskDelete=Xn("button",{className:"deleteTask"}),this.taskDeleteIcon=Xn("img",{src:Ee}),this.taskUpdate=Xn("button",{className:"updateTask"}),this.taskUpdateIcon=Xn("img",{src:Ce}),this.taskCountdownButton=Xn("button",{className:"countdownTaskButton"}),this.taskCountdownIcon=Xn("img",{src:ve})},appendElements:function(){this.taskComplete.append(this.taskCompleteIcon),this.taskDelete.append(this.taskDeleteIcon),this.taskUpdate.append(this.taskUpdateIcon),this.taskCountdownButton.append(this.taskCountdownIcon),this.taskButtonContainer.append(this.taskComplete,this.taskDelete,this.taskUpdate,this.taskCountdownButton),e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskPriority,this.taskButtonContainer,t.taskCountdownDiv)},bindEvents:function(){this.taskComplete.addEventListener("click",(n=>Kn.publish("toggleCompleteTask",n.currentTarget.parentNode.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(n=>Kn.publish("requireEditData",n.currentTarget.parentNode.parentNode.getAttribute("data-id")))),this.taskCountdownButton.addEventListener("click",this.viewCountdown.bind(t))},deleteTaskDOM:function(n){Kn.publish("deleteTask",n.currentTarget.parentNode.parentNode.getAttribute("data-id")),n.currentTarget.parentNode.parentNode.remove()},viewCountdown:function(){this.taskCountdownButton.classList.toggle("clicked"),"none"===this.taskCountdownDiv.style.display?this.taskCountdownDiv.style.display="block":this.taskCountdownDiv.style.display="none"},setIntervalCountdown:function(n){t.taskCountdownDiv.firstChild&&t.taskCountdownDiv.firstChild.remove();const e=function(n){const e=n.countdown(),t=Xn("div",{className:"durationContainer"}),i=Xn("p",{textContent:"Years"}),r=Xn("p",{textContent:e.years}),o=Xn("div",{className:"durationContainer"}),a=Xn("p",{textContent:"Months"}),s=Xn("p",{textContent:e.months}),c=Xn("div",{className:"durationContainer"}),d=Xn("p",{textContent:"Days"}),l=Xn("p",{textContent:e.days}),u=Xn("div",{className:"durationContainer"}),A=Xn("p",{textContent:"Hours"}),h=Xn("p",{textContent:e.hours}),p=Xn("div",{className:"durationContainer"}),m=Xn("p",{textContent:"Minutes"}),f=Xn("p",{textContent:e.minutes}),b=Xn("div",{className:"durationContainer"}),g=Xn("p",{textContent:"Seconds"}),E=Xn("p",{textContent:e.seconds});t.append(i,r),o.append(a,s),c.append(d,l),u.append(A,h),p.append(m,f),b.append(g,E);const C=Xn("div");return C.append(t,o,c,u,p,b),C}(n);t.taskCountdownDiv.append(e)}};return t.init(),e}function je(n){const e=this.querySelector("input"),t=this.querySelector("label");e.checked?void 0===n.target.type&&(e.checked=!1):void 0===n.target.type&&(e.checked=!0),function(n,e){e.style.opacity=n?.5:1}(e.checked,t),Kn.publish("toggleChecklist",[e.getAttribute("data-id"),e.parentNode.getAttribute("data-id")])}function Pe([n,e]){const t=ee(n.id);document.body.append(t);const i=t.lastChild,r=t.querySelector(".inputTaskChecklistDiv"),o=t.querySelector(".closeModal");i.elements.inputTaskName.value=e.title,i.elements.inputTaskDesc.value=e.description,i.elements.inputTaskDueDate.value=e.dueDateInput,i.elements.inputTaskPriority.value=e.priority;for(const n of e.checklist){const e=Xn("div"),t=Xn("input",{className:"inputChecklist",type:"text",value:n.content,disabled:n.checked}),i=Xn("button",{className:"inputTaskChecklistDelete",textContent:"X"});e.append(t,i),r.append(e),i.addEventListener("click",a)}function a(n){n.target.parentNode.remove()}o.addEventListener("click",(()=>Kn.publish("addTask",[i,e])))}function Fe(n){const e=document.querySelector(`[data-id="${n.id}"]`),t=document.querySelector(".taskComplete"),i=e.querySelector(".updateTask"),r=e.querySelector(".countdownTaskButton"),o=e.querySelector(".checklistDiv");n.done?(e.classList.add("complete"),t.classList.add("complete"),i.classList.add("complete"),r.classList.add("complete"),o.classList.add("complete")):(i.classList.remove("complete"),t.classList.remove("complete"),r.classList.remove("complete"),o.classList.remove("complete"),e.classList.remove("complete"))}function ze(n){if("All Tasks"===n.title)return;const e=document.querySelector(`[data-id="${n.id}"]`),t=e.querySelector(".addTaskInProject"),i=e.querySelector(".completeProjectButton"),r=e.querySelector(".taskContainer");n.done?(e.classList.add("complete"),t.classList.add("complete"),i.classList.add("complete"),null!==r&&r.classList.add("complete")):(e.classList.remove("complete"),t.classList.remove("complete"),i.classList.remove("complete"),null!==r&&r.classList.remove("complete"))}Kn.subscribe("pageLoad",ke),ne.init(),function(){if(0===localStorage.length)return;const n=Object.keys(localStorage),e=[];for(let t=0;t<=n.length;t++){const i=n.filter((n=>n.slice(0,n.indexOf(";")).includes(`${t}`)));0!==i.length&&(i.sort(((n,e)=>n.length-e.length)),e.push(i))}for(let n=1;n<e[0].length;n++){const t=e[0].slice();ae.findWithTitle("All Tasks").add(Jn(JSON.parse(localStorage.getItem(t[n]))))}for(let n=1;n<e.length;n++){let t;const i=e[n].slice();for(let n=0;n<i.length;n++)0!==n?t.add(Jn(JSON.parse(localStorage.getItem(i[n])))):t=_n(JSON.parse(localStorage.getItem(i[n])));ae.add(t)}}(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar"),this.projectSidebar=document.getElementById("projectSidebar"),this.homeSidebar=document.getElementById("homeSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>Kn.publish("taskSidebarClicked",ae.findWithTitle("All Tasks")))),this.projectSidebar.addEventListener("click",(()=>Kn.publish("projectSidebarClicked",ae.projectArray))),this.homeSidebar.addEventListener("click",(()=>Kn.publish("homeSidebarClicked",ae.projectArray)))}}.init(),Kn.publish("pageLoad",ae.projectArray),Kn.subscribe("addTask",se),Kn.subscribe("deleteTask",de),Kn.subscribe("requireEditData",le),Kn.subscribe("toggleChecklist",ue),Kn.subscribe("toggleCompleteTask",Ae),Kn.subscribe("addProject",ce),Kn.subscribe("requireProjectForDisplay",oe),Kn.subscribe("toggleCompleteProject",he),Kn.subscribe("deleteProject",pe),Kn.subscribe("addTaskDOM",Se),Kn.subscribe("editThisData",Pe),Kn.subscribe("toggleCompleteTaskDOM",Fe),Kn.subscribe("addProjectDOM",we),Kn.subscribe("homeSidebarClicked",ke),Kn.subscribe("taskSidebarClicked",xe),Kn.subscribe("projectSidebarClicked",ye),Kn.subscribe("addProjectSidebar",Be),Kn.subscribe("toggleCompleteProjectDOM",ze),Kn.subscribe("deleteProjectSidebar",Te)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,