(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(15),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);s=!0);}catch(t){a=!0,o=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw o}}return i}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if(!s)return i;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),u="/*# ".concat(c," */"),l=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],u=r.base?c[0]+r.base:c[0],l=i[u]||0,d="".concat(u," ").concat(l);i[u]=l+1;var p=n(d),m={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(m)):e.push({identifier:d,updater:o(m,r),references:1}),s.push(d)}return s}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=r(t,o),u=0;u<i.length;u++){var l=n(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),s=n.n(i),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),p=n.n(d),m=n(890),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=function(t){return{title:t}},y=function(t){return{filteredTitle:t.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s{2,}/g," ").replace(/\s+/g,"")}},b=function(t){return{description:t}},v=function(t){return{dueDate:t}},k=function(t,e,n,r){return Object.assign({},h(t),y(t),b(e),v(n),function(t){return{priority:t}}(r))},C=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},T={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},j={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=C("h1",{className:"appTitle",textContent:"T O D O"}),this.task=C("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=C("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=g("Task"),this.project=C("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=C("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=C("section",{className:"projectFormDiv",style:"display: none"}),e=C("form",{id:"projectForm"}),n=C("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),r=C("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),o=C("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),i=C("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,r,o,i),t.append(e),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(j)),this.taskForm.addEventListener("submit",this.formFunction.bind(j)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(j)),this.projectForm.addEventListener("submit",this.formFunction.bind(j)),document.querySelector("#addTaskChecklistButton").addEventListener("click",this.openChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.closeChecklist.bind(j)),document.querySelector("#submitTaskChecklistButton").addEventListener("click",this.addChecklistItem)},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"},formFunction:function(t){t.preventDefault(),"taskForm"===t.target.id?this.taskForm.firstChild.reset():this.projectForm.firstChild.reset()},openChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="block",document.querySelector("#submitTaskChecklistButton").style.display="block"},closeChecklist:function(){document.querySelector("#inputTaskChecklist").style.display="none",document.querySelector("#submitTaskChecklistButton").style.display="none"},addChecklistItem:function(){T.publish("addChecklist",document.querySelector("#inputTaskChecklist").value)}};function g(t){const e=C("section",{id:`section${t}Form`,className:t,style:"display: none"}),n=C("form",{id:`form${t}`}),r=C("input",{id:`input${t}Title`,name:`input${t}Name`,type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),o=C("textarea",{id:`input${t}Desc`,name:`input${t}Desc`,placeholder:"desc/notes..."}),i=C("input",{id:`input${t}DueDate`,name:`input${t}DueDate`,type:"date"}),s=C("input",{id:`input${t}Priority`,name:`input${t}Priority`,type:"text",placeholder:"high/medium/low"}),a=C("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),c=C("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,type:"text",placeholder:"enter list here...",style:"display: none;"}),u=C("button",{id:`submit${t}ChecklistButton`,type:"button",textContent:"Add",style:"display: none;"}),l=C("button",{id:"submitButton",type:"submit",textContent:"Submit"});return n.append(r,o,i,s,a,c,u,l),e.append(n),e}const x=[],P=[];T.subscribe("addChecklist",(function(t){if(!t)return;const e={content:t,checked:!1};P.push(e)}));function A(t){console.log(t)}function E(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}`)));for(const e of t){const t=C("h3",{id:`${e.filteredTitle}`,className:"projectName",textContent:`${e.title}`}),n=C("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),r=g(`TaskIn${e.filteredTitle}`);r.addEventListener("submit",(t=>{t.preventDefault(),T.publish("addTaskInProject",r),t.target.reset()})),n.addEventListener("click",(()=>{r.style.display="block"})),document.body.append(t,n),document.body.append(r)}}const S=[];function F(){const t=document.querySelector("#projectForm").elements,e=(n=t.inputProjectTitle.value,r=t.inputProjectDesc.value,o=t.inputProjectDueDate.value,Object.assign({},h(n),y(n),b(r),v(o)));var n,r,o;e.tasks=[],S.push(e),T.publish("addProject",S)}T.subscribe("addTaskInProject",(function(t){const e=t.firstChild.elements,n=k(e[0].value,e[1].value,e[2].value,e[3].value);for(const e of S)t.className.includes(e.filteredTitle)&&e.tasks.push(n);console.log(S)}));j.init(),document.querySelector("#formTask").addEventListener("submit",(t=>{!function(){const t=document.querySelector("#formTask").elements,e=k(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value);e.checklist=P.slice(),x.push(e),T.publish("addTask",x),P.splice(0)}()})),T.subscribe("addTask",A),T.subscribe("addProject",A),T.subscribe("addProject",E),document.querySelector("#projectForm").addEventListener("submit",F),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=0;for(const n of x)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0})),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of S)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,