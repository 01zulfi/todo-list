(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(15),s=n.n(i),a=n(645),o=n.n(a)()(s());o.push([t.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: row;\n}\n\n.menuAndTitleDiv {\n  height: 100vh;\n  width: 25%;\n  background-color: silver;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  border: 1px solid black;\n}\n\n.sidebarDiv {\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\nform {\n  background-color: #fefefe;\n  padding: 0;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,UAAU;EACV,wBAAwB;EACxB,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,WAAW;EACX,WAAW;AACb;;AAEA;EACE,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,yBAAyB;EACzB,UAAU;EACV,sBAAsB;EACtB,qEAAqE;AACvE",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: row;\n}\n\n.menuAndTitleDiv {\n  height: 100vh;\n  width: 25%;\n  background-color: silver;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  border: 1px solid black;\n}\n\n.sidebarDiv {\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\nform {\n  background-color: #fefefe;\n  padding: 0;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n"],sourceRoot:""}]);const r=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(s[o]=!0)}for(var r=0;r<t.length;r++){var c=[].concat(t[r]);i&&s[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,a=[],o=!0,r=!1;try{for(n=n.call(t);!(o=(i=n.next()).done)&&(a.push(i.value),!e||a.length!==e);o=!0);}catch(t){r=!0,s=t}finally{try{o||null==n.return||n.return()}finally{if(r)throw s}}return a}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=s[1],o=s[3];if(!o)return a;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),d="/*# ".concat(c," */"),u=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[a].concat(u).concat([d]).join("\n")}return[a].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var a={},o=[],r=0;r<t.length;r++){var c=t[r],d=i.base?c[0]+i.base:c[0],u=a[d]||0,l="".concat(d," ").concat(u);a[d]=u+1;var h=n(l),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==h?(e[h].references++,e[h].updater(p)):e.push({identifier:l,updater:s(p,i),references:1}),o.push(l)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var a=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var r=n(a[o]);e[r].references--}for(var c=i(t,s),d=0;d<a.length;d++){var u=n(a[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,a=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var a=e[i]={id:i,exports:{}};return t[i](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),a=n(569),o=n.n(a),r=n(565),c=n.n(r),d=n(216),u=n.n(d),l=n(589),h=n.n(l),p=n(890),m={};m.styleTagTransform=h(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=u(),e()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const f=function(){return Math.floor(Math.random()*Date.now()).toString()},b=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:t.disabled,id:f()};e.push(n)}return e},k=function(t,e,n){const i={title:t,description:e,dueDate:n,id:f()};let s=[];return{add(t){s=[...s,t]},remove(t){s=s.filter((e=>e.id!==t))},find:t=>s.find((e=>e.id===t)),get taskArray(){return[...s]},get metaData(){return{get title(){return i.title},get description(){return i.description},get dueDate(){return i.dueDate},get id(){return i.id}}}}},A=function(t,e){const n=document.createElement(t);for(const t in e)t.toString().includes("data")?n.setAttribute(t.toString(),e[t]):n[t]=e[t];return n},v={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},C={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.menuAndTitleDiv=A("div",{className:"menuAndTitleDiv"}),this.title=A("h2",{className:"appTitle",textContent:"T O D O"}),this.menuButton=A("button",{className:"menuButton",textContent:"Menu"}),this.homeSidebar=A("div",{className:"sidebarDiv",textContent:"Home"}),this.taskSidebar=A("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=A("div",{className:"sidebarDiv",textContent:"Projects"}),this.addProjectButton=A("button",{className:"addProjectButton",textContent:"Add Project"}),this.main=A("div",{className:"main"}),this.header=A("div",{className:"header"}),this.headerText=A("h1",{className:"headerText",textContent:"Home"})},appendContent:function(){this.projectSidebar.append(this.addProjectButton),this.menuAndTitleDiv.append(this.title,this.menuButton,this.homeSidebar,this.taskSidebar,this.projectSidebar),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main)},bindEvents:function(){this.addProjectButton.addEventListener("click",this.openProjectForm)},openMenu:function(){this.menuAndTitleDiv.append(this.addProjectButton)},openProjectForm:function(){D()&&document.body.append(D())}};function g(t,e){if(document.querySelector(".formModal"))return;const n=A("section",{id:`section${t}Form`,className:"formModal"}),i={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.header=A("h2",{textContent:"Create a new task"}),this.form=A("form",{id:`form${t}`,name:e}),this.inputTaskTitle=A("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=A("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=A("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=A("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=A("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=A("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),n.append(this.header,this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(i)),this.form.addEventListener("submit",this.formFunction.bind(i)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(i)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(i))},publishData:function(){v.publish("addTask",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),n.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((t=>t.remove())),this.checklistButtons.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=A("div"),this.inputTaskChecklist=A("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=A("button",{className:`input${t}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(i))},deleteChecklistItem:function(t){t.target.parentNode.remove()}};return i.init(),n}function D(){if(document.querySelector(".formModal"))return;const t=A("section",{id:"projectFormSection",className:"formModal"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.header=A("h2",{textContent:"Create a new project"}),this.form=A("form",{id:"projectForm"}),this.inputProjectTitle=A("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=A("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=A("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=A("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.header,this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){v.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.remove()}};return e.init(),t}const E=function(){let t=[];return{add(e){t=[...t,e]},remove(e){t=t.filter((t=>t.metaData.id!==e))},find:e=>t.find((t=>t.metaData.id===e)),findWithTitle:e=>t.find((t=>t.metaData.title===e)),findWithTaskId:e=>t.find((t=>t.find(e))),getTaskWithTaskId(t){return this.findWithTaskId(t).find(t)},get projectArray(){return[...t]}}}();function T(t){const e=function(t,e,n,i,s){const a={title:t,description:e,dueDate:n,priority:i,checklist:b(s),id:f(),done:!1};return{get title(){return a.title},get description(){return a.description},get id(){return a.id},get dueDate(){return a.dueDate},get checklist(){return a.checklist},findChecklistItem:t=>a.checklist.find((e=>e.id===t)),get done(){return a.done},set done(t){a.done=t},task:a}}(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist")),n=t[0].parentNode.name,i=E.find(n);i.add(e),v.publish("addTaskDOM",i)}function y(t){const e=k(t.inputProjectTitle.value,t.inputProjectDesc.value,t.inputProjectDueDate.value);E.add(e),v.publish("addProjectDOM",e.metaData)}function x(t){E.findWithTaskId(t).remove(t)}function B(t){v.publish("editThisData",[E.findWithTaskId(t),E.getTaskWithTaskId(t)]),x(t)}function j([t,e]){const n=E.getTaskWithTaskId(e),i=n.findChecklistItem(t);console.log(n),i.checked?i.checked=!1:i.checked=!0}function S(t){const e=E.getTaskWithTaskId(t);e.done?e.done=!1:e.done=!0,v.publish("toggleCompleteTaskDOM",e)}function N(t){console.log(t)}function P(t){M(t)}function M(t){const e=A("section",{"data-id":t.id,className:"projectSection"}),n=A("h2",{className:"projectHeading",textContent:t.title}),i=A("button",{className:"addTaskInPRoject",textContent:`Add Task in ${t.title}`});e.append(n,i),document.querySelector(".main").append(e),i.addEventListener("click",(function(){if(!g())return;const t=g("Task",this.parentNode.getAttribute("data-id"));this.parentNode.append(t)}))}function w(t){const e=document.querySelector(`[data-id="${t.metaData.id}"]`);!function(t){const e=t.querySelectorAll(".taskDiv");e&&e.forEach((t=>t.remove()))}(e);const n=t.taskArray;for(const t of n)e.append(I(t))}function I(t){const e=A("div",{className:"taskDiv","data-id":t.id});return t.done?e.style.opacity=.5:e.style.opacity=1,{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=A("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=A("p",{className:"taskDesc",textContent:t.description}),this.taskChecklist=function(t,e){const n=A("div",{className:"checklistDiv"});for(const i of t){const t=A("div",{className:"checkboxDiv","data-id":e.id}),s=A("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),a=A("label",{for:i.id,textContent:i.content});i.checked&&(s.checked=!0,a.style.opacity=.5),t.append(s,a),n.append(t),t.addEventListener("click",O)}return n}(t.checklist,t),this.taskDueDate=A("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskComplete=A("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=A("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=A("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskComplete,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskComplete.addEventListener("click",(t=>v.publish("toggleCompleteTask",t.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>v.publish("requireEditData",t.target.parentNode.getAttribute("data-id"))))},deleteTaskDOM:function(t){v.publish("deleteTask",t.target.parentNode.getAttribute("data-id")),t.target.parentNode.remove()}}.init(),e}function O(t){const e=this.querySelector("input"),n=this.querySelector("label");e.checked?void 0===t.target.type&&(e.checked=!1):void 0===t.target.type&&(e.checked=!0),function(t,e){e.style.opacity=t?.5:1}(e.checked,n),v.publish("toggleChecklist",[e.getAttribute("data-id"),e.parentNode.getAttribute("data-id")])}function L([t,e]){const n=g("Task",t.metaData.id);document.body.append(n);const i=n.lastChild,s=document.getElementById("submitButtonTask");i.elements[0].value=e.title,i.elements[1].value=e.description,i.elements[2].value=e.dueDate,i.elements[3].value=e.priority;for(const t of e.checklist){const e=A("div"),n=A("input",{className:"inputChecklist",type:"text",value:t.content,disabled:t.checked}),o=A("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});e.append(n,o),i.insertBefore(e,s),o.addEventListener("click",a)}function a(t){t.target.parentNode.remove()}}function q(t){const e=document.querySelector(`[data-id="${t.id}"]`);t.done?e.style.opacity=.5:e.style.opacity=1}E.add(k("All Tasks")),console.log(E);C.init(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>v.publish("taskSidebarClicked",E.findWithTitle("All Tasks").metaData)))}}.init(),v.subscribe("addTask",T),v.subscribe("deleteTask",x),v.subscribe("requireEditData",B),v.subscribe("toggleChecklist",j),v.subscribe("toggleCompleteTask",S),v.subscribe("addProject",y),v.subscribe("addTaskDOM",N),v.subscribe("addTaskDOM",w),v.subscribe("editThisData",L),v.subscribe("toggleCompleteTaskDOM",q),v.subscribe("addProjectDOM",N),v.subscribe("addProjectDOM",M),v.subscribe("taskSidebarClicked",P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,