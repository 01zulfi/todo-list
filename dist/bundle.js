(()=>{"use strict";var e={372:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }',"",{version:3,sources:["webpack://./src/styles/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;CAED;IACG,iBAAiB,EAAE,MAAM;IACzB,8BAA8B,EAAE,MAAM;EACxC;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,SAAS;EACX;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;IACE,cAAc;IACd,gBAAgB;EAClB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;IACE,uBAAuB,EAAE,MAAM;IAC/B,SAAS,EAAE,MAAM;IACjB,iBAAiB,EAAE,MAAM;EAC3B;;EAEA;;;IAGE;;EAEF;IACE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,6BAA6B;EAC/B;;EAEA;;;IAGE;;EAEF;IACE,mBAAmB,EAAE,MAAM;IAC3B,0BAA0B,EAAE,MAAM;IAClC,iCAAiC,EAAE,MAAM;EAC3C;;EAEA;;IAEE;;EAEF;;IAEE,mBAAmB;EACrB;;EAEA;;;IAGE;;EAEF;;;IAGE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,wBAAwB;EAC1B;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,WAAW;EACb;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;;;;;IAKE,oBAAoB,EAAE,MAAM;IAC5B,eAAe,EAAE,MAAM;IACvB,iBAAiB,EAAE,MAAM;IACzB,SAAS,EAAE,MAAM;EACnB;;EAEA;;;IAGE;;EAEF;UACQ,MAAM;IACZ,iBAAiB;EACnB;;EAEA;;;IAGE;;EAEF;WACS,MAAM;IACb,oBAAoB;EACtB;;EAEA;;IAEE;;EAEF;;;;IAIE,0BAA0B;EAC5B;;EAEA;;IAEE;;EAEF;;;;IAIE,kBAAkB;IAClB,UAAU;EACZ;;EAEA;;IAEE;;EAEF;;;;IAIE,8BAA8B;EAChC;;EAEA;;IAEE;;EAEF;IACE,8BAA8B;EAChC;;EAEA;;;;;IAKE;;EAEF;IACE,sBAAsB,EAAE,MAAM;IAC9B,cAAc,EAAE,MAAM;IACtB,cAAc,EAAE,MAAM;IACtB,eAAe,EAAE,MAAM;IACvB,UAAU,EAAE,MAAM;IAClB,mBAAmB,EAAE,MAAM;EAC7B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,sBAAsB,EAAE,MAAM;IAC9B,UAAU,EAAE,MAAM;EACpB;;EAEA;;IAEE;;EAEF;;IAEE,YAAY;EACd;;EAEA;;;IAGE;;EAEF;IACE,6BAA6B,EAAE,MAAM;IACrC,oBAAoB,EAAE,MAAM;EAC9B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;;IAGE;;EAEF;IACE,0BAA0B,EAAE,MAAM;IAClC,aAAa,EAAE,MAAM;EACvB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,aAAa;EACf;;EAEA;;IAEE;;EAEF;IACE,aAAa;EACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }'],sourceRoot:""}]);const s=a},434:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;;AAEA,0BAA0B;AAC1B;;;;;;;;;;EAUE,SAAS;AACX;;AAEA,2GAA2G;AAC3G;;EAEE,gBAAgB;AAClB;;AAEA,2BAA2B;AAC3B;EACE,uBAAuB;AACzB;;AAEA,2BAA2B;AAC3B;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA,0DAA0D;AAC1D;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;AACpC;;EAEE,eAAe;EACf,cAAc;AAChB;;AAEA,yCAAyC;AACzC;;;;EAIE,aAAa;AACf;;AAEA,gGAAgG;AAChG;EACE;GACC,qBAAqB;EACtB;;EAEA;;;IAGE,qCAAqC;IACrC,uCAAuC;IACvC,sCAAsC;IACtC,gCAAgC;EAClC;AACF",sourcesContent:["/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n"],sourceRoot:""}]);const s=a},890:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(15),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\nform button {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n  display: flex;\n  flex-direction: column;\n}\n\n.projectSection h2 {\n  text-align: center;\n  font-size: 30px;\n}\n\n.projectSection.complete {\n  border: 1px solid #A5D6A7;\n  opacity: 0.9;\n}\n\n.projectButtonContainer {\n  margin: 0 auto;\n}\n\n.projectButtonContainer button {\n  font-size: 20px;\n}\n\n.countdownDiv {\n  border: 1px solid red;\n  border-radius: 5px;\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskContainer.complete {\n  pointer-events: none;\n}\n\n.taskContainer.complete div {\n  background-color: rgb(146, 197, 148, 0.07);\n}\n\n.taskDiv button {\n  background-color: #A5D6A7;\n  color: black;\n}\n\n.addTaskInProject.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.completeProjectButton.complete {\n  background-color:#00C853;\n  color: black;\n}","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,yBAAyB;EACzB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;EACd,oBAAoB;EACpB,mBAAmB;EACnB,2BAA2B;EAC3B,QAAQ;AACV;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,wCAAwC;EACxC,mBAAmB;EACnB,0CAA0C;EAC1C,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,QAAQ;EACR,uBAAuB;EACvB,wCAAwC;EACxC,UAAU;EACV,YAAY;EACZ,kBAAkB;;AAEpB;;AAEA;EACE,uBAAuB;EACvB,eAAe;EACf,kBAAkB;EAClB,cAAc;EACd,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,gCAAgC;EAChC,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA;EACE,UAAU;EACV,WAAW;EACX,uBAAuB;EACvB,aAAa;EACb,wCAAwC;EACxC,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE,wCAAwC;EACxC,uBAAuB;AACzB;;AAEA;EACE,UAAU;EACV,WAAW;AACb;;AAEA;EACE,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,kCAAkC;EAClC,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,UAAU;EACV,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,UAAU;EACV,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;EACZ,sBAAsB;EACtB,qEAAqE;EACrE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;AACV;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,WAAW;EACX,QAAQ;AACV;;AAEA;EACE,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,wCAAwC;EACxC,sBAAsB;EACtB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;EACnB,wCAAwC;EACxC,WAAW;AACb;;AAEA;EACE,wCAAwC;EACxC,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,yBAAyB;EACzB,YAAY;AACd;;AAEA;EACE,oBAAoB;EACpB,YAAY;AACd;;AAEA;EACE,wBAAwB;EACxB,YAAY;AACd",sourcesContent:["body {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #121212;\n  color: #FFFFFF;\n  overflow-x: hidden;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n  display: inline-flex;\n  align-items: center;\n  flex-direction: row-reverse;\n  gap: 3px;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.menuAndTitleDiv {\n  margin-top: 5px;\n  padding-bottom: 5px;\n  width: 95%;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.addProjectButton {\n  font-size: 20px;\n}\n\n.sidebarMain {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  font-size: 24px;\n}\n\n.newProjectSidebar {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n  background-color: rgba(255,255,255,0.07);\n  width: 95%;\n  padding: 5px;\n  border-radius: 5px;\n  \n}\n\n.newProjectSidebar div {\n  border: 1px solid black;\n  flex-wrap: wrap;\n  width: fit-content;\n  max-width: 50%;\n  border-radius: 10px;\n  padding: 10px;\n  text-align: center;\n  background-color: #37474F;\n  box-shadow: 0px 5px 10px #121212;\n  font-size: 20px;\n}\n\n.newProjectSidebar div:active {\n  background-color: #263238;\n  box-shadow: 0px 15px 20px #121212;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.selected {\n  background-color: rgba(255,255,255,0.12);\n  border: 2px solid white;\n}\n\n.header {\n  width: 95%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0,0,0,0.95);\n  gap: 5px;\n}\n\n.closeModal {\n  float: right;\n  background-color: #EF9A9A;\n  color: black;\n  padding: 10px;\n  border-radius: 5px;\n  font-size: 15px;\n}\n\n.formModal h2 {\n  background-color: #121212;\n  text-align: center;\n  padding: 5px;\n  border-radius: 5px;\n  width: 95%;\n  font-size: 30px;\n  border: 1px solid gray;\n}\n\nform {\n  font-size: 25px;\n  height: fit-content;\n  width: 95%;\n  border-radius: 5px;\n  background-color: #121212;\n  padding: 5px;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 7px;\n}\n\nform #submitButtonTask {\n  font-weight: bold;\n}\n\nform button {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n\n.formContainerOne, .formContainerTwo {\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  height: 50%;\n  gap: 6px;\n}\n\n.inputTaskChecklistDiv {\n  overflow: scroll;\n  height: 20vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.inputTaskChecklistDiv button {\n  background-color: #CE93D8;\n  color: black;\n}\n\ninput, textarea {\n  background-color: rgba(255,255,255,0.05);\n  border: 1px solid gray;\n  border-radius: 5px;\n  color: white;\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n  display: flex;\n  flex-direction: column;\n}\n\n.projectSection h2 {\n  text-align: center;\n  font-size: 30px;\n}\n\n.projectSection.complete {\n  border: 1px solid #A5D6A7;\n  opacity: 0.9;\n}\n\n.projectButtonContainer {\n  margin: 0 auto;\n}\n\n.projectButtonContainer button {\n  font-size: 20px;\n}\n\n.countdownDiv {\n  border: 1px solid red;\n  border-radius: 5px;\n}\n\n.taskContainer {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n}\n\n.taskContainer.complete {\n  pointer-events: none;\n}\n\n.taskContainer.complete div {\n  background-color: rgb(146, 197, 148, 0.07);\n}\n\n.taskDiv button {\n  background-color: #A5D6A7;\n  color: black;\n}\n\n.addTaskInProject.complete {\n  pointer-events: none;\n  opacity: 0.6;\n}\n\n.completeProjectButton.complete {\n  background-color:#00C853;\n  color: black;\n}"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}e.exports=function(e){var t,r,i=(r=4,function(e){if(Array.isArray(e))return e}(t=e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,i,o=[],a=!0,s=!1;try{for(t=t.call(e);!(a=(r=t.next()).done)&&(o.push(r.value),!n||o.length!==n);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==t.return||t.return()}finally{if(s)throw i}}return o}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],a=i[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([d]).join("\n")}return[o].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var c=e[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,u="".concat(d," ").concat(l);o[d]=l+1;var A=t(u),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(n[A].references++,n[A].updater(h)):n.push({identifier:u,updater:i(h,r),references:1}),a.push(u)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var c=r(e,i),d=0;d<o.length;d++){var l=t(o[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r=t.css,i=t.media,o=t.sourceMap;i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},451:(e,n,t)=>{e.exports=t.p+"338a897d6d3f1bad1245.svg"},628:(e,n,t)=>{e.exports=t.p+"d3c6e4d3c9d56329b167.svg"},463:(e,n,t)=>{e.exports=t.p+"3d2bcc6bc35cbb27ab06.svg"},48:(e,n,t)=>{e.exports=t.p+"feccad5f187e036aef70.svg"}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),c=t.n(s),d=t(216),l=t.n(d),u=t(589),A=t.n(u),h=t(372),p={};p.styleTagTransform=A(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=i(),p.insertStyleElement=l(),n()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var m=t(434),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=l(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var b=t(890),g={};g.styleTagTransform=A(),g.setAttributes=c(),g.insert=a().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=l(),n()(b.Z,g),b.Z&&b.Z.locals&&b.Z.locals;var E=t(451);function C(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function v(e){return C(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function y(e){C(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function w(e){if(C(1,arguments),!v(e)&&"number"!=typeof e)return!1;var n=y(e);return!isNaN(Number(n))}var k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function x(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}var B,T={date:x({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:x({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:x({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(e){return function(n,t){var r,i=t||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=i.width?String(i.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var s=e.defaultWidth,c=i.width?String(i.width):e.defaultWidth;r=e.values[c]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(n):n]}}function S(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=n.match(i);if(!o)return null;var a,s=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?j(c,(function(e){return e.test(s)})):I(c,(function(e){return e.test(s)}));a=e.valueCallback?e.valueCallback(d):d,a=t.valueCallback?t.valueCallback(a):a;var l=n.slice(s.length);return{value:a,rest:l}}}function I(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function j(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}const P={code:"en-US",formatDistance:function(e,n,t){var r,i=k[e];return r="string"==typeof i?i:1===n?i.one:i.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:T,formatRelative:function(e,n,t,r){return D[e]},localize:{ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(B.matchPattern);if(!t)return null;var r=t[0],i=e.match(B.parsePattern);if(!i)return null;var o=B.valueCallback?B.valueCallback(i[0]):i[0];o=n.valueCallback?n.valueCallback(o):o;var a=e.slice(r.length);return{value:o,rest:a}}),era:S({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:S({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:S({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:S({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:S({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function F(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function z(e,n){C(2,arguments);var t=y(e).getTime(),r=F(n);return new Date(t+r)}function N(e,n){C(2,arguments);var t=F(n);return z(e,-t)}function U(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const Y=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return U("yy"===n?r%100:r,n.length)},O=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):U(t+1,2)},L=function(e,n){return U(e.getUTCDate(),n.length)},W=function(e,n){return U(e.getUTCHours()%12||12,n.length)},q=function(e,n){return U(e.getUTCHours(),n.length)},R=function(e,n){return U(e.getUTCMinutes(),n.length)},G=function(e,n){return U(e.getUTCSeconds(),n.length)},H=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,t-3)),n.length)};var Q=864e5;function X(e){C(1,arguments);var n=1,t=y(e),r=t.getUTCDay(),i=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function Z(e){C(1,arguments);var n=y(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var i=X(r),o=new Date(0);o.setUTCFullYear(t,0,4),o.setUTCHours(0,0,0,0);var a=X(o);return n.getTime()>=i.getTime()?t+1:n.getTime()>=a.getTime()?t:t-1}function $(e){C(1,arguments);var n=Z(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=X(t);return r}var J=6048e5;function V(e,n){C(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.weekStartsOn,o=null==i?0:F(i),a=null==t.weekStartsOn?o:F(t.weekStartsOn);if(!(a>=0&&a<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=y(e),c=s.getUTCDay(),d=(c<a?7:0)+c-a;return s.setUTCDate(s.getUTCDate()-d),s.setUTCHours(0,0,0,0),s}function _(e,n){C(1,arguments);var t=y(e,n),r=t.getUTCFullYear(),i=n||{},o=i.locale,a=o&&o.options&&o.options.firstWeekContainsDate,s=null==a?1:F(a),c=null==i.firstWeekContainsDate?s:F(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(r+1,0,c),d.setUTCHours(0,0,0,0);var l=V(d,n),u=new Date(0);u.setUTCFullYear(r,0,c),u.setUTCHours(0,0,0,0);var A=V(u,n);return t.getTime()>=l.getTime()?r+1:t.getTime()>=A.getTime()?r:r-1}function K(e,n){C(1,arguments);var t=n||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:F(i),a=null==t.firstWeekContainsDate?o:F(t.firstWeekContainsDate),s=_(e,n),c=new Date(0);c.setUTCFullYear(s,0,a),c.setUTCHours(0,0,0,0);var d=V(c,n);return d}var ee=6048e5;function ne(e,n){var t=e>0?"-":"+",r=Math.abs(e),i=Math.floor(r/60),o=r%60;if(0===o)return t+String(i);var a=n||"";return t+String(i)+a+U(o,2)}function te(e,n){return e%60==0?(e>0?"-":"+")+U(Math.abs(e)/60,2):re(e,n)}function re(e,n){var t=n||"",r=e>0?"-":"+",i=Math.abs(e);return r+U(Math.floor(i/60),2)+t+U(i%60,2)}const ie={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});case"GGGG":default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),i=r>0?r:1-r;return t.ordinalNumber(i,{unit:"year"})}return Y(e,n)},Y:function(e,n,t,r){var i=_(e,r),o=i>0?i:1-i;return"YY"===n?U(o%100,2):"Yo"===n?t.ordinalNumber(o,{unit:"year"}):U(o,n.length)},R:function(e,n){return U(Z(e),n.length)},u:function(e,n){return U(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return U(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return O(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var i=function(e,n){C(1,arguments);var t=y(e),r=V(t,n).getTime()-K(t,n).getTime();return Math.round(r/ee)+1}(e,r);return"wo"===n?t.ordinalNumber(i,{unit:"week"}):U(i,n.length)},I:function(e,n,t){var r=function(e){C(1,arguments);var n=y(e),t=X(n).getTime()-$(n).getTime();return Math.round(t/J)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):U(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):L(e,n)},D:function(e,n,t){var r=function(e){C(1,arguments);var n=y(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),i=t-r;return Math.floor(i/Q)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):U(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});case"EEEE":default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var i=e.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(o);case"ee":return U(o,2);case"eo":return t.ordinalNumber(o,{unit:"day"});case"eee":return t.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(i,{width:"short",context:"formatting"});case"eeee":default:return t.day(i,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var i=e.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(o);case"cc":return U(o,n.length);case"co":return t.ordinalNumber(o,{unit:"day"});case"ccc":return t.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(i,{width:"narrow",context:"standalone"});case"cccccc":return t.day(i,{width:"short",context:"standalone"});case"cccc":default:return t.day(i,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),i=0===r?7:r;switch(n){case"i":return String(i);case"ii":return U(i,n.length);case"io":return t.ordinalNumber(i,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});case"iiii":default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,i=e.getUTCHours();switch(r=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,i=e.getUTCHours();switch(r=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return W(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):q(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):U(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):U(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):R(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):G(e,n)},S:function(e,n){return H(e,n)},X:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(n){case"X":return te(i);case"XXXX":case"XX":return re(i);case"XXXXX":case"XXX":default:return re(i,":")}},x:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return te(i);case"xxxx":case"xx":return re(i);case"xxxxx":case"xxx":default:return re(i,":")}},O:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+ne(i,":");case"OOOO":default:return"GMT"+re(i,":")}},z:function(e,n,t,r){var i=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+ne(i,":");case"zzzz":default:return"GMT"+re(i,":")}},t:function(e,n,t,r){var i=r._originalDate||e;return U(Math.floor(i.getTime()/1e3),n.length)},T:function(e,n,t,r){return U((r._originalDate||e).getTime(),n.length)}};function oe(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});case"PPPP":default:return n.date({width:"full"})}}function ae(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});case"pppp":default:return n.time({width:"full"})}}const se={p:ae,P:function(e,n){var t,r=e.match(/(P+)(p+)?/),i=r[1],o=r[2];if(!o)return oe(e,n);switch(i){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;case"PPPP":default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",oe(i,n)).replace("{{time}}",ae(o,n))}};function ce(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var de=["D","DD"],le=["YY","YYYY"];function ue(e){return-1!==de.indexOf(e)}function Ae(e){return-1!==le.indexOf(e)}function he(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var pe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,me=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fe=/^'([^]*?)'?$/,be=/''/g,ge=/[a-zA-Z]/;function Ee(e){return e.match(fe)[1].replace(be,"'")}function Ce(e,n){C(2,arguments);var t=y(e),r=y(n),i=t.getTime()-r.getTime();return i<0?-1:i>0?1:i}function ve(e,n){C(2,arguments);var t=y(e),r=y(n);return t.getFullYear()-r.getFullYear()}function ye(e,n){C(2,arguments);var t=y(e),r=y(n),i=Ce(t,r),o=Math.abs(ve(t,r));t.setFullYear(1584),r.setFullYear(1584);var a=Ce(t,r)===-i,s=i*(o-Number(a));return 0===s?0:s}function we(e,n){C(2,arguments);var t=y(e),r=y(n),i=t.getFullYear()-r.getFullYear(),o=t.getMonth()-r.getMonth();return 12*i+o}function ke(e){C(1,arguments);var n=y(e);return n.setHours(23,59,59,999),n}function xe(e){C(1,arguments);var n=y(e),t=n.getMonth();return n.setFullYear(n.getFullYear(),t+1,0),n.setHours(23,59,59,999),n}function Be(e){C(1,arguments);var n=y(e);return ke(n).getTime()===xe(n).getTime()}function Te(e,n){C(2,arguments);var t,r=y(e),i=y(n),o=Ce(r,i),a=Math.abs(we(r,i));if(a<1)t=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-o*a);var s=Ce(r,i)===-o;Be(y(e))&&1===a&&1===Ce(e,i)&&(s=!1),t=o*(a-Number(s))}return 0===t?0:t}function De(e){C(1,arguments);var n=y(e);return n.setHours(0,0,0,0),n}var Me=864e5;function Se(e,n){C(2,arguments);var t=De(e),r=De(n),i=t.getTime()-ce(t),o=r.getTime()-ce(r);return Math.round((i-o)/Me)}function Ie(e,n){var t=e.getFullYear()-n.getFullYear()||e.getMonth()-n.getMonth()||e.getDate()-n.getDate()||e.getHours()-n.getHours()||e.getMinutes()-n.getMinutes()||e.getSeconds()-n.getSeconds()||e.getMilliseconds()-n.getMilliseconds();return t<0?-1:t>0?1:t}function je(e,n){C(2,arguments);var t=y(e),r=y(n),i=Ie(t,r),o=Math.abs(Se(t,r));t.setDate(t.getDate()-i*o);var a=Number(Ie(t,r)===-i),s=i*(o-a);return 0===s?0:s}Math.pow(10,8);var Pe=36e5;function Fe(e,n){return C(2,arguments),y(e).getTime()-y(n).getTime()}var ze={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}};function Ne(e){return e?ze[e]:ze.trunc}function Ue(e,n,t){C(2,arguments);var r=Fe(e,n)/Pe;return Ne(null==t?void 0:t.roundingMethod)(r)}function Ye(e,n,t){C(2,arguments);var r=Fe(e,n)/6e4;return Ne(null==t?void 0:t.roundingMethod)(r)}function Oe(e,n,t){C(2,arguments);var r=Fe(e,n)/1e3;return Ne(null==t?void 0:t.roundingMethod)(r)}function Le(e,n){C(2,arguments);var t=y(e),r=F(n);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}function We(e,n){C(2,arguments);var t=F(n);return Le(e,-t)}function qe(e,n){C(2,arguments);var t=y(e),r=F(n);if(isNaN(r))return new Date(NaN);if(!r)return t;var i=t.getDate(),o=new Date(t.getTime());o.setMonth(t.getMonth()+r+1,0);var a=o.getDate();return i>=a?o:(t.setFullYear(o.getFullYear(),o.getMonth(),i),t)}function Re(e,n){C(2,arguments);var t=F(n);return qe(e,-t)}function Ge(e,n){if(C(2,arguments),!n||"object"!=typeof n)return new Date(NaN);var t=n.years?F(n.years):0,r=n.months?F(n.months):0,i=n.weeks?F(n.weeks):0,o=n.days?F(n.days):0,a=n.hours?F(n.hours):0,s=n.minutes?F(n.minutes):0,c=n.seconds?F(n.seconds):0,d=Re(e,r+12*t),l=We(d,o+7*i),u=s+60*a,A=c+60*u,h=1e3*A,p=new Date(l.getTime()-h);return p}const He=function(e,n){const t=document.createElement(e);for(const e in n)e.toString().includes("data")?t.setAttribute(e.toString(),n[e]):t[e]=n[e];return t},Qe=function(){return Math.floor(Math.random()*Date.now()).toString()},Xe=function([e,n]){const t=[];if(n){for(let r=0;r<e.length;r++){const i={content:e[r],checked:n[r],id:Qe()};t.push(i)}return t}const r=Array.from(e);for(const e of r){if(""===e.value)continue;const n={content:e.value,checked:e.disabled,id:Qe()};t.push(n)}return t};function Ze(e){if(!e)return;const n=e.split(/\D/);return new Date(n[0],--n[1],n[2])}const $e=function([e,n,t,r,i,o]){const a=t?function(e,n,t){C(2,arguments);var r=String(n),i=t||{},o=i.locale||P,a=o.options&&o.options.firstWeekContainsDate,s=null==a?1:F(a),c=null==i.firstWeekContainsDate?s:F(i.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=o.options&&o.options.weekStartsOn,l=null==d?0:F(d),u=null==i.weekStartsOn?l:F(i.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!o.localize)throw new RangeError("locale must contain localize property");if(!o.formatLong)throw new RangeError("locale must contain formatLong property");var A=y(e);if(!w(A))throw new RangeError("Invalid time value");var h=ce(A),p=N(A,h),m={firstWeekContainsDate:c,weekStartsOn:u,locale:o,_originalDate:A};return r.match(me).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,se[n])(e,o.formatLong,m):e})).join("").match(pe).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Ee(t);var a=ie[r];if(a)return!i.useAdditionalWeekYearTokens&&Ae(t)&&he(t,n,e),!i.useAdditionalDayOfYearTokens&&ue(t)&&he(t,n,e),a(p,t,o.localize,m);if(r.match(ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(Ze(t),"yyyy: do MMM, EEEE"):"",s=Ce(Ze(t),new Date),c={title:e,description:n,dueDate:a,priority:r||"",checklist:Xe(i),id:Qe(),done:!!o};return{get title(){return c.title},get description(){return c.description},get id(){return c.id},get dueDate(){return c.dueDate},get dueDateInput(){return t},get dueDateMessage(){return-1===s?`${c.dueDate} (Due date already passed)`:c.dueDate},countdown:()=>t&&-1!==s?function(e){var n=e.start,t=e.end;C(1,arguments);var r=y(n),i=y(t);if(!w(r))throw new RangeError("Start Date is invalid");if(!w(i))throw new RangeError("End Date is invalid");var o={years:0,months:0,days:0,hours:0,minutes:0,seconds:0},a=Ce(r,i);o.years=Math.abs(ye(r,i));var s=Ge(r,{years:a*o.years});o.months=Math.abs(Te(s,i));var c=Ge(s,{months:a*o.months});o.days=Math.abs(je(c,i));var d=Ge(c,{days:a*o.days});o.hours=Math.abs(Ue(d,i));var l=Ge(d,{hours:a*o.hours});o.minutes=Math.abs(Ye(l,i));var u=Ge(l,{minutes:a*o.minutes});return o.seconds=Math.abs(Oe(u,i)),o}({start:new Date,end:Ze(`${t}`)}):{years:0,months:0,days:0,hours:0,minutes:0,seconds:0},get checklist(){return c.checklist},get priority(){return c.priority},findChecklistItem:e=>c.checklist.find((n=>n.id===e)),get done(){return c.done},set done(e){c.done=e}}},Je=function([e,n,t]){const r={title:e,description:n,done:!!t,id:Qe()};let i=[];return{add(e){i=[...i,e]},remove(e){i=i.filter((n=>n.id!==e))},find:e=>i.find((n=>n.id===e)),get taskArray(){return[...i]},get title(){return r.title},get description(){return r.description},get id(){return r.id},get done(){return r.done},set done(e){r.done=e}}},Ve={events:{},publish:function(e,n){this.events[e]&&this.events[e].forEach((e=>e(n)))},subscribe:function(e,n){Array.isArray(this.events[e])||(this.events[e]=[]),this.events[e].push(n)}},_e={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.menuAndTitleDiv=He("div",{className:"menuAndTitleDiv"}),this.appTitleDiv=He("div"),this.title=He("h2",{className:"appTitle",textContent:"T O D O"}),this.sidebarMain=He("div",{className:"sidebarMain"}),this.homeSidebar=He("div",{className:"sidebarDiv selected",id:"homeSidebar",textContent:"Home"}),this.taskSidebar=He("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=He("div",{className:"sidebarDiv",id:"projectSidebar",textContent:"Projects"}),this.addProjectButton=He("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectAddIcon=He("img",{src:E}),this.newProjectSidebar=He("div",{className:"newProjectSidebar"}),this.main=He("div",{className:"main"}),this.header=He("div",{className:"header"}),this.headerText=He("h1",{className:"headerText",textContent:"Home"})},appendContent:function(){this.addProjectButton.append(this.projectAddIcon),this.appTitleDiv.append(this.title),this.sidebarMain.append(this.homeSidebar,this.taskSidebar,this.projectSidebar),this.menuAndTitleDiv.append(this.appTitleDiv,this.sidebarMain,this.addProjectButton,this.newProjectSidebar),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main)},bindEvents:function(){this.homeSidebar.addEventListener("click",this.changeHeader.bind(_e)),this.taskSidebar.addEventListener("click",this.changeHeader.bind(_e)),this.sidebarMain.addEventListener("click",this.toggleSelected.bind(_e)),this.newProjectSidebar.addEventListener("click",this.toggleSelected.bind(_e)),this.projectSidebar.addEventListener("click",this.changeHeader.bind(_e)),this.addProjectButton.addEventListener("click",this.openProjectForm)},changeHeader:function(e){this.headerText.textContent=e.target.textContent},toggleSelected:function(e){"homeSidebar"===e.target.id&&(this.homeSidebar.classList.add("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.remove("selected")),"taskSidebar"===e.target.id&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.add("selected"),this.projectSidebar.classList.remove("selected")),("projectSidebar"===e.target.id||e.target.parentNode.classList.contains("newProjectSidebar"))&&(this.homeSidebar.classList.remove("selected"),this.taskSidebar.classList.remove("selected"),this.projectSidebar.classList.add("selected"))},openProjectForm:function(){en()&&document.body.append(en())}};function Ke(e){if(document.querySelector(".formModal"))return;const n=He("section",{id:"sectionTaskForm",className:"formModal"}),t={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=He("span",{className:"closeModal",textContent:"Close"}),this.header=He("h2",{textContent:"Create a new task"}),this.form=He("form",{id:"formTask","data-id":e}),this.formContainerOne=He("div",{className:"formContainerOne"}),this.formContainerTwo=He("div",{className:"formContainerTwo"}),this.inputTaskTitle=He("input",{id:"inputTaskTitle",name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.labelTitle=He("label",{for:"inputTaskTitle",textContent:"Task Title (required):"}),this.inputTaskDesc=He("textarea",{id:"inputTaskDesc",name:"inputTaskDesc",placeholder:"desc/notes...",maxLength:"500"}),this.labelDesc=He("label",{for:"inputTaskDesc",textContent:"Desc/Notes:"}),this.inputTaskDueDate=He("input",{id:"inputTaskDueDate",name:"inputTaskDueDate",type:"date"}),this.labelDueDate=He("label",{for:"inputTaskDueDate",textContent:"Due Date:"}),this.inputTaskPriority=He("input",{id:"inputTaskPriority",name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.labelPriority=He("label",{for:"inputTaskPriority",textContent:"Priority: "}),this.addTaskChecklistButton=He("button",{id:"addTaskChecklistButton",type:"button",textContent:"Add Checklist"}),this.inputTaskChecklistDiv=He("div",{className:"inputTaskChecklistDiv"}),this.submitButton=He("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.inputTaskChecklistDiv.append(this.addTaskChecklistButton),this.formContainerOne.append(this.labelTitle,this.inputTaskTitle,this.labelDueDate,this.inputTaskDueDate,this.labelPriority,this.inputTaskPriority),this.formContainerTwo.append(this.labelDesc,this.inputTaskDesc,this.inputTaskChecklistDiv,this.submitButton),this.form.append(this.formContainerOne,this.formContainerTwo),n.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(t)),this.form.addEventListener("submit",this.publishData.bind(t)),this.form.addEventListener("submit",this.formFunction.bind(t)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(t)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(t))},closeModal:function(){n.remove()},publishData:function(){Ve.publish("addTask",[this.form.elements])},formFunction:function(e){e.preventDefault(),this.form.reset(),n.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((e=>e.remove())),this.checklistButtons.forEach((e=>e.remove()))},createChecklist:function(){this.inputTaskChecklistItemDiv=He("div"),this.inputTaskChecklist=He("input",{name:"inputTaskChecklist",className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=He("button",{className:"inputTaskChecklistDelete",textContent:"X"}),this.inputTaskChecklistItemDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.inputTaskChecklistDiv.append(this.inputTaskChecklistItemDiv),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(t))},deleteChecklistItem:function(e){e.target.parentNode.remove()}};return t.init(),n}function en(){if(document.querySelector(".formModal"))return;const e=He("section",{id:"projectFormSection",className:"formModal"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.closeButton=He("span",{className:"closeModal",textContent:"Close"}),this.header=He("h2",{textContent:"Create a new project"}),this.form=He("form",{id:"projectForm"}),this.inputProjectTitle=He("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.labelTitle=He("label",{for:"inputProjectTitle",textContent:"Project Title (required):"}),this.inputProjectDesc=He("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.labelDesc=He("label",{for:"inputProjectDesc",textContent:"Desc/Notes"}),this.submitButton=He("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.labelTitle,this.inputProjectTitle,this.labelDesc,this.inputProjectDesc,this.submitButton),e.append(this.closeButton,this.header,this.form)},bindEvents:function(){this.closeButton.addEventListener("click",this.closeModal.bind(n)),this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n))},closeModal:function(){e.remove()},publishData:function(){Ve.publish("addProject",this.form.elements)},formFunction:function(n){n.preventDefault(),this.form.reset(),e.remove()}};return n.init(),e}function nn(e){const n=[],t=[];for(const r of e)n.push(r.content),t.push(r.checked);return[n,t]}function tn(e){localStorage.clear();let n=1;for(const t of e){localStorage.setItem(`Project: ${n};`,JSON.stringify([t.title,t.description,t.done]));let e=1;for(const r of t.taskArray)localStorage.setItem(`Project: ${n}; Task: ${e}`,JSON.stringify([r.title,r.description,r.dueDateInput,r.priority,nn(r.checklist),r.done])),e++;n++}}function rn(e){Ve.publish("addProjectDOM",on.findWithTitle(e))}const on=function(){let e=[];return{add(n){e=[...e,n]},remove(n){e=e.filter((e=>e.id!==n))},find:n=>e.find((e=>e.id===n)),findWithTitle:n=>e.find((e=>e.title===n)),findWithTaskId:n=>e.find((e=>e.find(n))),getTaskWithTaskId(e){return this.findWithTaskId(e).find(e)},get projectArray(){return[...e]}}}();function an([e,n]){let t;t=n||$e([e.inputTaskName.value,e.inputTaskDesc.value,e.inputTaskDueDate.value,e.inputTaskPriority.value,[document.querySelectorAll(".inputChecklist")]]);const r=e[0].parentNode.parentNode.getAttribute("data-id"),i=on.find(r);i.add(t),Ve.publish("addTaskDOM",i),tn(on.projectArray)}function sn(e){const n=Je([e.inputProjectTitle.value,e.inputProjectDesc.value]);on.add(n),Ve.publish("addProjectSidebar",n.title),tn(on.projectArray)}function cn(e){on.findWithTaskId(e).remove(e),tn(on.projectArray)}function dn(e){Ve.publish("editThisData",[on.findWithTaskId(e),on.getTaskWithTaskId(e)]),cn(e),tn(on.projectArray)}function ln([e,n]){const t=on.getTaskWithTaskId(n),r=t.findChecklistItem(e);console.log(t),r.checked?r.checked=!1:r.checked=!0,tn(on.projectArray)}function un(e){const n=on.getTaskWithTaskId(e);n.done?n.done=!1:n.done=!0,Ve.publish("toggleCompleteTaskDOM",n),tn(on.projectArray)}function An(e){const n=on.find(e);n.done?n.done=!1:n.done=!0,Ve.publish("toggleCompleteProjectDOM",n),tn(on.projectArray)}function hn(e){const n=on.find(e).title;on.remove(e),Ve.publish("deleteProjectSidebar",n),tn(on.projectArray)}on.add(Je(["All Tasks"])),console.log(on);var pn=t(48),mn=t(628),fn=t(463);function bn(e){kn();for(const n of e)wn(n),"All Tasks"!==n.title&&vn(n.title)}function gn(e){kn(),wn(e)}function En(e){kn(),wn(e)}function Cn(e){kn();for(const n of e)"All Tasks"!==n.title&&wn(n)}function vn(e){const n=document.querySelector(".newProjectSidebar");if(document.getElementById(e))return;const t=He("div",{id:e,textContent:e});n.append(t),t.addEventListener("click",(()=>document.querySelector(".headerText").textContent="Projects")),t.addEventListener("click",(e=>Ve.publish("requireProjectForDisplay",e.target.id)))}function yn(e){document.getElementById(e).remove()}function wn(e){const n=document.querySelector(".main"),t=He("section",{"data-id":e.id,className:"projectSection"}),r=He("div",{className:"projectButtonContainer"});let i,o,a,s,c,d,l=He("img",{src:pn});"All Tasks"===e.title?(i=He("h2",{className:"projectHeading",textContent:""}),o=He("button",{className:"addTaskInProject",textContent:"Add Task"}),o.append(l)):(i=He("h2",{className:"projectHeading",textContent:e.title}),o=He("button",{className:"addTaskInProject",textContent:"Add"}),a=He("button",{className:"completeProjectButton",textContent:"Complete"}),c=He("img",{src:mn}),d=He("img",{src:fn}),a.append(c),s=He("button",{className:"deleteProjectButton",textContent:"Delete"}),s.append(d),o.append(l),a.addEventListener("click",(e=>{Ve.publish("toggleCompleteProject",e.target.parentNode.parentNode.getAttribute("data-id"))})),s.addEventListener("click",(e=>{Ve.publish("deleteProject",e.target.parentNode.parentNode.getAttribute("data-id")),e.target.parentNode.parentNode.remove()}))),r.append(o,a||"",s||""),t.append(i,r),n.append(t),o.addEventListener("click",(function(){if(!Ke())return;const e=Ke(this.parentNode.getAttribute("data-id"));this.parentNode.append(e)})),0!==e.taskArray.length?xn(e):Sn(e)}function kn(){const e=document.querySelector(".main");for(;e.querySelector("section");)e.lastChild.remove()}function xn(e){const n=document.querySelector(`[data-id="${e.id}"]`),t=He("div",{className:"taskContainer"});!function(e){const n=e.querySelectorAll(".taskDiv");n&&n.forEach((e=>e.remove()))}(n);const r=e.taskArray;for(const e of r)t.append(Bn(e));n.append(t),Sn(e)}function Bn(e){const n=He("div",{className:"taskDiv","data-id":e.id});e.done?n.style.opacity=.5:n.style.opacity=1;const t={taskCountdownDiv:He("div",{className:"countdownDiv",style:"display: none"}),init:function(){this.createElements(),this.appendElements(),this.bindEvents(),window.setInterval(this.setIntervalCountdown,1e3,e)},createElements:function(){this.taskTitle=He("h4",{className:"taskTitle",textContent:e.title}),this.taskDesc=He("p",{className:"taskDesc",textContent:e.description}),this.taskChecklist=function(e,n){const t=He("div",{className:"checklistDiv"});for(const r of e){const e=He("div",{className:"checkboxDiv","data-id":n.id}),i=He("input",{type:"checkbox",id:r.id,"data-id":r.id,"pointer-events":"none"}),o=He("label",{for:r.id,textContent:r.content});r.checked&&(i.checked=!0,o.style.opacity=.5),e.append(i,o),t.append(e),e.addEventListener("click",Tn)}return t}(e.checklist,e),this.taskDueDate=He("p",{className:"taskDueDate",textContent:e.dueDateMessage}),this.taskPriority=He("p",{className:"taskPriority",textContent:e.priority?`Priority: ${e.priority}`:""}),this.taskComplete=He("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=He("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=He("button",{className:"updateTask",textContent:"Update Task"}),this.taskCountdownButton=He("button",{className:"countdownTaskButton",textContent:"View Countdown"})},appendElements:function(){n.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskPriority,this.taskComplete,this.taskDelete,this.taskUpdate,this.taskCountdownButton,t.taskCountdownDiv)},bindEvents:function(){this.taskComplete.addEventListener("click",(e=>Ve.publish("toggleCompleteTask",e.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(e=>Ve.publish("requireEditData",e.target.parentNode.getAttribute("data-id")))),this.taskCountdownButton.addEventListener("click",this.viewCountdown.bind(t))},deleteTaskDOM:function(e){Ve.publish("deleteTask",e.target.parentNode.getAttribute("data-id")),e.target.parentNode.remove()},viewCountdown:function(){"none"===this.taskCountdownDiv.style.display?this.taskCountdownDiv.style.display="block":this.taskCountdownDiv.style.display="none"},setIntervalCountdown:function(e){t.taskCountdownDiv.firstChild&&t.taskCountdownDiv.firstChild.remove();const n=function(e){const n=e.countdown(),t=He("p",{textContent:`Years: ${n.years}`}),r=He("p",{textContent:`Months: ${n.months}`}),i=He("p",{textContent:`Days: ${n.days}`}),o=He("p",{textContent:`Hours: ${n.hours}`}),a=He("p",{textContent:`Minutes: ${n.minutes}`}),s=He("p",{textContent:`Seconds: ${n.seconds}`}),c=He("div");return c.append(t,r,i,o,a,s),c}(e);t.taskCountdownDiv.append(n)}};return t.init(),n}function Tn(e){const n=this.querySelector("input"),t=this.querySelector("label");n.checked?void 0===e.target.type&&(n.checked=!1):void 0===e.target.type&&(n.checked=!0),function(e,n){n.style.opacity=e?.5:1}(n.checked,t),Ve.publish("toggleChecklist",[n.getAttribute("data-id"),n.parentNode.getAttribute("data-id")])}function Dn([e,n]){const t=Ke(e.id);document.body.append(t);const r=t.lastChild,i=t.querySelector(".inputTaskChecklistDiv"),o=t.querySelector(".closeModal");r.elements.inputTaskName.value=n.title,r.elements.inputTaskDesc.value=n.description,r.elements.inputTaskDueDate.value=n.dueDateInput,r.elements.inputTaskPriority.value=n.priority;for(const e of n.checklist){const n=He("div"),t=He("input",{className:"inputChecklist",type:"text",value:e.content,disabled:e.checked}),r=He("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});n.append(t,r),i.append(n),r.addEventListener("click",a)}function a(e){e.target.parentNode.remove()}o.addEventListener("click",(()=>Ve.publish("addTask",[r,n])))}function Mn(e){const n=document.querySelector(`[data-id="${e.id}"]`);e.done?n.style.opacity=.5:n.style.opacity=1}function Sn(e){if("All Tasks"===e.title)return;const n=document.querySelector(`[data-id="${e.id}"]`),t=n.querySelector(".addTaskInProject"),r=n.querySelector(".completeProjectButton"),i=n.querySelector(".taskContainer");e.done?(n.classList.add("complete"),t.classList.add("complete"),r.classList.add("complete"),null!==i&&i.classList.add("complete")):(n.classList.remove("complete"),t.classList.remove("complete"),r.classList.remove("complete"),null!==i&&i.classList.remove("complete"))}Ve.subscribe("pageLoad",bn),_e.init(),function(){if(0===localStorage.length)return;const e=Object.keys(localStorage),n=[];for(let t=0;t<=e.length;t++){const r=e.filter((e=>e.slice(0,e.indexOf(";")).includes(`${t}`)));0!==r.length&&(r.sort(((e,n)=>e.length-n.length)),n.push(r))}for(let e=1;e<n[0].length;e++){const t=n[0].slice();on.findWithTitle("All Tasks").add($e(JSON.parse(localStorage.getItem(t[e]))))}for(let e=1;e<n.length;e++){let t;const r=n[e].slice();for(let e=0;e<r.length;e++)0!==e?t.add($e(JSON.parse(localStorage.getItem(r[e])))):t=Je(JSON.parse(localStorage.getItem(r[e])));on.add(t)}}(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar"),this.projectSidebar=document.getElementById("projectSidebar"),this.homeSidebar=document.getElementById("homeSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>Ve.publish("taskSidebarClicked",on.findWithTitle("All Tasks")))),this.projectSidebar.addEventListener("click",(()=>Ve.publish("projectSidebarClicked",on.projectArray))),this.homeSidebar.addEventListener("click",(()=>Ve.publish("homeSidebarClicked",on.projectArray)))}}.init(),Ve.publish("pageLoad",on.projectArray),Ve.subscribe("addTask",an),Ve.subscribe("deleteTask",cn),Ve.subscribe("requireEditData",dn),Ve.subscribe("toggleChecklist",ln),Ve.subscribe("toggleCompleteTask",un),Ve.subscribe("addProject",sn),Ve.subscribe("requireProjectForDisplay",rn),Ve.subscribe("toggleCompleteProject",An),Ve.subscribe("deleteProject",hn),Ve.subscribe("addTaskDOM",xn),Ve.subscribe("editThisData",Dn),Ve.subscribe("toggleCompleteTaskDOM",Mn),Ve.subscribe("addProjectDOM",En),Ve.subscribe("homeSidebarClicked",bn),Ve.subscribe("taskSidebarClicked",gn),Ve.subscribe("projectSidebarClicked",Cn),Ve.subscribe("addProjectSidebar",vn),Ve.subscribe("toggleCompleteProjectDOM",Sn),Ve.subscribe("deleteProjectSidebar",yn)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,