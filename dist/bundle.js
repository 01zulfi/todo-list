(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),s=n.n(i),r=n(645),o=n.n(r)()(s());o.push([t.id,"* {\n  border: 1px solid purple;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,wBAAwB;AAC1B",sourcesContent:["* {\n  border: 1px solid purple;\n}\n"],sourceRoot:""}]);const a=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var s={};if(i)for(var r=0;r<this.length;r++){var o=this[r][0];null!=o&&(s[o]=!0)}for(var a=0;a<t.length;a++){var u=[].concat(t[a]);i&&s[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,s=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,r=[],o=!0,a=!1;try{for(n=n.call(t);!(o=(i=n.next()).done)&&(r.push(i.value),!e||r.length!==e);o=!0);}catch(t){a=!0,s=t}finally{try{o||null==n.return||n.return()}finally{if(a)throw s}}return r}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=s[1],o=s[3];if(!o)return r;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(u," */"),d=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[r].concat(d).concat([c]).join("\n")}return[r].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var r={},o=[],a=0;a<t.length;a++){var u=t[a],c=i.base?u[0]+i.base:u[0],d=r[c]||0,l="".concat(c," ").concat(d);r[c]=d+1;var p=n(l),h={css:u[1],media:u[2],sourceMap:u[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:l,updater:s(h,i),references:1}),o.push(l)}return o}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var r=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var a=n(r[o]);e[a].references--}for(var u=i(t,s),c=0;c<r.length;c++){var d=n(r[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}r=u}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,s=n.media,r=n.sourceMap;s?t.setAttribute("media",s):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={id:i,exports:{}};return t[i](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),i=n(795),s=n.n(i),r=n(569),o=n.n(r),a=n(565),u=n.n(a),c=n(216),d=n.n(c),l=n(589),p=n.n(l),h=n(890),f={};f.styleTagTransform=p(),f.setAttributes=u(),f.insert=o().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=d(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;const m=function(t){const e=[],n=Array.from(t);for(const t of n){if(""===t.value)continue;const n={content:t.value,checked:!1};e.push(n)}return e},b=function(t,e,n,i,s){const r={title:t,description:e,dueDate:n,priority:i,checklist:m(s),id:Date.now().toString(),done:!1};return{get title(){return r.title},set title(t){r.title=t},get description(){return r.description},get id(){return r.id},get dueDate(){return n},task:r}},k=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},v={events:{},publish:function(t,e){this.events[t]&&this.events[t].forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events[t])||(this.events[t]=[]),this.events[t].push(e)}},y={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=k("h1",{className:"appTitle",textContent:"T O D O"}),this.task=k("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=k("button",{className:"addTaskButton",textContent:"Add Task"}),this.taskForm=T("Task"),this.project=k("h2",{className:"projectTitle",textContent:"Project"}),this.addProjectButton=k("button",{className:"addProjectButton",textContent:"Add Project"}),this.projectForm=function(){const t=k("section",{className:"projectFormSection",style:"display: none"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=k("form",{id:"projectForm"}),this.inputProjectTitle=k("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=k("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.inputProjectDueDate=k("input",{id:"inputProjectDueDate",name:"inputProjectDueDate",type:"date"}),this.submitButton=k("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.inputProjectDueDate,this.submitButton),t.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){v.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),t.style.display="none"}};return e.init(),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.taskForm),document.body.append(this.project,this.addProjectButton),document.body.append(this.projectForm)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openTaskForm.bind(y)),this.addProjectButton.addEventListener("click",this.openProjectForm.bind(y))},openTaskForm:function(){this.taskForm.style.display="block"},openProjectForm:function(){this.projectForm.style.display="block"}};function T(t){const e=k("section",{id:`section${t}Form`,className:t,style:"display: none"}),n={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.form=k("form",{id:`form${t}`}),this.inputTaskTitle=k("input",{id:`input${t}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=k("textarea",{id:`input${t}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=k("input",{id:`input${t}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=k("input",{id:`input${t}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=k("button",{id:`add${t}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=k("button",{id:"submitButton",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),e.append(this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(n)),this.form.addEventListener("submit",this.formFunction.bind(n)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(n)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(n))},publishData:function(){return"Task"===t?v.publish("addTask",this.form.elements):"UpdateTask"===t?v.publish("updateTask",this.form.elements):v.publish("addTaskInProject",this.form.elements)},formFunction:function(t){t.preventDefault(),this.form.reset(),e.style.display="none"},deleteChecklistInputs:function(){this.checkListInputs=document.querySelectorAll(".inputChecklist"),this.checkListInputs.forEach((t=>t.remove()))},createChecklist:function(){this.inputTaskChecklist=k("input",{id:`input${t}Checklist`,name:`input${t}Checklist`,className:"inputChecklist",type:"text",placeholder:"enter checklist item here..."}),this.form.insertBefore(this.inputTaskChecklist,this.submitButton)}};return n.init(),e}const D=function(t,e,n){let i=[];const s={title:"AllTasks",description:void 0,dueDate:void 0};return{add(t){i=[...i,t]},remove(t){i=i.filter((e=>e.id!==t))},find:t=>i.find((e=>e.id===t)),get taskArray(){return[...i]},get projectData(){return s}}}();function j(t){const e=b(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));D.add(e),v.publish("addTaskDOM",D.taskArray)}function C(t){D.remove(t)}function E(t){console.log(t)}function P(){}function g(t){!function(){const t=document.querySelectorAll(".taskDiv");t&&t.forEach((t=>t.remove()))}();const e=document.querySelector(".projectTitle");for(const n of t)document.body.insertBefore(x(n),e)}function x(t){console.log(t);const e=k("div",{className:"taskDiv"});return{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=k("h4",{className:"taskTitle",textContent:t.title}),this.taskDesc=k("p",{className:"taskDesc",textContent:t.description}),this.taskDueDate=k("p",{className:"taskDueDate",textContent:t.dueDate}),this.taskDelete=k("button",{className:"deleteTask",textContent:"Delete Task",id:t.id}),this.taskUpdate=k("button",{className:"updateTask",textContent:"Update Task",id:t.id})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskDueDate,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(t=>v.publish("requireTask",t.target.id)))},deleteTaskDOM:function(t){v.publish("deleteTask",t.target.id),t.target.parentNode.remove()}}.init(),e}function A(t){const e=document.querySelector("section");e.style.display="block";const n=e.firstChild;n.elements[0].value=t.title,n.elements[1].value=t.description,n.elements[2].value=t.dueDate,n.elements[3].value=t.priority}function N(t){t=t.filter((t=>!document.getElementById(`${t.filteredTitle}Project`)));for(const e of t){const t=k("h3",{id:`${e.filteredTitle}Project`,className:"projectName",textContent:`${e.title}`}),n=k("button",{id:`${e.filteredTitle} button`,textContent:`Add Task in ${e.title}`}),i=T(`TaskIn${e.filteredTitle}`);n.addEventListener("click",(()=>{i.style.display="block"})),document.body.append(t,n),document.body.append(i)}}v.subscribe("requireTask",(function(t){v.publish("updateThisTask",D.find(t)),D.remove(t)}));const B=[];v.subscribe("addProject",(function(t){const e=(n=t.inputProjectTitle.value,i=t.inputProjectDesc.value,s=t.inputProjectDueDate.value,Object.assign({},function(t){return{title:t}}(n),FilteredTitle(n),function(t){return{description:t}}(i),function(t){return{dueDate:t}}(s),{tasks:[]}));var n,i,s;B.push(e),v.publish("addProjectDOM",B)})),v.subscribe("addTaskInProject",(function(t){const e=b(t.inputTaskName.value,t.inputTaskDesc.value,t.inputTaskDueDate.value,t.inputTaskPriority.value,document.querySelectorAll(".inputChecklist"));for(const n of B)if(t[0].parentNode.id.includes(n.filteredTitle)){n.tasks.push(e);break}v.publish("addTaskInProjectDOM",B),console.dir(B)})),y.init(),v.subscribe("addTask",j),v.subscribe("deleteTask",C),document.querySelector("#inputTaskTitle").addEventListener("input",(t=>{let e=!1;for(const n of D.taskArray)t.target.value===n.title&&(e=!0,t.target.setCustomValidity("Task with same name already exists"));e?e=!1:t.target.setCustomValidity("")})),v.subscribe("addTaskDOM",E),v.subscribe("addTaskDOM",g),v.subscribe("updateThisTask",A),v.subscribe("updateTaskDOM",g),v.subscribe("addProjectDOM",E),v.subscribe("addProjectDOM",N),v.subscribe("addTaskInProjectDOM",P),document.querySelector("#inputProjectTitle").addEventListener("input",(t=>{let e=0;for(const n of B)t.target.value===n.title&&(e++,t.target.setCustomValidity("Project with same name already exists"));0===e?t.target.setCustomValidity(""):e=0}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUVSLE9BQU81RCxRQUFVMEksRUFBUTVCLFFBQzNCeEUsSUFDQThCLEVBQUVSLE9BQU9pSyxrQkFBa0IsMENBR3JCLElBQVZ2TCxFQUNBOEIsRUFBRVIsT0FBT2lLLGtCQUFrQixJQUUzQnZMLEVBQVEsTSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9zdHlsZS5jc3M/ZmY5NCIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9GYWN0b3J5RnVuY3Rpb25zLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1B1YnN1Yi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9Jbml0RGlzcGxheS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9UYXNrLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL01haW5EaXNwbGF5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHB1cnBsZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSx3QkFBd0I7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBwdXJwbGU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhzdHlsZSwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZSkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSkge1xuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc3QgRE9NRmFjdG9yeSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHsgIC8vZm9yIHNpbXBsZSBlbGVtZW50c1xuICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQpO1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgbmV3RWxlbWVudFthdHRyaWJ1dGVdID0gYXR0cmlidXRlc1thdHRyaWJ1dGVdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RWxlbWVudFxufVxuXG5jb25zdCBUaXRsZSA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gICAgcmV0dXJuIHt0aXRsZX1cbn1cblxuY29uc3QgZmlsdGVyZWRUaXRsZSA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gICAgY29uc3QgZmlsdGVyZWRUaXRsZSA9IHRpdGxlLnJlcGxhY2UoL1suLFxcLyMhJCVcXF4mXFwqOzp7fT1cXC1fYH4oKV0vZyxcIlwiKS5yZXBsYWNlKC9cXHN7Mix9L2csXCIgXCIpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHJldHVybiBmaWx0ZXJlZFRpdGxlXG59XG5cbmNvbnN0IERlc2NyaXB0aW9uID0gZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4ge2Rlc2NyaXB0aW9ufVxufVxuXG5jb25zdCBEdWVEYXRlID0gZnVuY3Rpb24oZHVlRGF0ZSkge1xuICAgIHJldHVybiB7ZHVlRGF0ZX1cbn1cblxuY29uc3QgUHJpb3JpdHkgPSBmdW5jdGlvbihwcmlvcml0eSkge1xuICAgIHJldHVybiB7cHJpb3JpdHl9XG59XG5cbmNvbnN0IFJlY3VycmluZyA9IGZ1bmN0aW9uKHJlY3VycmluZykge1xuICAgIGlmIChyZWN1cnJpbmcgPT09ICcnKSByZXR1cm4ge3JlY3VycmluZzogJ25vJ307XG4gICAgcmV0dXJuIHtyZWN1cnJpbmd9XG59XG5cbmNvbnN0IGNoZWNrbGlzdCA9IGZ1bmN0aW9uKGl0ZW1zKSB7XG4gICAgY29uc3QgY2hlY2tsaXN0ID0gW107XG4gICAgY29uc3QgaXRlbXNBcnJheSA9IEFycmF5LmZyb20oaXRlbXMpO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtc0FycmF5KSB7XG4gICAgICAgIGlmIChpdGVtLnZhbHVlID09PSBcIlwiKSBjb250aW51ZVxuICAgICAgICBjb25zdCBjaGVja2xpc3RPYmogPSB7XG4gICAgICAgICAgICBjb250ZW50OiBpdGVtLnZhbHVlLFxuICAgICAgICAgICAgY2hlY2tlZDogZmFsc2UsXG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tsaXN0LnB1c2goY2hlY2tsaXN0T2JqKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrbGlzdFxufVxuXG5jb25zdCBUYXNrc0luUHJvamVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7dGFza3M6IFtdfVxufVxuXG5jb25zdCBUYXNrSXRlbSA9IGZ1bmN0aW9uKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGNoZWNrbGlzdEl0ZW1zKSB7XG4gICAgLy8gY29uc3QgdGFzayA9ICBPYmplY3QuYXNzaWduKHt9LCBUaXRsZSh0aXRsZSksIEZpbHRlcmVkVGl0bGUodGl0bGUpLCBEZXNjcmlwdGlvbihkZXNjcmlwdGlvbiksXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgIER1ZURhdGUoZHVlRGF0ZSksIFByaW9yaXR5KHByaW9yaXR5KSwgQ2hlY2tsaXN0KGNoZWNrTGlzdEl0ZW1zKSwge2lkOiBOdW1iZXIoRGF0ZS5ub3coKSl9KTtcbiAgICBjb25zdCB0YXNrID0ge1xuICAgICAgICB0aXRsZSxcbiAgICAgICAgLy9maWx0ZXJlZFRpdGxlOiBmaWx0ZXJlZFRpdGxlKHRpdGxlKSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIGR1ZURhdGUsXG4gICAgICAgIHByaW9yaXR5LFxuICAgICAgICBjaGVja2xpc3Q6IGNoZWNrbGlzdChjaGVja2xpc3RJdGVtcyksXG4gICAgICAgIGlkOiBEYXRlLm5vdygpLnRvU3RyaW5nKCksXG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgdGl0bGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFzay50aXRsZVxuICAgICAgICB9LFxuICAgICAgICBzZXQgdGl0bGUodmFsdWUpIHtcbiAgICAgICAgICAgIHRhc2sudGl0bGUgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2suZGVzY3JpcHRpb25cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGlkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2suaWRcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGR1ZURhdGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZHVlRGF0ZVxuICAgICAgICB9LFxuICAgICAgICB0YXNrXG4gICAgfVxufVxuXG5jb25zdCBQcm9qZWN0SXRlbSA9IGZ1bmN0aW9uKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBUaXRsZSh0aXRsZSksIEZpbHRlcmVkVGl0bGUodGl0bGUpLCBEZXNjcmlwdGlvbihkZXNjcmlwdGlvbiksIER1ZURhdGUoZHVlRGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhc2tzSW5Qcm9qZWN0KCkpXG59XG5cbmNvbnN0IFRhc2tNYW5hZ2VyID0gZnVuY3Rpb24odGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlKSB7XG4gICAgbGV0IHRhc2tzID0gW107XG4gICAgY29uc3QgcHJvamVjdCA9IHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBkdWVEYXRlXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZCh0YXNrKSB7XG4gICAgICAgICAgICB0YXNrcyA9IFsuLi50YXNrcywgdGFza107XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZShpZCkge1xuICAgICAgICAgICAgdGFza3MgPSB0YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLmlkICE9PSBpZCk7ICAgICAgICBcbiAgICAgICAgfSxcbiAgICAgICAgZmluZChpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09PSBpZClcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IHRhc2tBcnJheSgpIHtcbiAgICAgICAgICAgIHJldHVybiBbLi4udGFza3NdXG4gICAgICAgIH0sXG4gICAgICAgIGdldCBwcm9qZWN0RGF0YSgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9qZWN0XG4gICAgICAgIH0sXG4gICAgfVxufVxuXG5cblxuXG5leHBvcnQge1Rhc2tJdGVtfTtcbmV4cG9ydCB7VGFza01hbmFnZXJ9XG5leHBvcnQge1Byb2plY3RJdGVtfTtcbmV4cG9ydCBkZWZhdWx0IERPTUZhY3Rvcnk7IiwiY29uc3QgcHVic3ViID0ge1xuICAgIGV2ZW50czoge30sXG4gICAgcHVibGlzaDogZnVuY3Rpb24oZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soZGF0YSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0pKXtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgIH0sXG59XG5cbmV4cG9ydCB7cHVic3VifTsiLCJpbXBvcnQgRE9NRmFjdG9yeSBmcm9tIFwiLi9GYWN0b3J5RnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBwdWJzdWIgfSBmcm9tIFwiLi9QdWJzdWIuanNcIjtcblxuY29uc3QgaW5pdERpc3BsYXlPYmplY3QgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KCk7XG4gICAgICAgIHRoaXMuYXBwZW5kQ29udGVudCgpO1xuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50aXRsZSA9IERPTUZhY3RvcnkoJ2gxJywge2NsYXNzTmFtZTogXCJhcHBUaXRsZVwiLCB0ZXh0Q29udGVudDpcIlQgTyBEIE9cIn0pO1xuICAgICAgICB0aGlzLnRhc2sgPSBET01GYWN0b3J5KCdoMicsIHtjbGFzc05hbWU6IFwidGFza1RpdGxlXCIsIHRleHRDb250ZW50OiBcIlRhc2tcIn0pO1xuICAgICAgICB0aGlzLmFkZFRhc2tCdXR0b24gPSBET01GYWN0b3J5KCdidXR0b24nLCB7Y2xhc3NOYW1lOiBcImFkZFRhc2tCdXR0b25cIiwgdGV4dENvbnRlbnQ6IFwiQWRkIFRhc2tcIn0pO1xuICAgICAgICB0aGlzLnRhc2tGb3JtID0gY3JlYXRlVGFza0Zvcm0oXCJUYXNrXCIpOyAgIC8vdGhpcy50YXNrRm9ybSBpcyBhIDxzZWN0aW9uPiAoPGZvcm0+IGlzIHRoZSBmaXJzdCBjaGlsZClcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gRE9NRmFjdG9yeSgnaDInLCB7Y2xhc3NOYW1lOiBcInByb2plY3RUaXRsZVwiLCB0ZXh0Q29udGVudDogXCJQcm9qZWN0XCJ9KTtcbiAgICAgICAgdGhpcy5hZGRQcm9qZWN0QnV0dG9uID0gRE9NRmFjdG9yeSgnYnV0dG9uJywge2NsYXNzTmFtZTogXCJhZGRQcm9qZWN0QnV0dG9uXCIsIHRleHRDb250ZW50OiBcIkFkZCBQcm9qZWN0XCJ9KTtcbiAgICAgICAgdGhpcy5wcm9qZWN0Rm9ybSA9IGNyZWF0ZVByb2plY3RGb3JtKCk7IC8vdGhpcy5wcm9qZWN0RnJvbSBpcyBhIDxzZWN0aW9uPiAoPGZvcm0+IGlzIHRoZSBmaXJzdCBjaGlsZClcbiAgICB9LFxuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIH0sXG4gICAgYXBwZW5kQ29udGVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMudGl0bGUpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLnRhc2spO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLmFkZFRhc2tCdXR0b24pO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLnRhc2tGb3JtKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5wcm9qZWN0LCB0aGlzLmFkZFByb2plY3RCdXR0b24pO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLnByb2plY3RGb3JtKTtcbiAgICB9LFxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmFkZFRhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5UYXNrRm9ybS5iaW5kKGluaXREaXNwbGF5T2JqZWN0KSk7XG4gICAgICAgIHRoaXMuYWRkUHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlblByb2plY3RGb3JtLmJpbmQoaW5pdERpc3BsYXlPYmplY3QpKTtcbiAgICB9LFxuICAgIG9wZW5UYXNrRm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudGFza0Zvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9LFxuICAgIG9wZW5Qcm9qZWN0Rm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucHJvamVjdEZvcm0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGFza0Zvcm0odmVyc2lvbikge1xuICAgIGNvbnN0IGZvcm1TZWN0aW9uID0gRE9NRmFjdG9yeSgnc2VjdGlvbicsIHtpZDogYHNlY3Rpb24ke3ZlcnNpb259Rm9ybWAsIGNsYXNzTmFtZTogdmVyc2lvbiwgc3R5bGU6IFwiZGlzcGxheTogbm9uZVwifSk7XG4gICAgY29uc3QgZm9ybU9iamVjdCA9IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZEVsZW1lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtID0gRE9NRmFjdG9yeSgnZm9ybScsIHtpZDogYGZvcm0ke3ZlcnNpb259YH0pO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRhc2tUaXRsZSA9IERPTUZhY3RvcnkoJ2lucHV0Jywge2lkOiBgaW5wdXQke3ZlcnNpb259VGl0bGVgLCBuYW1lOiBgaW5wdXRUYXNrTmFtZWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsIG1heExlbmd0aDogXCI1MFwiLCBwbGFjZWhvbGRlcjogXCJ0YXNrIHRpdGxlLi4uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwidHJ1ZVwifSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza0Rlc2MgPSBET01GYWN0b3J5KCd0ZXh0YXJlYScsIHtpZDogYGlucHV0JHt2ZXJzaW9ufURlc2NgLCBuYW1lOiBgaW5wdXRUYXNrRGVzY2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZXNjL25vdGVzLi4uXCIsIH0pO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFRhc2tEdWVEYXRlID0gRE9NRmFjdG9yeSgnaW5wdXQnLCB7aWQ6IGBpbnB1dCR7dmVyc2lvbn1EdWVEYXRlYCwgbmFtZTogYGlucHV0VGFza0R1ZURhdGVgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsfSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza1ByaW9yaXR5ID0gRE9NRmFjdG9yeSgnaW5wdXQnLCB7aWQ6IGBpbnB1dCR7dmVyc2lvbn1Qcmlvcml0eWAsIG5hbWU6IGBpbnB1dFRhc2tQcmlvcml0eWAsIHR5cGU6IFwidGV4dFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaWdoL21lZGl1bS9sb3dcIn0pO1xuICAgICAgICAgICAgdGhpcy5hZGRUYXNrQ2hlY2tsaXN0QnV0dG9uID0gRE9NRmFjdG9yeSgnYnV0dG9uJywge2lkOiBgYWRkJHt2ZXJzaW9ufUNoZWNrbGlzdEJ1dHRvbmAsIHR5cGU6IFwiYnV0dG9uXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiBcIkFkZCBDaGVja2xpc3RcIn0pO1xuICAgICAgICAgICAgdGhpcy5zdWJtaXRCdXR0b24gPSBET01GYWN0b3J5KCdidXR0b24nLCB7aWQ6IFwic3VibWl0QnV0dG9uXCIsIHR5cGU6IFwic3VibWl0XCIsIHRleHRDb250ZW50OiBcIlN1Ym1pdFwifSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGVuZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5hcHBlbmQodGhpcy5pbnB1dFRhc2tUaXRsZSwgdGhpcy5pbnB1dFRhc2tEZXNjLCB0aGlzLmlucHV0VGFza0R1ZURhdGUsIHRoaXMuaW5wdXRUYXNrUHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVGFza0NoZWNrbGlzdEJ1dHRvbiwgdGhpcy5zdWJtaXRCdXR0b24pO1xuICAgICAgICAgICAgZm9ybVNlY3Rpb24uYXBwZW5kKHRoaXMuZm9ybSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMucHVibGlzaERhdGEuYmluZChmb3JtT2JqZWN0KSk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5mb3JtRnVuY3Rpb24uYmluZChmb3JtT2JqZWN0KSk7XG4gICAgICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5kZWxldGVDaGVja2xpc3RJbnB1dHMuYmluZChmb3JtT2JqZWN0KSk7XG4gICAgICAgICAgICB0aGlzLmFkZFRhc2tDaGVja2xpc3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNyZWF0ZUNoZWNrbGlzdC5iaW5kKGZvcm1PYmplY3QpKTtcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGlzaERhdGE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IFwiVGFza1wiKSByZXR1cm4gcHVic3ViLnB1Ymxpc2goJ2FkZFRhc2snLCB0aGlzLmZvcm0uZWxlbWVudHMpO1xuICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IFwiVXBkYXRlVGFza1wiKSByZXR1cm4gcHVic3ViLnB1Ymxpc2goJ3VwZGF0ZVRhc2snLCB0aGlzLmZvcm0uZWxlbWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIHB1YnN1Yi5wdWJsaXNoKCdhZGRUYXNrSW5Qcm9qZWN0JywgdGhpcy5mb3JtLmVsZW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybUZ1bmN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgZm9ybVNlY3Rpb24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICB9LFxuICAgICAgICBkZWxldGVDaGVja2xpc3RJbnB1dHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja0xpc3RJbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXRDaGVja2xpc3QnKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tMaXN0SW5wdXRzLmZvckVhY2goY2hlY2tsaXN0ID0+IGNoZWNrbGlzdC5yZW1vdmUoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZUNoZWNrbGlzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0VGFza0NoZWNrbGlzdCA9IERPTUZhY3RvcnkoJ2lucHV0Jywge2lkOiBgaW5wdXQke3ZlcnNpb259Q2hlY2tsaXN0YCwgbmFtZTogYGlucHV0JHt2ZXJzaW9ufUNoZWNrbGlzdGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogYGlucHV0Q2hlY2tsaXN0YCwgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImVudGVyIGNoZWNrbGlzdCBpdGVtIGhlcmUuLi5cIn0pO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmluc2VydEJlZm9yZSh0aGlzLmlucHV0VGFza0NoZWNrbGlzdCwgdGhpcy5zdWJtaXRCdXR0b24pO1xuICAgICAgICB9LFxuXG4gICAgfVxuICAgIGZvcm1PYmplY3QuaW5pdCgpO1xuICAgIHJldHVybiBmb3JtU2VjdGlvblxufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0Rm9ybSgpIHtcbiAgICBjb25zdCBmb3JtU2VjdGlvbiA9IERPTUZhY3RvcnkoJ3NlY3Rpb24nLCB7Y2xhc3NOYW1lOiBcInByb2plY3RGb3JtU2VjdGlvblwiLCBzdHlsZTogXCJkaXNwbGF5OiBub25lXCJ9KTtcbiAgICBjb25zdCBmb3JtT2JqZWN0ID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRWxlbWVudHMoKTtcbiAgICAgICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgICAgICB9LFxuICAgICAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0gPSBET01GYWN0b3J5KCdmb3JtJywge2lkOiBcInByb2plY3RGb3JtXCJ9KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRQcm9qZWN0VGl0bGUgPSBET01GYWN0b3J5KCdpbnB1dCcsIHtpZDogXCJpbnB1dFByb2plY3RUaXRsZVwiLCBuYW1lOiBcImlucHV0UHJvamVjdFRpdGxlXCIsIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInByb2plY3QgdGl0bGUuLi5cIiwgcmVxdWlyZWQ6IFwidHJ1ZVwifSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0UHJvamVjdERlc2MgPSBET01GYWN0b3J5KCd0ZXh0YXJlYScsIHtpZDogXCJpbnB1dFByb2plY3REZXNjXCIsIG5hbWU6IFwiaW5wdXRQcm9qZWN0RGVzY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGVzYy9ub3Rlcy4uLlwifSk7XG4gICAgICAgICAgICB0aGlzLmlucHV0UHJvamVjdER1ZURhdGUgPSBET01GYWN0b3J5KCdpbnB1dCcsIHtpZDogXCJpbnB1dFByb2plY3REdWVEYXRlXCIsIG5hbWU6IFwiaW5wdXRQcm9qZWN0RHVlRGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCJ9KTtcbiAgICAgICAgICAgIHRoaXMuc3VibWl0QnV0dG9uID0gRE9NRmFjdG9yeSgnYnV0dG9uJywge2lkOiBcInN1Ym1pdEJ1dHRvblwiLCB0eXBlOiBcInN1Ym1pdFwiLCB0ZXh0Q29udGVudDogXCJTdWJtaXRcIn0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBlbmRFbGVtZW50czogZnVuY3Rpb24oKSB7ICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZm9ybS5hcHBlbmQodGhpcy5pbnB1dFByb2plY3RUaXRsZSwgdGhpcy5pbnB1dFByb2plY3REZXNjLCB0aGlzLmlucHV0UHJvamVjdER1ZURhdGUsIHRoaXMuc3VibWl0QnV0dG9uKTtcbiAgICAgICAgICAgIGZvcm1TZWN0aW9uLmFwcGVuZCh0aGlzLmZvcm0pO1xuICAgICAgICB9LFxuICAgICAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnB1Ymxpc2hEYXRhLmJpbmQoZm9ybU9iamVjdCkpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuZm9ybUZ1bmN0aW9uLmJpbmQoZm9ybU9iamVjdCkpXG4gICAgICAgIH0sXG4gICAgICAgIHB1Ymxpc2hEYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdhZGRQcm9qZWN0JywgdGhpcy5mb3JtLmVsZW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZm9ybUZ1bmN0aW9uOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgZm9ybVNlY3Rpb24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuICAgIGZvcm1PYmplY3QuaW5pdCgpO1xuICAgIHJldHVybiBmb3JtU2VjdGlvbjtcbn1cblxuXG5cbmNvbnN0IHBhZ2VMb2FkQ29udGVudCA9ICgpID0+IGluaXREaXNwbGF5T2JqZWN0LmluaXQoKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFnZUxvYWRDb250ZW50O1xuZXhwb3J0IHtjcmVhdGVUYXNrRm9ybX07IiwiaW1wb3J0IHtUYXNrSXRlbSwgVGFza01hbmFnZXJ9IGZyb20gJy4vRmFjdG9yeUZ1bmN0aW9ucy5qcydcbmltcG9ydCB7IHB1YnN1YiB9IGZyb20gJy4vUHVic3ViLmpzJztcblxuY29uc3QgdGFza01vZHVsZSA9IHtcbiAgICBleGVjdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcHVic3ViLnN1YnNjcmliZSgnYWRkVGFzaycsIGNyZWF0ZVRhc2spO1xuICAgICAgICBwdWJzdWIuc3Vic2NyaWJlKCdkZWxldGVUYXNrJywgZGVsZXRlVGFzayk7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlVGFzaygpO1xuICAgIH1cbn1cblxuY29uc3QgYWxsVGFza3MgPSBUYXNrTWFuYWdlcignQWxsVGFza3MnKTtcblxuZnVuY3Rpb24gY3JlYXRlVGFzayhmb3JtKSB7XG4gICAgY29uc3QgdGFzayA9IFRhc2tJdGVtKGZvcm1bXCJpbnB1dFRhc2tOYW1lXCJdLnZhbHVlLCBmb3JtW1wiaW5wdXRUYXNrRGVzY1wiXS52YWx1ZSwgZm9ybVtcImlucHV0VGFza0R1ZURhdGVcIl0udmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtW1wiaW5wdXRUYXNrUHJpb3JpdHlcIl0udmFsdWUsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dENoZWNrbGlzdCcpKVxuICAgIGFsbFRhc2tzLmFkZCh0YXNrKTtcbiAgICBwdWJzdWIucHVibGlzaCgnYWRkVGFza0RPTScsIGFsbFRhc2tzLnRhc2tBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRhc2soZGVsZXRlZFRhc2spIHtcbiAgICBhbGxUYXNrcy5yZW1vdmUoZGVsZXRlZFRhc2spO1xufVxuXG5wdWJzdWIuc3Vic2NyaWJlKCdyZXF1aXJlVGFzaycsIHNlbmRSZXF1aXJlZFRhc2spO1xuZnVuY3Rpb24gc2VuZFJlcXVpcmVkVGFzayhyZXF1aXJlZFRhc2spIHtcbiAgICBwdWJzdWIucHVibGlzaCgndXBkYXRlVGhpc1Rhc2snLCBhbGxUYXNrcy5maW5kKHJlcXVpcmVkVGFzaykpO1xuICAgIGFsbFRhc2tzLnJlbW92ZShyZXF1aXJlZFRhc2spO1xuICAgIC8vIGZvciAoY29uc3QgdGFzayBvZiB0YXNrQXJyYXkpIHtcbiAgICAvLyAgICAgaWYgKHJlcXVpcmVkVGFzay5pbmNsdWRlcyh0YXNrLmZpbHRlcmVkVGl0bGUpKSB7XG4gICAgLy8gICAgICAgICBwdWJzdWIucHVibGlzaCgndXBkYXRlVGhpc1Rhc2snLCB0YXNrKTtcbiAgICAvLyAgICAgICAgIGJyZWFrXG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRhc2sodGFzaywgZm9ybSkge1xuICAgIGNvbnN0IGRhdGEgPSBmb3JtLmZpcnN0Q2hpbGQ7XG4gICAgY29uc3QgdXBkYXRlZFRhc2sgPSBUYXNrSXRlbShkYXRhWzBdLnZhbHVlLCBkYXRhWzFdLnZhbHVlLCBkYXRhWzJdLnZhbHVlLCBkYXRhWzNdLnZhbHVlKTtcbiAgICB1cGRhdGVkVGFzay5pbmRleCA9IHRhc2suaW5kZXg7XG4gICAgdGFza0FycmF5LnNwbGljZSh0YXNrLmluZGV4LCAxLCB1cGRhdGVkVGFzayk7XG4gICAgcHVic3ViLnB1Ymxpc2goJ3VwZGF0ZVRhc2tET00nLCB0YXNrQXJyYXkpO1xuICAgIGNvbnNvbGUubG9nKHRhc2tBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlVGFzaygpIHtcbiAgICBjb25zdCBpbnB1dFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0VGFza1RpdGxlJyk7XG4gICAgaW5wdXRUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XG4gICAgICAgIGxldCBkdXBsaWNhdGUgPSBmYWxzZTsgIC8vdG8gcmVtb3ZlIGN1c3RvbSB2YWxpZGF0aW9uIG1lc3NhZ2Ugd2hlbiBub3QgcmVxdWlyZWRcbiAgICAgICAgZm9yIChjb25zdCB0YXNrIG9mIGFsbFRhc2tzLnRhc2tBcnJheSkge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09PSB0YXNrLnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgZHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIlRhc2sgd2l0aCBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1cGxpY2F0ZSkge1xuICAgICAgICAgICAgZHVwbGljYXRlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTsgIFxuICAgICAgICB9XG4gICAgfSlcbn1cblxuLy9leHBvcnQge2NoZWNrRHVwbGljYXRlVGFza307XG5leHBvcnQge3VwZGF0ZVRhc2t9O1xuZXhwb3J0IHt0YXNrTW9kdWxlfTsiLCJpbXBvcnQgRE9NRmFjdG9yeSBmcm9tIFwiLi9GYWN0b3J5RnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVUYXNrRm9ybSB9IGZyb20gXCIuL0luaXREaXNwbGF5LmpzXCI7XG5pbXBvcnQgeyBwdWJzdWIgfSBmcm9tIFwiLi9QdWJzdWIuanNcIjtcbmltcG9ydCB7IHVwZGF0ZVRhc2sgfSBmcm9tIFwiLi9UYXNrLmpzXCI7XG5cblxuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRUYXNrRE9NJywgbG9nKTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRUYXNrRE9NJywgZGlzcGxheVRhc2tzKTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCd1cGRhdGVUaGlzVGFzaycsIHVwZGF0ZVRhc2tGb3JtVmlldyk7XG4gICAgLy9wdWJzdWIuc3Vic2NyaWJlKCd1cGRhdGVUaGlzVGFzaycsIHVwZGF0ZVRhc2tGb3JtU3VibWl0KTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCd1cGRhdGVUYXNrRE9NJywgZGlzcGxheVRhc2tzKTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRQcm9qZWN0RE9NJywgbG9nKTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRQcm9qZWN0RE9NJywgZGlzcGxheVByb2plY3RzKTtcbiAgICBwdWJzdWIuc3Vic2NyaWJlKCdhZGRUYXNrSW5Qcm9qZWN0RE9NJywgZGlzcGxheVRhc2tJblByb2plY3QpO1xufVxuXG5mdW5jdGlvbiBsb2coZGF0YSkge1xuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5VGFza0luUHJvamVjdCgpIHsgICAgICAgLy8gSU5DT01QTEVURVxuXG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlUYXNrcyh0YXNrcykge1xuICAgIGRlbGV0ZUFsbFRhc2tzKCk7XG4gICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RUaXRsZScpOyAgIC8vdG8gYXBwZW5kIGF0IHJpZ2h0IGxvY2F0aW9uXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNyZWF0ZVRhc2tDYXJkKHRhc2spLCBwcm9qZWN0VGl0bGUpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZWxldGVBbGxUYXNrcygpIHtcbiAgICBjb25zdCB0YXNrRGl2Tm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFza0RpdicpO1xuICAgIGlmICh0YXNrRGl2Tm9kZUxpc3QpIHtcbiAgICAgICAgdGFza0Rpdk5vZGVMaXN0LmZvckVhY2godGFza0RpdiA9PiB0YXNrRGl2LnJlbW92ZSgpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhc2tDYXJkKHRhc2spIHtcbiAgICBjb25zb2xlLmxvZyh0YXNrKVxuICAgIGNvbnN0IHRhc2tEaXYgPSBET01GYWN0b3J5KCdkaXYnLCB7Y2xhc3NOYW1lOiAndGFza0Rpdid9KTtcbiAgICBjb25zdCB0YXNrQ2FyZE9iaiA9IHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZEVsZW1lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50YXNrVGl0bGUgPSBET01GYWN0b3J5KCdoNCcsIHtjbGFzc05hbWU6ICd0YXNrVGl0bGUnLCB0ZXh0Q29udGVudDogdGFzay50aXRsZX0pO1xuICAgICAgICAgICAgdGhpcy50YXNrRGVzYyA9IERPTUZhY3RvcnkoJ3AnLCB7Y2xhc3NOYW1lOiAndGFza0Rlc2MnLCB0ZXh0Q29udGVudDogdGFzay5kZXNjcmlwdGlvbn0pO1xuICAgICAgICAgICAgdGhpcy50YXNrRHVlRGF0ZSA9IERPTUZhY3RvcnkoJ3AnLCB7Y2xhc3NOYW1lOiAndGFza0R1ZURhdGUnLCB0ZXh0Q29udGVudDogdGFzay5kdWVEYXRlfSk7XG4gICAgICAgICAgICB0aGlzLnRhc2tEZWxldGUgPSBET01GYWN0b3J5KCdidXR0b24nLCB7Y2xhc3NOYW1lOiAnZGVsZXRlVGFzaycsIHRleHRDb250ZW50OiBcIkRlbGV0ZSBUYXNrXCIsIGlkOiB0YXNrLmlkfSk7XG4gICAgICAgICAgICB0aGlzLnRhc2tVcGRhdGUgPSBET01GYWN0b3J5KCdidXR0b24nLCB7Y2xhc3NOYW1lOiAndXBkYXRlVGFzaycsIHRleHRDb250ZW50OiBcIlVwZGF0ZSBUYXNrXCIsIGlkOiB0YXNrLmlkfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGVuZEVsZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRhc2tEaXYuYXBwZW5kKHRoaXMudGFza1RpdGxlLCB0aGlzLnRhc2tEZXNjLCB0aGlzLnRhc2tEdWVEYXRlLCB0aGlzLnRhc2tEZWxldGUsIHRoaXMudGFza1VwZGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50YXNrRGVsZXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5kZWxldGVUYXNrRE9NKTtcbiAgICAgICAgICAgIHRoaXMudGFza1VwZGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpID0+IHB1YnN1Yi5wdWJsaXNoKCdyZXF1aXJlVGFzaycsIGUudGFyZ2V0LmlkKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZVRhc2tET006IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHB1YnN1Yi5wdWJsaXNoKCdkZWxldGVUYXNrJywgZS50YXJnZXQuaWQpO1xuICAgICAgICAgICAgZS50YXJnZXQucGFyZW50Tm9kZS5yZW1vdmUoKTtcbiAgICAgICAgfSxcbiAgICB9XG4gICAgdGFza0NhcmRPYmouaW5pdCgpO1xuICAgIHJldHVybiB0YXNrRGl2XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVRhc2tGb3JtVmlldyh0YXNrKSB7XG4gICAgY29uc3QgZm9ybVNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWN0aW9uJyk7XG4gICAgZm9ybVNlY3Rpb24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBjb25zdCBmb3JtID0gZm9ybVNlY3Rpb24uZmlyc3RDaGlsZDtcbiAgICBmb3JtLmVsZW1lbnRzWzBdLnZhbHVlID0gdGFzay50aXRsZTtcbiAgICBmb3JtLmVsZW1lbnRzWzFdLnZhbHVlID0gdGFzay5kZXNjcmlwdGlvbjtcbiAgICBmb3JtLmVsZW1lbnRzWzJdLnZhbHVlID0gdGFzay5kdWVEYXRlO1xuICAgIGZvcm0uZWxlbWVudHNbM10udmFsdWUgPSB0YXNrLnByaW9yaXR5O1xuICAgIC8vZG9jdW1lbnQuYm9keS5hcHBlbmQoZm9ybVNlY3Rpb24pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVUYXNrRm9ybVN1Ym1pdCh0YXNrKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLlVwZGF0ZVRhc2snKS5maXJzdENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdXBkYXRlVGFzayh0YXNrLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuVXBkYXRlVGFzaycpKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLlVwZGF0ZVRhc2snKS5yZW1vdmUoKTtcbiAgICB9KVxufVxuXG5mdW5jdGlvbiBkaXNwbGF5UHJvamVjdHMocHJvamVjdHMpIHsgICAgICAgICAgICAvLyBORUVEIEZJWCBGT1IgTkFNRVMgV0lUSCBTQU1FIEFMUEhBQkVUUyBESUZGRVJFTlQgUFVOQ1RVQVRJT05cbiAgICBwcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcihwcm9qZWN0ID0+IHsgXG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtwcm9qZWN0LmZpbHRlcmVkVGl0bGV9UHJvamVjdGApKSByZXR1cm4gZmFsc2VcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9KVxuICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IERPTUZhY3RvcnkoJ2gzJywge2lkOiBgJHtwcm9qZWN0LmZpbHRlcmVkVGl0bGV9UHJvamVjdGAsIGNsYXNzTmFtZTogXCJwcm9qZWN0TmFtZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiBgJHtwcm9qZWN0LnRpdGxlfWB9KTtcbiAgICAgICAgY29uc3QgYWRkVGFza0luUHJvamVjdEJ1dHRvbiA9IERPTUZhY3RvcnkoJ2J1dHRvbicsIHtpZDogYCR7cHJvamVjdC5maWx0ZXJlZFRpdGxlfSBidXR0b25gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiBgQWRkIFRhc2sgaW4gJHtwcm9qZWN0LnRpdGxlfWB9KVxuICAgICAgICBjb25zdCB0YXNrSW5Qcm9qZWN0Rm9ybSA9IGNyZWF0ZVRhc2tGb3JtKGBUYXNrSW4ke3Byb2plY3QuZmlsdGVyZWRUaXRsZX1gKTtcbiAgICAgICAgYWRkVGFza0luUHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRhc2tJblByb2plY3RGb3JtLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIH0pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChwcm9qZWN0TmFtZSwgYWRkVGFza0luUHJvamVjdEJ1dHRvbik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRhc2tJblByb2plY3RGb3JtKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldERhdGE7IiwiaW1wb3J0IHsgUHJvamVjdEl0ZW0gfSBmcm9tIFwiLi9GYWN0b3J5RnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBwdWJzdWIgfSBmcm9tIFwiLi9QdWJzdWJcIjtcbmltcG9ydCB7IFRhc2tJdGVtIH0gZnJvbSBcIi4vRmFjdG9yeUZ1bmN0aW9uc1wiO1xuXG5jb25zdCBwcm9qZWN0cyA9IFtdO1xuXG5wdWJzdWIuc3Vic2NyaWJlKCdhZGRQcm9qZWN0JywgY3JlYXRlUHJvamVjdClcbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoZm9ybSkge1xuICAgIGNvbnN0IHByb2plY3QgPSBQcm9qZWN0SXRlbShmb3JtWydpbnB1dFByb2plY3RUaXRsZSddLnZhbHVlLCBmb3JtWydpbnB1dFByb2plY3REZXNjJ10udmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtWydpbnB1dFByb2plY3REdWVEYXRlJ10udmFsdWUpO1xuICAgIHByb2plY3RzLnB1c2gocHJvamVjdCk7XG4gICAgcHVic3ViLnB1Ymxpc2goJ2FkZFByb2plY3RET00nLCBwcm9qZWN0cyk7XG59XG5cbnB1YnN1Yi5zdWJzY3JpYmUoJ2FkZFRhc2tJblByb2plY3QnLCBhZGRUYXNrSW5Qcm9qZWN0KTtcbmZ1bmN0aW9uIGFkZFRhc2tJblByb2plY3QoZm9ybSkge1xuICAgIGNvbnN0IHRhc2sgPSBUYXNrSXRlbShmb3JtW1wiaW5wdXRUYXNrTmFtZVwiXS52YWx1ZSwgZm9ybVtcImlucHV0VGFza0Rlc2NcIl0udmFsdWUsIGZvcm1bXCJpbnB1dFRhc2tEdWVEYXRlXCJdLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtW1wiaW5wdXRUYXNrUHJpb3JpdHlcIl0udmFsdWUsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dENoZWNrbGlzdCcpKTtcbiAgICBmb3IgKGNvbnN0IHByb2plY3Qgb2YgcHJvamVjdHMpIHtcbiAgICAgICAgaWYgKGZvcm1bMF0ucGFyZW50Tm9kZS5pZC5pbmNsdWRlcyhwcm9qZWN0LmZpbHRlcmVkVGl0bGUpKSB7XG4gICAgICAgICAgICBwcm9qZWN0LnRhc2tzLnB1c2godGFzayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJzdWIucHVibGlzaCgnYWRkVGFza0luUHJvamVjdERPTScsIHByb2plY3RzKTtcbiAgICBjb25zb2xlLmRpcihwcm9qZWN0cyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlUHJvamVjdCgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXRQcm9qZWN0VGl0bGUnKS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7ICAvL3RvIHJlbW92ZSBjdXN0b20gdmFsaWRhdGlvbiBtZXNzYWdlIHdoZW4gbm90IHJlcXVpcmVkXG4gICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09PSBwcm9qZWN0LnRpdGxlKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIlByb2plY3Qgd2l0aCBzYW1lIG5hbWUgYWxyZWFkeSBleGlzdHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50ID0gMDsgIFxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IHtjaGVja0R1cGxpY2F0ZVByb2plY3R9O1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleCIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImNoZWNrbGlzdCIsIml0ZW1zIiwiaXRlbXNBcnJheSIsImNoZWNrbGlzdE9iaiIsImNoZWNrZWQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiY2hlY2tsaXN0SXRlbXMiLCJ0YXNrIiwiRGF0ZSIsIm5vdyIsImVsZW1lbnQiLCJuZXdFbGVtZW50IiwiYXR0cmlidXRlIiwiZXZlbnRzIiwicHVibGlzaCIsImV2ZW50TmFtZSIsImZvckVhY2giLCJjYWxsYmFjayIsInN1YnNjcmliZSIsImluaXREaXNwbGF5T2JqZWN0IiwiaW5pdCIsImNyZWF0ZUVsZW1lbnRzIiwic2V0Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJiaW5kRXZlbnRzIiwiY2xhc3NOYW1lIiwidGV4dENvbnRlbnQiLCJhZGRUYXNrQnV0dG9uIiwidGFza0Zvcm0iLCJjcmVhdGVUYXNrRm9ybSIsInByb2plY3QiLCJhZGRQcm9qZWN0QnV0dG9uIiwicHJvamVjdEZvcm0iLCJmb3JtU2VjdGlvbiIsImZvcm1PYmplY3QiLCJhcHBlbmRFbGVtZW50cyIsImZvcm0iLCJpbnB1dFByb2plY3RUaXRsZSIsInR5cGUiLCJwbGFjZWhvbGRlciIsInJlcXVpcmVkIiwiaW5wdXRQcm9qZWN0RGVzYyIsImlucHV0UHJvamVjdER1ZURhdGUiLCJzdWJtaXRCdXR0b24iLCJhcHBlbmQiLCJhZGRFdmVudExpc3RlbmVyIiwicHVibGlzaERhdGEiLCJiaW5kIiwiZm9ybUZ1bmN0aW9uIiwiZWxlbWVudHMiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVzZXQiLCJkaXNwbGF5IiwiY3JlYXRlUHJvamVjdEZvcm0iLCJib2R5Iiwib3BlblRhc2tGb3JtIiwib3BlblByb2plY3RGb3JtIiwidmVyc2lvbiIsImlucHV0VGFza1RpdGxlIiwibWF4TGVuZ3RoIiwiaW5wdXRUYXNrRGVzYyIsImlucHV0VGFza0R1ZURhdGUiLCJpbnB1dFRhc2tQcmlvcml0eSIsImFkZFRhc2tDaGVja2xpc3RCdXR0b24iLCJkZWxldGVDaGVja2xpc3RJbnB1dHMiLCJjcmVhdGVDaGVja2xpc3QiLCJjaGVja0xpc3RJbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRUYXNrQ2hlY2tsaXN0IiwiaW5zZXJ0QmVmb3JlIiwiYWxsVGFza3MiLCJ0YXNrcyIsIlRhc2tNYW5hZ2VyIiwiYWRkIiwiZmlsdGVyIiwiZmluZCIsImNyZWF0ZVRhc2siLCJ0YXNrQXJyYXkiLCJkZWxldGVUYXNrIiwiZGVsZXRlZFRhc2siLCJsb2ciLCJjb25zb2xlIiwiZGlzcGxheVRhc2tJblByb2plY3QiLCJkaXNwbGF5VGFza3MiLCJ0YXNrRGl2Tm9kZUxpc3QiLCJ0YXNrRGl2IiwiZGVsZXRlQWxsVGFza3MiLCJwcm9qZWN0VGl0bGUiLCJjcmVhdGVUYXNrQ2FyZCIsInRhc2tUaXRsZSIsInRhc2tEZXNjIiwidGFza0R1ZURhdGUiLCJ0YXNrRGVsZXRlIiwidGFza1VwZGF0ZSIsImRlbGV0ZVRhc2tET00iLCJ1cGRhdGVUYXNrRm9ybVZpZXciLCJkaXNwbGF5UHJvamVjdHMiLCJwcm9qZWN0cyIsImdldEVsZW1lbnRCeUlkIiwiZmlsdGVyZWRUaXRsZSIsInByb2plY3ROYW1lIiwiYWRkVGFza0luUHJvamVjdEJ1dHRvbiIsInRhc2tJblByb2plY3RGb3JtIiwicmVxdWlyZWRUYXNrIiwiYXNzaWduIiwiVGl0bGUiLCJGaWx0ZXJlZFRpdGxlIiwiRGVzY3JpcHRpb24iLCJEdWVEYXRlIiwiaW5jbHVkZXMiLCJkaXIiLCJkdXBsaWNhdGUiLCJzZXRDdXN0b21WYWxpZGl0eSJdLCJzb3VyY2VSb290IjoiIn0=