(()=>{"use strict";var t={890:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"body {\n  background-color: white;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;AACzB",sourcesContent:["body {\n  background-color: white;\n}\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){s=!0,o=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw o}}return i}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),d=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var u=t[s],c=r.base?u[0]+r.base:u[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var p=n(l),f={css:u[1],media:u[2],sourceMap:u[3]};-1!==p?(e[p].references++,e[p].updater(f)):e.push({identifier:l,updater:o(f,r),references:1}),a.push(l)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var u=r(t,o),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),u=n.n(s),c=n(216),d=n.n(c),l=n(589),p=n.n(l),f=n(890),m={};m.styleTagTransform=p(),m.setAttributes=u(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const h=function(t,e){const n=document.createElement(t);for(const t in e)n[t]=e[t];return n},v={init:function(){this.createElements(),this.setContent(),this.appendContent(),this.bindEvents()},createElements:function(){this.title=h("h1",{className:"appTitle",textContent:"T O D O"}),this.task=h("h2",{className:"taskTitle",textContent:"Task"}),this.addTaskButton=h("button",{className:"addTaskButton",textContent:"Add Task"}),this.form=function(){const t=h("section",{className:"formDiv",style:"display: none"}),e=h("form",{id:"form"}),n=h("input",{id:"inputTaskTitle",name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title..."}),r=h("textarea",{id:"inputTaskDesc",name:"inputTaskDesc",placeholder:"desc/notes..."}),o=h("input",{id:"inputTaskDueDate",name:"inputTaskDueDate",type:"date"}),i=h("input",{id:"inputTaskPriority",name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),a=h("button",{id:"submitButton",type:"submit",textContent:"Submit"});return e.append(n,r,o,i,a),t.append(e),t}()},setContent:function(){},appendContent:function(){document.body.append(this.title),document.body.append(this.task),document.body.append(this.addTaskButton),document.body.append(this.form)},bindEvents:function(){this.addTaskButton.addEventListener("click",this.openForm.bind(v)),this.form.addEventListener("submit",this.formFunction.bind(v))},openForm:function(){this.form.style.display="block"},formFunction:function(t){this.form.firstChild.reset(),t.preventDefault()}},y={events:{},publish:function(t,e){this.events.eventName&&this.events.eventName.forEach((t=>t(e)))},subscribe:function(t,e){Array.isArray(this.events.eventName)||(this.events.eventName=[]),this.events.eventName.push(e)}},b=[];function T(t){void 0!==t&&console.log(t)}y.subscribe("addTask",T);const k=T;v.init(),document.querySelector("form").addEventListener("submit",(t=>{!function(){const t=document.querySelector("#form").elements,e=(n=t.inputTaskName.value,r=t.inputTaskDesc.value,o=t.inputTaskDueDate.value,i=t.inputTaskPriority.value,Object.assign({},function(t){return{title:t}}(n),function(t){return{description:t}}(r),function(t){return{dueDate:t}}(o),function(t){return{priority:t}}(i)));var n,r,o,i;b.push(e),y.publish("addTask",b)}()})),k()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,