(()=>{"use strict";var n={372:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),o=t.n(i),r=t(645),a=t.n(r)()(o());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }',"",{version:3,sources:["webpack://./src/styles/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;CAED;IACG,iBAAiB,EAAE,MAAM;IACzB,8BAA8B,EAAE,MAAM;EACxC;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,SAAS;EACX;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;IACE,cAAc;IACd,gBAAgB;EAClB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;IACE,uBAAuB,EAAE,MAAM;IAC/B,SAAS,EAAE,MAAM;IACjB,iBAAiB,EAAE,MAAM;EAC3B;;EAEA;;;IAGE;;EAEF;IACE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,6BAA6B;EAC/B;;EAEA;;;IAGE;;EAEF;IACE,mBAAmB,EAAE,MAAM;IAC3B,0BAA0B,EAAE,MAAM;IAClC,iCAAiC,EAAE,MAAM;EAC3C;;EAEA;;IAEE;;EAEF;;IAEE,mBAAmB;EACrB;;EAEA;;;IAGE;;EAEF;;;IAGE,iCAAiC,EAAE,MAAM;IACzC,cAAc,EAAE,MAAM;EACxB;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,wBAAwB;EAC1B;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,WAAW;EACb;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;;IAGE;;EAEF;;;;;IAKE,oBAAoB,EAAE,MAAM;IAC5B,eAAe,EAAE,MAAM;IACvB,iBAAiB,EAAE,MAAM;IACzB,SAAS,EAAE,MAAM;EACnB;;EAEA;;;IAGE;;EAEF;UACQ,MAAM;IACZ,iBAAiB;EACnB;;EAEA;;;IAGE;;EAEF;WACS,MAAM;IACb,oBAAoB;EACtB;;EAEA;;IAEE;;EAEF;;;;IAIE,0BAA0B;EAC5B;;EAEA;;IAEE;;EAEF;;;;IAIE,kBAAkB;IAClB,UAAU;EACZ;;EAEA;;IAEE;;EAEF;;;;IAIE,8BAA8B;EAChC;;EAEA;;IAEE;;EAEF;IACE,8BAA8B;EAChC;;EAEA;;;;;IAKE;;EAEF;IACE,sBAAsB,EAAE,MAAM;IAC9B,cAAc,EAAE,MAAM;IACtB,cAAc,EAAE,MAAM;IACtB,eAAe,EAAE,MAAM;IACvB,UAAU,EAAE,MAAM;IAClB,mBAAmB,EAAE,MAAM;EAC7B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;;IAGE;;EAEF;;IAEE,sBAAsB,EAAE,MAAM;IAC9B,UAAU,EAAE,MAAM;EACpB;;EAEA;;IAEE;;EAEF;;IAEE,YAAY;EACd;;EAEA;;;IAGE;;EAEF;IACE,6BAA6B,EAAE,MAAM;IACrC,oBAAoB,EAAE,MAAM;EAC9B;;EAEA;;IAEE;;EAEF;IACE,wBAAwB;EAC1B;;EAEA;;;IAGE;;EAEF;IACE,0BAA0B,EAAE,MAAM;IAClC,aAAa,EAAE,MAAM;EACvB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,cAAc;EAChB;;EAEA;;IAEE;;EAEF;IACE,kBAAkB;EACpB;;EAEA;iFAC+E;;EAE/E;;IAEE;;EAEF;IACE,aAAa;EACf;;EAEA;;IAEE;;EAEF;IACE,aAAa;EACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n    line-height: 1.15; /* 1 */\n    -webkit-text-size-adjust: 100%; /* 2 */\n  }\n  \n  /* Sections\n     ========================================================================== */\n  \n  /**\n   * Remove the margin in all browsers.\n   */\n  \n  body {\n    margin: 0;\n  }\n  \n  /**\n   * Render the `main` element consistently in IE.\n   */\n  \n  main {\n    display: block;\n  }\n  \n  /**\n   * Correct the font size and margin on `h1` elements within `section` and\n   * `article` contexts in Chrome, Firefox, and Safari.\n   */\n  \n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n  \n  /* Grouping content\n     ========================================================================== */\n  \n  /**\n   * 1. Add the correct box sizing in Firefox.\n   * 2. Show the overflow in Edge and IE.\n   */\n  \n  hr {\n    box-sizing: content-box; /* 1 */\n    height: 0; /* 1 */\n    overflow: visible; /* 2 */\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  pre {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /* Text-level semantics\n     ========================================================================== */\n  \n  /**\n   * Remove the gray background on active links in IE 10.\n   */\n  \n  a {\n    background-color: transparent;\n  }\n  \n  /**\n   * 1. Remove the bottom border in Chrome 57-\n   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n   */\n  \n  abbr[title] {\n    border-bottom: none; /* 1 */\n    text-decoration: underline; /* 2 */\n    text-decoration: underline dotted; /* 2 */\n  }\n  \n  /**\n   * Add the correct font weight in Chrome, Edge, and Safari.\n   */\n  \n  b,\n  strong {\n    font-weight: bolder;\n  }\n  \n  /**\n   * 1. Correct the inheritance and scaling of font size in all browsers.\n   * 2. Correct the odd `em` font sizing in all browsers.\n   */\n  \n  code,\n  kbd,\n  samp {\n    font-family: monospace, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n  \n  /**\n   * Add the correct font size in all browsers.\n   */\n  \n  small {\n    font-size: 80%;\n  }\n  \n  /**\n   * Prevent `sub` and `sup` elements from affecting the line height in\n   * all browsers.\n   */\n  \n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n  \n  sub {\n    bottom: -0.25em;\n  }\n  \n  sup {\n    top: -0.5em;\n  }\n  \n  /* Embedded content\n     ========================================================================== */\n  \n  /**\n   * Remove the border on images inside links in IE 10.\n   */\n  \n  img {\n    border-style: none;\n  }\n  \n  /* Forms\n     ========================================================================== */\n  \n  /**\n   * 1. Change the font styles in all browsers.\n   * 2. Remove the margin in Firefox and Safari.\n   */\n  \n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n  \n  /**\n   * Show the overflow in IE.\n   * 1. Show the overflow in Edge.\n   */\n  \n  button,\n  input { /* 1 */\n    overflow: visible;\n  }\n  \n  /**\n   * Remove the inheritance of text transform in Edge, Firefox, and IE.\n   * 1. Remove the inheritance of text transform in Firefox.\n   */\n  \n  button,\n  select { /* 1 */\n    text-transform: none;\n  }\n  \n  /**\n   * Correct the inability to style clickable types in iOS and Safari.\n   */\n  \n  button,\n  [type="button"],\n  [type="reset"],\n  [type="submit"] {\n    -webkit-appearance: button;\n  }\n  \n  /**\n   * Remove the inner border and padding in Firefox.\n   */\n  \n  button::-moz-focus-inner,\n  [type="button"]::-moz-focus-inner,\n  [type="reset"]::-moz-focus-inner,\n  [type="submit"]::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n  \n  /**\n   * Restore the focus styles unset by the previous rule.\n   */\n  \n  button:-moz-focusring,\n  [type="button"]:-moz-focusring,\n  [type="reset"]:-moz-focusring,\n  [type="submit"]:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n  \n  /**\n   * Correct the padding in Firefox.\n   */\n  \n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n  \n  /**\n   * 1. Correct the text wrapping in Edge and IE.\n   * 2. Correct the color inheritance from `fieldset` elements in IE.\n   * 3. Remove the padding so developers are not caught out when they zero out\n   *    `fieldset` elements in all browsers.\n   */\n  \n  legend {\n    box-sizing: border-box; /* 1 */\n    color: inherit; /* 2 */\n    display: table; /* 1 */\n    max-width: 100%; /* 1 */\n    padding: 0; /* 3 */\n    white-space: normal; /* 1 */\n  }\n  \n  /**\n   * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n   */\n  \n  progress {\n    vertical-align: baseline;\n  }\n  \n  /**\n   * Remove the default vertical scrollbar in IE 10+.\n   */\n  \n  textarea {\n    overflow: auto;\n  }\n  \n  /**\n   * 1. Add the correct box sizing in IE 10.\n   * 2. Remove the padding in IE 10.\n   */\n  \n  [type="checkbox"],\n  [type="radio"] {\n    box-sizing: border-box; /* 1 */\n    padding: 0; /* 2 */\n  }\n  \n  /**\n   * Correct the cursor style of increment and decrement buttons in Chrome.\n   */\n  \n  [type="number"]::-webkit-inner-spin-button,\n  [type="number"]::-webkit-outer-spin-button {\n    height: auto;\n  }\n  \n  /**\n   * 1. Correct the odd appearance in Chrome and Safari.\n   * 2. Correct the outline style in Safari.\n   */\n  \n  [type="search"] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n  \n  /**\n   * Remove the inner padding in Chrome and Safari on macOS.\n   */\n  \n  [type="search"]::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n  \n  /**\n   * 1. Correct the inability to style clickable types in iOS and Safari.\n   * 2. Change font properties to `inherit` in Safari.\n   */\n  \n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n  \n  /* Interactive\n     ========================================================================== */\n  \n  /*\n   * Add the correct display in Edge, IE 10+, and Firefox.\n   */\n  \n  details {\n    display: block;\n  }\n  \n  /*\n   * Add the correct display in all browsers.\n   */\n  \n  summary {\n    display: list-item;\n  }\n  \n  /* Misc\n     ========================================================================== */\n  \n  /**\n   * Add the correct display in IE 10+.\n   */\n  \n  template {\n    display: none;\n  }\n  \n  /**\n   * Add the correct display in IE 10.\n   */\n  \n  [hidden] {\n    display: none;\n  }'],sourceRoot:""}]);const s=a},434:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),o=t.n(i),r=t(645),a=t.n(r)()(o());a.push([n.id,"/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n","",{version:3,sources:["webpack://./src/styles/reset.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;;AAEA,0BAA0B;AAC1B;;;;;;;;;;EAUE,SAAS;AACX;;AAEA,2GAA2G;AAC3G;;EAEE,gBAAgB;AAClB;;AAEA,2BAA2B;AAC3B;EACE,uBAAuB;AACzB;;AAEA,2BAA2B;AAC3B;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA,0DAA0D;AAC1D;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;AACpC;;EAEE,eAAe;EACf,cAAc;AAChB;;AAEA,yCAAyC;AACzC;;;;EAIE,aAAa;AACf;;AAEA,gGAAgG;AAChG;EACE;GACC,qBAAqB;EACtB;;EAEA;;;IAGE,qCAAqC;IACrC,uCAAuC;IACvC,sCAAsC;IACtC,gCAAgC;EAClC;AACF",sourcesContent:["/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n  margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n  max-width: 100%;\n  display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n   scroll-behavior: auto;\n  }\n  \n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n"],sourceRoot:""}]);const s=a},890:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(15),o=t.n(i),r=t(645),a=t.n(r)()(o());a.push([n.id,"body {\n  display: flex;\n  flex-direction: row;\n  background-color: #121212;\n  color: #FFFFFF;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.menuAndTitleDiv {\n  height: 80vh;\n  width: 25%;\n  background-color: rgba(255,255,255,0.05);\n  margin: 20px;\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\nform {\n  background-color: #fefefe;\n  padding: 0;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n}\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,UAAU;EACV,wCAAwC;EACxC,YAAY;EACZ,mBAAmB;EACnB,0CAA0C;EAC1C,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,WAAW;EACX,uBAAuB;EACvB,aAAa;EACb,wCAAwC;EACxC,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,qBAAqB;AACvB;;AAEA;EACE,WAAW;EACX,WAAW;AACb;;AAEA;EACE,eAAe;EACf,UAAU;EACV,OAAO;EACP,MAAM;EACN,WAAW;EACX,YAAY;EACZ,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,yBAAyB;EACzB,UAAU;EACV,sBAAsB;EACtB,qEAAqE;AACvE;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,wCAAwC;EACxC,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;EACnB,wCAAwC;EACxC,WAAW;AACb;;AAEA;EACE,wCAAwC;EACxC,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB",sourcesContent:["body {\n  display: flex;\n  flex-direction: row;\n  background-color: #121212;\n  color: #FFFFFF;\n}\n\nbutton {\n  background-color: #6200EE;\n  border: 1px solid black;\n  border-radius: 10px;\n  color: #FFFFFF;\n}\n\n.main {\n  margin: 5px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.menuAndTitleDiv {\n  height: 80vh;\n  width: 25%;\n  background-color: rgba(255,255,255,0.05);\n  margin: 20px;\n  border-radius: 10px;\n  box-shadow: 0px 15px 30px rgb(0 0 0 / 15%);\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n}\n\n.appTitle {\n  padding: 5px;\n  font-weight: bold;\n}\n\n.sidebarDiv {\n  width: 90%;\n  height: 10%;\n  border: 1px solid black;\n  padding: 10px;\n  background-color: rgba(255,255,255,0.07);\n  box-shadow: 0px 5px 10px #121212;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n\n.header {\n  width: 100%;\n  height: 15%;\n}\n\n.formModal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n}\n\nform {\n  background-color: #fefefe;\n  padding: 0;\n  border: 1px solid #888;\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n}\n\n.header {\n  height: fit-content;\n  padding: 1vw;\n  background-color: rgba(255,255,255,0.05);\n  border-radius: 7px;\n}\n\n.headerText {\n  text-align: center;\n}\n\n.taskDiv {\n  border: 2px solid gray;\n  border-radius: 10px;\n  background-color: rgba(255,255,255,0.07);\n  margin: 1vh;\n}\n\n.projectSection {\n  background-color: rgba(255,255,255,0.05);\n  margin: 2vh;\n  padding: 1vw;\n  border-radius: 7px;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,i){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);i&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}n.exports=function(n){var t,i,o=(i=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var i,o,r=[],a=!0,s=!1;try{for(t=t.call(n);!(a=(i=t.next()).done)&&(r.push(i.value),!e||r.length!==e);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==t.return||t.return()}finally{if(s)throw o}}return r}}(t,i)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var i=Object.prototype.toString.call(n).slice(8,-1);return"Object"===i&&n.constructor&&(i=n.constructor.name),"Map"===i||"Set"===i?Array.from(n):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(n,t):void 0}}(t,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],a=o[3];if(!a)return r;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),A=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[r].concat(A).concat([d]).join("\n")}return[r].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var r={},a=[],s=0;s<n.length;s++){var c=n[s],d=i.base?c[0]+i.base:c[0],A=r[d]||0,l="".concat(d," ").concat(A);r[d]=A+1;var u=t(l),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(e[u].references++,e[u].updater(h)):e.push({identifier:l,updater:o(h,i),references:1}),a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var r=i(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var s=t(r[a]);e[s].references--}for(var c=i(n,o),d=0;d<r.length;d++){var A=t(r[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}r=c}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i=t.css,o=t.media,r=t.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={id:i,exports:{}};return n[i](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n=t(379),e=t.n(n),i=t(795),o=t.n(i),r=t(569),a=t.n(r),s=t(565),c=t.n(s),d=t(216),A=t.n(d),l=t(589),u=t.n(l),h=t(372),p={};p.styleTagTransform=u(),p.setAttributes=c(),p.insert=a().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=A(),e()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var E=t(434),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),e()(E.Z,m),E.Z&&E.Z.locals&&E.Z.locals;var b=t(890),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),e()(b.Z,f),b.Z&&b.Z.locals&&b.Z.locals;const C=function(){return Math.floor(Math.random()*Date.now()).toString()},g=function([n,e]){const t=[];if(e){for(let i=0;i<n.length;i++){const o={content:n[i],checked:e[i],id:C()};t.push(o)}return t}const i=Array.from(n);for(const n of i){if(""===n.value)continue;const e={content:n.value,checked:n.disabled,id:C()};t.push(e)}return t},k=function([n,e,t,i,o,r]){const a={title:n,description:e,dueDate:t,priority:i||"",checklist:g(o),id:C(),done:!!r};return{get title(){return a.title},get description(){return a.description},get id(){return a.id},get dueDate(){return a.dueDate},get checklist(){return a.checklist},get priority(){return a.priority},findChecklistItem:n=>a.checklist.find((e=>e.id===n)),get done(){return a.done},set done(n){a.done=n}}},y=function([n,e,t]){const i={title:n,description:e,done:!!t,id:C()};let o=[];return{add(n){o=[...o,n]},remove(n){o=o.filter((e=>e.id!==n))},find:n=>o.find((e=>e.id===n)),get taskArray(){return[...o]},get title(){return i.title},get description(){return i.description},get id(){return i.id},get done(){return i.done},set done(n){i.done=n}}},v=function(n,e){const t=document.createElement(n);for(const n in e)n.toString().includes("data")?t.setAttribute(n.toString(),e[n]):t[n]=e[n];return t},B={events:{},publish:function(n,e){this.events[n]&&this.events[n].forEach((n=>n(e)))},subscribe:function(n,e){Array.isArray(this.events[n])||(this.events[n]=[]),this.events[n].push(e)}},x={init:function(){this.createElements(),this.appendContent(),this.bindEvents()},createElements:function(){this.menuAndTitleDiv=v("div",{className:"menuAndTitleDiv"}),this.title=v("h2",{className:"appTitle",textContent:"T O D O"}),this.menuButton=v("button",{className:"menuButton",textContent:"Menu"}),this.homeSidebar=v("div",{className:"sidebarDiv",id:"homeSidebar",textContent:"Home"}),this.taskSidebar=v("div",{className:"sidebarDiv",id:"taskSidebar",textContent:"Tasks"}),this.projectSidebar=v("div",{className:"sidebarDiv",id:"projectSidebar",textContent:"Projects"}),this.addProjectButton=v("button",{className:"addProjectButton",textContent:"Add Project"}),this.main=v("div",{className:"main"}),this.header=v("div",{className:"header"}),this.headerText=v("h1",{className:"headerText",textContent:"Home"})},appendContent:function(){this.menuAndTitleDiv.append(this.title,this.menuButton,this.homeSidebar,this.taskSidebar,this.projectSidebar,this.addProjectButton),this.header.append(this.headerText),this.main.append(this.header),document.body.append(this.menuAndTitleDiv,this.main)},bindEvents:function(){this.homeSidebar.addEventListener("click",this.changeHeader.bind(x)),this.taskSidebar.addEventListener("click",this.changeHeader.bind(x)),this.projectSidebar.addEventListener("click",this.changeHeader.bind(x)),this.addProjectButton.addEventListener("click",this.openProjectForm)},changeHeader:function(n){this.headerText.textContent=n.target.textContent},openProjectForm:function(){w()&&document.body.append(w())}};function I(n,e){if(document.querySelector(".formModal"))return;const t=v("section",{id:`section${n}Form`,className:"formModal"}),i={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.header=v("h2",{textContent:"Create a new task"}),this.form=v("form",{id:`form${n}`,name:e}),this.inputTaskTitle=v("input",{id:`input${n}Title`,name:"inputTaskName",type:"text",maxLength:"50",placeholder:"task title...",required:"true"}),this.inputTaskDesc=v("textarea",{id:`input${n}Desc`,name:"inputTaskDesc",placeholder:"desc/notes..."}),this.inputTaskDueDate=v("input",{id:`input${n}DueDate`,name:"inputTaskDueDate",type:"date"}),this.inputTaskPriority=v("input",{id:`input${n}Priority`,name:"inputTaskPriority",type:"text",placeholder:"high/medium/low"}),this.addTaskChecklistButton=v("button",{id:`add${n}ChecklistButton`,type:"button",textContent:"Add Checklist"}),this.submitButton=v("button",{id:"submitButtonTask",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputTaskTitle,this.inputTaskDesc,this.inputTaskDueDate,this.inputTaskPriority,this.addTaskChecklistButton,this.submitButton),t.append(this.header,this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(i)),this.form.addEventListener("submit",this.formFunction.bind(i)),this.form.addEventListener("submit",this.deleteChecklistInputs.bind(i)),this.addTaskChecklistButton.addEventListener("click",this.createChecklist.bind(i))},publishData:function(){B.publish("addTask",this.form.elements)},formFunction:function(n){n.preventDefault(),this.form.reset(),t.remove()},deleteChecklistInputs:function(){this.checklistInputs=document.querySelectorAll(".inputChecklist"),this.checklistButtons=document.querySelectorAll(".inputTaskChecklistDelete"),this.checklistInputs.forEach((n=>n.remove())),this.checklistButtons.forEach((n=>n.remove()))},createChecklist:function(){this.inputTaskChecklistDiv=v("div"),this.inputTaskChecklist=v("input",{id:`input${n}Checklist`,name:`input${n}Checklist`,className:"inputChecklist",type:"text",disabled:!1,placeholder:"enter checklist item here..."}),this.inputTaskChecklistDelete=v("button",{className:`input${n}ChecklistDelete`,textContent:"Del Item"}),this.inputTaskChecklistDiv.append(this.inputTaskChecklist,this.inputTaskChecklistDelete),this.form.insertBefore(this.inputTaskChecklistDiv,this.submitButton),this.inputTaskChecklistDelete.addEventListener("click",this.deleteChecklistItem.bind(i))},deleteChecklistItem:function(n){n.target.parentNode.remove()}};return i.init(),t}function w(){if(document.querySelector(".formModal"))return;const n=v("section",{id:"projectFormSection",className:"formModal"}),e={init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.header=v("h2",{textContent:"Create a new project"}),this.form=v("form",{id:"projectForm"}),this.inputProjectTitle=v("input",{id:"inputProjectTitle",name:"inputProjectTitle",type:"text",placeholder:"project title...",required:"true"}),this.inputProjectDesc=v("textarea",{id:"inputProjectDesc",name:"inputProjectDesc",placeholder:"desc/notes..."}),this.submitButton=v("button",{id:"submitButtonProject",type:"submit",textContent:"Submit"})},appendElements:function(){this.form.append(this.inputProjectTitle,this.inputProjectDesc,this.submitButton),n.append(this.header,this.form)},bindEvents:function(){this.form.addEventListener("submit",this.publishData.bind(e)),this.form.addEventListener("submit",this.formFunction.bind(e))},publishData:function(){B.publish("addProject",this.form.elements)},formFunction:function(e){e.preventDefault(),this.form.reset(),n.remove()}};return e.init(),n}function S(n){const e=[],t=[];for(const i of n)e.push(i.content),t.push(i.checked);return[e,t]}function T(n){localStorage.clear();let e=1;for(const t of n){localStorage.setItem(`Project: ${e};`,JSON.stringify([t.title,t.description,t.done]));let n=1;for(const i of t.taskArray)localStorage.setItem(`Project: ${e}; Task: ${n}`,JSON.stringify([i.title,i.description,i.dueDate,i.priority,S(i.checklist),i.done])),n++;e++}}function D(n){B.publish("addProjectDOM",M.findWithTitle(n))}const M=function(){let n=[];return{add(e){n=[...n,e]},remove(e){n=n.filter((n=>n.id!==e))},find:e=>n.find((n=>n.id===e)),findWithTitle:e=>n.find((n=>n.title===e)),findWithTaskId:e=>n.find((n=>n.find(e))),getTaskWithTaskId(n){return this.findWithTaskId(n).find(n)},get projectArray(){return[...n]}}}();function F(n){const e=k([n.inputTaskName.value,n.inputTaskDesc.value,n.inputTaskDueDate.value,n.inputTaskPriority.value,[document.querySelectorAll(".inputChecklist")]]),t=n[0].parentNode.name,i=M.find(t);i.add(e),B.publish("addTaskDOM",i),T(M.projectArray)}function j(n){const e=y([n.inputProjectTitle.value,n.inputProjectDesc.value]);M.add(e),B.publish("addProjectSidebar",e.title),T(M.projectArray)}function z(n){M.findWithTaskId(n).remove(n),T(M.projectArray)}function P(n){B.publish("editThisData",[M.findWithTaskId(n),M.getTaskWithTaskId(n)]),z(n),T(M.projectArray)}function N([n,e]){const t=M.getTaskWithTaskId(e),i=t.findChecklistItem(n);console.log(t),i.checked?i.checked=!1:i.checked=!0,T(M.projectArray)}function R(n){const e=M.getTaskWithTaskId(n);e.done?e.done=!1:e.done=!0,B.publish("toggleCompleteTaskDOM",e),T(M.projectArray)}function O(n){const e=M.find(n);e.done?e.done=!1:e.done=!0,B.publish("toggleCompleteProjectDOM",e),T(M.projectArray)}function q(n){M.remove(n),T(M.projectArray)}function L(n){Y();for(const e of n)$(e),"All Tasks"!==e.title&&Z(e.title)}function W(n){Y(),$(n)}function G(n){Y(),$(n)}function U(n){Y();for(const e of n)"All Tasks"!==e.title&&$(e)}function Z(n){const e=document.querySelector(".menuAndTitleDiv"),t=v("div",{id:n,textContent:n});e.append(t),t.addEventListener("click",(()=>document.querySelector(".headerText").textContent=n)),t.addEventListener("click",(n=>B.publish("requireProjectForDisplay",n.target.id)))}function $(n){const e=document.querySelector(".main"),t=v("section",{"data-id":n.id,className:"projectSection"});let i,o,r,a;n.done?t.style.opacity=.5:t.style.opacity=1,"All Tasks"===n.title?(i=v("h2",{className:"projectHeading",textContent:""}),o=v("button",{className:"addTaskInPRoject",textContent:"Add Task"})):(i=v("h2",{className:"projectHeading",textContent:n.title}),o=v("button",{className:"addTaskInProject",textContent:`Add Task in ${n.title}`}),r=v("button",{className:"completeProjectButton",textContent:"Complete"}),a=v("button",{className:"deleteProjectButton",textContent:"Delete Project"}),r.addEventListener("click",(n=>B.publish("toggleCompleteProject",n.target.parentNode.getAttribute("data-id")))),a.addEventListener("click",(n=>{B.publish("deleteProject",n.target.parentNode.getAttribute("data-id")),n.target.parentNode.remove()}))),t.append(i,o,r||"",a||""),e.append(t),o.addEventListener("click",(function(){if(!I())return;const n=I("Task",this.parentNode.getAttribute("data-id"));this.parentNode.append(n)})),0!==n.taskArray.length&&H(n)}function Y(){const n=document.querySelector(".main");for(;n.querySelector("section");)n.lastChild.remove()}function H(n){const e=document.querySelector(`[data-id="${n.id}"]`);!function(n){const e=n.querySelectorAll(".taskDiv");e&&e.forEach((n=>n.remove()))}(e);const t=n.taskArray;for(const n of t)e.append(X(n))}function X(n){const e=v("div",{className:"taskDiv","data-id":n.id});return n.done?e.style.opacity=.5:e.style.opacity=1,{init:function(){this.createElements(),this.appendElements(),this.bindEvents()},createElements:function(){this.taskTitle=v("h4",{className:"taskTitle",textContent:n.title}),this.taskDesc=v("p",{className:"taskDesc",textContent:n.description}),this.taskChecklist=function(n,e){const t=v("div",{className:"checklistDiv"});for(const i of n){const n=v("div",{className:"checkboxDiv","data-id":e.id}),o=v("input",{type:"checkbox",id:i.id,"data-id":i.id,"pointer-events":"none"}),r=v("label",{for:i.id,textContent:i.content});i.checked&&(o.checked=!0,r.style.opacity=.5),n.append(o,r),t.append(n),n.addEventListener("click",J)}return t}(n.checklist,n),this.taskDueDate=v("p",{className:"taskDueDate",textContent:n.dueDate}),this.taskPriority=v("p",{className:"taskPriority",textContent:n.priority?`Priority: ${n.priority}`:""}),this.taskComplete=v("button",{className:"taskComplete",textContent:"Completed!"}),this.taskDelete=v("button",{className:"deleteTask",textContent:"Delete Task"}),this.taskUpdate=v("button",{className:"updateTask",textContent:"Update Task"})},appendElements:function(){e.append(this.taskTitle,this.taskDesc,this.taskChecklist,this.taskDueDate,this.taskPriority,this.taskComplete,this.taskDelete,this.taskUpdate)},bindEvents:function(){this.taskComplete.addEventListener("click",(n=>B.publish("toggleCompleteTask",n.target.parentNode.getAttribute("data-id")))),this.taskDelete.addEventListener("click",this.deleteTaskDOM),this.taskUpdate.addEventListener("click",(n=>B.publish("requireEditData",n.target.parentNode.getAttribute("data-id"))))},deleteTaskDOM:function(n){B.publish("deleteTask",n.target.parentNode.getAttribute("data-id")),n.target.parentNode.remove()}}.init(),e}function J(n){const e=this.querySelector("input"),t=this.querySelector("label");e.checked?void 0===n.target.type&&(e.checked=!1):void 0===n.target.type&&(e.checked=!0),function(n,e){e.style.opacity=n?.5:1}(e.checked,t),B.publish("toggleChecklist",[e.getAttribute("data-id"),e.parentNode.getAttribute("data-id")])}function V([n,e]){const t=I("Task",n.id);document.body.append(t);const i=t.lastChild,o=document.getElementById("submitButtonTask");i.elements[0].value=e.title,i.elements[1].value=e.description,i.elements[2].value=e.dueDate,i.elements[3].value=e.priority;for(const n of e.checklist){const e=v("div"),t=v("input",{className:"inputChecklist",type:"text",value:n.content,disabled:n.checked}),a=v("button",{className:"inputTaskChecklistDelete",textContent:"Del Item"});e.append(t,a),i.insertBefore(e,o),a.addEventListener("click",r)}function r(n){n.target.parentNode.remove()}}function K(n){const e=document.querySelector(`[data-id="${n.id}"]`);n.done?e.style.opacity=.5:e.style.opacity=1}function _(n){const e=document.querySelector(`[data-id="${n.id}"]`);n.done?e.style.opacity=.5:e.style.opacity=1}M.add(y(["All Tasks"])),console.log(M),B.subscribe("pageLoad",L);x.init(),function(){if(0===localStorage.length)return;const n=Object.keys(localStorage),e=[];for(let t=0;t<=n.length;t++){const i=n.filter((n=>n.slice(0,n.indexOf(";")).includes(`${t}`)));0!==i.length&&(i.sort(((n,e)=>n.length-e.length)),e.push(i))}for(let n=1;n<e[0].length;n++){const t=e[0].slice();M.findWithTitle("All Tasks").add(k(JSON.parse(localStorage.getItem(t[n]))))}for(let n=1;n<e.length;n++){let t;const i=e[n].slice();for(let n=0;n<i.length;n++)0!==n?t.add(k(JSON.parse(localStorage.getItem(i[n])))):t=y(JSON.parse(localStorage.getItem(i[n])));M.add(t)}}(),{init:function(){this.cacheDOM(),this.bindEvents()},cacheDOM:function(){this.taskSidebar=document.getElementById("taskSidebar"),this.projectSidebar=document.getElementById("projectSidebar"),this.homeSidebar=document.getElementById("homeSidebar")},bindEvents:function(){this.taskSidebar.addEventListener("click",(()=>B.publish("taskSidebarClicked",M.findWithTitle("All Tasks")))),this.projectSidebar.addEventListener("click",(()=>B.publish("projectSidebarClicked",M.projectArray))),this.homeSidebar.addEventListener("click",(()=>B.publish("homeSidebarClicked",M.projectArray)))}}.init(),B.publish("pageLoad",M.projectArray),B.subscribe("addTask",F),B.subscribe("deleteTask",z),B.subscribe("requireEditData",P),B.subscribe("toggleChecklist",N),B.subscribe("toggleCompleteTask",R),B.subscribe("addProject",j),B.subscribe("requireProjectForDisplay",D),B.subscribe("toggleCompleteProject",O),B.subscribe("deleteProject",q),B.subscribe("addTaskDOM",H),B.subscribe("editThisData",V),B.subscribe("toggleCompleteTaskDOM",K),B.subscribe("addProjectDOM",G),B.subscribe("homeSidebarClicked",L),B.subscribe("taskSidebarClicked",W),B.subscribe("projectSidebarClicked",U),B.subscribe("addProjectSidebar",Z),B.subscribe("toggleCompleteProjectDOM",_)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,